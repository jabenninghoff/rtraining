<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>rtraining</title>
<link>https://jabenninghoff.github.io/rtraining/</link>
<atom:link href="https://jabenninghoff.github.io/rtraining/index.xml" rel="self" type="application/rss+xml"/>
<description>My notes and experiences learning R and RStudio, bundled as an R package (work-in-progress), and published to GitHub Pages using Quarto.</description>
<language>en-us</language>
<generator>quarto-1.4.549</generator>
<lastBuildDate>Thu, 21 Dec 2023 06:00:00 GMT</lastBuildDate>
<item>
  <title>Using Rcpp</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/using-Rcpp.html</link>
  <description><![CDATA[ 




<p>Notes on using <a href="https://www.rcpp.org">Rcpp</a> to implement <a href="https://github.com/HenryRLee/PokerHandEvaluator">Poker-Hand-Evaluator</a> in the <a href="https://jabenninghoff.github.io/cards/">cards</a> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no libraries</span></span></code></pre></div>
</div>
<section id="background" class="level1">
<h1>Background</h1>
<p>Rcpp provides an interface to C++, which allows <a href="https://adv-r.hadley.nz/rcpp.html">rewriting R code in C++</a> to improve performance. The cards package implements functions that simulate dealing and evaluating poker hands in R and PH Evaluator using python via <a href="https://rstudio.github.io/reticulate/">reticulate</a>. Will the C++ version of PH Evaluator be faster?</p>
<p>The <a href="https://CRAN.R-project.org/package=Rcpp/vignettes/Rcpp-libraries.pdf">Thirteen Simple Steps for Creating An R Package with an External C++ Library</a> vignette provides good high-level guidance on integrating a C++ library into an R package using base R; additional work is needed to implement Rcpp using roxygen2. The source code for the <a href="https://CRAN.R-project.org/package=corels">Corels</a> package referenced in the vignette can be found on GitHub: <a href="https://github.com/corels/rcppcorels" class="uri">https://github.com/corels/rcppcorels</a>.</p>
</section>
<section id="test-build" class="level1">
<h1>Test Build</h1>
<p>To start, I followed PH Evaluator’s <a href="https://github.com/HenryRLee/PokerHandEvaluator/tree/master/cpp">instructions</a> to build and test the <code>pheval</code> library, which required installation of <code>cmake</code> using Homebrew (<code>brew install cmake</code>).</p>
</section>
<section id="example-function" class="level1">
<h1>Example Function</h1>
<p>As a next step, I implemented a simple example function to ensure Rcpp was working properly. After some research, I added the following code:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb2-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Leading NA</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' This function returns a logical vector identifying if</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' there are leading NA, marking the leading NAs as TRUE and</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' everything else as FALSE.</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Code from [Rcpp and Roxygen2](https://www.r-bloggers.com/2016/08/rcpp-and-roxygen2/).</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Installed with help from [usethis::use_rcpp()] and roxygen2 instructions on</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [Rcpp](https://roxygen2.r-lib.org/articles/roxygen2.html#rcpp).</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Steps to install:</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' 1. Create `src/leading_na.cpp` (this file)</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' 1. Run [usethis::use_rcpp()], add `@importFrom Rcpp sourceCpp` and</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'    `@useDynLib cards, .registration = TRUE` to `package.R` as directed</span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' 1. Run [desc::desc_normalize()] and [devtools::document()]</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @param x An integer vector</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb2-25">LogicalVector leading_na<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IntegerVector x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-26">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb2-27">  LogicalVector leading_na<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-28"></span>
<span id="cb2-29">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-30">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NA_INTEGER<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb2-31">    leading_na<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TRUE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-32">    i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++;</span></span>
<span id="cb2-33">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-34">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> leading_na<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-35"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>After the first two steps, <a href="https://devtools.r-lib.org/reference/document.html"><code>devtools::document()</code></a> automates the addition of the <code>leading_na()</code> function, R documentation, and Rcpp support to the package.</p>
</section>
<section id="stub-function" class="level1">
<h1>Stub Function</h1>
<p>As a next step, I implemented a stub function with help from <a href="https://teuder.github.io/rcpp4everyone_en/">Rcpp for everyone</a>, specifically the chapter on <a href="https://teuder.github.io/rcpp4everyone_en/070_data_types.html">Data types</a>:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb3-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate a poker hand using PH Evaluator</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate the rank category of a five card poker hand using</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [PH Evaluator](https://github.com/HenryRLee/PokerHandEvaluator).</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Currently implemented as a stub function that always returns "poker_hand".</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @return string hand rank</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb3-14">String eval_hand_phe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poker_hand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The stub works, and suggests an approach for a first implementation using Rcpp: create a function that calls <code>phevaluator::EvaluateCards()</code> and returns a string based on <code>Rank.category()</code> or <code>Rank.describeCategory</code>, following <a href="https://github.com/HenryRLee/PokerHandEvaluator/blob/master/cpp/examples/cpp_example.cc"><code>cpp_example.cc</code></a>. A more complete implementation would use <a href="https://CRAN.R-project.org/package=Rcpp/vignettes/Rcpp-modules.pdf">Rcpp Modules</a> to expose the C++ classes and methods in PH Evaluator, with help from the <a href="https://github.com/coatless-r-n-d/rcpp-modules-student">RcppStudent</a> R package.</p>
<p>Additional examples implementing C++ libraries in Rcpp I found include <a href="https://github.com/eddelbuettel/rcppannoy">RcppAnnoy</a>, written by Rcpp author and maintainer Dirk Eddelbuettel, <a href="https://github.com/R-Lum/rxylib">rxylib</a>, and <a href="https://github.com/AleMorales/RcppSundials.R">RcppSundials</a>.</p>
<section id="add-headers" class="level2">
<h2 class="anchored" data-anchor-id="add-headers">Add Headers</h2>
<p>To start the first implementation, I added the headers from <code>cpp_example.cc</code>:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb4-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;phevaluator/phevaluator.h&gt;</span></span>
<span id="cb4-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb4-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cassert&gt;</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate a poker hand using PH Evaluator</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate the rank category of a five card poker hand using</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [PH Evaluator](https://github.com/HenryRLee/PokerHandEvaluator).</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Implemented following</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [`cpp_example.cc`](https://github.com/HenryRLee/PokerHandEvaluator/blob/master/cpp/examples/cpp_example.cc)</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   and [RcppAnnoy](https://github.com/eddelbuettel/rcppannoy).</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Currently implemented as a stub function that always returns "poker_hand".</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @param hand a hand of cards (an integer vector of length 5).</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @return string hand rank.</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb4-23">String eval_hand_phe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IntegerVector hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-24">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// phevaluator::Rank rank = phevaluator::EvaluateCards(hand[0], hand[1], hand[2], hand[3], hand[4]);</span></span>
<span id="cb4-25">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// return rank.describeCategory();</span></span>
<span id="cb4-26">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"poker_hand"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-27"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>To get the updated code to compile, I had to add <code>src/Makevars</code>, which I copied from RcppAnnoy, and also added the <code>cpp/include</code> directory from PH Evaluator to <code>inst/</code>.</p>
<p><code>src/Makevars</code>:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PKG_CPPFLAGS</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -I../inst/include/</span></span></code></pre></div>
<p>While this code compiled, to get the commented code working, I’d need to add the code from <code>cpp/src</code>. Just dumping the files from PH Evaluator into <code>src/</code> didn’t work, but the rxylib <a href="https://github.com/R-Lum/rxylib/blob/master/src/Makevars"><code>Makevars</code></a> file offered a clue: adapt the <a href="https://github.com/HenryRLee/PokerHandEvaluator/blob/master/cpp/Makefile"><code>Makefile</code></a> from PH Evaluator to the R <code>Makevars</code> format to properly build the library objects. Put another way, follow how rxylib translated <a href="https://github.com/wojdyr/xylib/blob/master/xylib/Makefile.am"><code>xlib/Makefile.am</code></a> to <code>Makevars</code>. The Stack Overflow <a href="https://stackoverflow.com/questions/43597632/understanding-the-contents-of-the-makevars-file-in-r-macros-variables-r-ma">question</a> referenced in rxylib provided additional details on the <code>Makevars</code> file format.</p>
</section>
</section>
<section id="full-implementation" class="level1">
<h1>Full Implementation</h1>
<p>After some experimentation, I added the following files from PH Evaluator’s <code>cpp/src</code> to <code>src/</code>:</p>
<pre><code>7462.c
dptables.c
evaluator5.c
evaluator5.cc
hash.c
hash.h
hashtable.c
hashtable5.c
rank.c
tables.h
tables_bitwise.c</code></pre>
<p>These were the minimal files needed to support the first implementation, which only had to support evaluation of 5 card hands.</p>
<p>I also added a line to <code>src/Makevars</code> to enable the C++ 17 standard used by PH Evaluator:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode makefile code-with-copy"><code class="sourceCode makefile"><span id="cb7-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">PKG_CPPFLAGS</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -I../inst/include/</span></span>
<span id="cb7-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">CXX_STD</span> <span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> CXX17</span></span></code></pre></div>
<p>This <em>nearly</em> compiled, but failed with an error:</p>
<pre><code>   duplicate symbol '_evaluate_5cards' in:
       /Users/agamemnon/GitHub/cards/src/evaluator5.o
       /Users/agamemnon/GitHub/cards/src/evaluator5.o</code></pre>
<p>Ultimately this error was the result of two files with the same name but different file extensions (<code>evaluator5.c</code> and <code>evaluator5.cc</code>). Renaming <code>evaluator5.c</code> to <code>evaluator_5_c.c</code> fixed the issue, and the code below compiled and tested properly!</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb9-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;Rcpp.h&gt;</span></span>
<span id="cb9-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">using</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">namespace</span> Rcpp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;phevaluator/phevaluator.h&gt;</span></span>
<span id="cb9-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;iostream&gt;</span></span>
<span id="cb9-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cassert&gt;</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate a poker hand using PH Evaluator</span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Evaluate the rank category of a five card poker hand using</span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [PH Evaluator](https://github.com/HenryRLee/PokerHandEvaluator).</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' Implemented following</span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [Rcpp-libraries](https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-libraries.pdf),</span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   PH Evaluator</span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [`cpp_example.cc`](https://github.com/HenryRLee/PokerHandEvaluator/blob/master/cpp/examples/cpp_example.cc),</span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   and [RcppAnnoy](https://github.com/eddelbuettel/rcppannoy), with help from</span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   R-Bloggers [Rcpp and Roxygen2](https://www.r-bloggers.com/2016/08/rcpp-and-roxygen2/),</span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [usethis::use_rcpp()], roxygen2 instructions on</span></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [Rcpp](https://roxygen2.r-lib.org/articles/roxygen2.html#rcpp),</span></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [Rcpp for everyone](https://teuder.github.io/rcpp4everyone_en/), the rxylib</span></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [`Makefile`](https://github.com/R-Lum/rxylib/blob/master/src/Makevars) and</span></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   [Stack Overflow](https://stackoverflow.com/questions/43597632/understanding-the-contents-of-the-makevars-file-in-r-macros-variables-r-ma).</span></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' `eval_hand_phe` returns one of the rank categories "Straight Flush", "Four of a Kind",</span></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'   "Full House", "Flush", "Straight", "Three of a Kind", "Two Pair", "One Pair", or "High Card".</span></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' "Royal Flush" and "Jacks or Better" are not currently supported.</span></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//'</span></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @param hand a hand of cards (an integer vector of length 5).</span></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @return string hand rank.</span></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @examples</span></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' hand &lt;- deal_hand(new_deck())</span></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' print_hand(hand)</span></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' eval_hand_phe(hand)</span></span>
<span id="cb9-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//' @export</span></span>
<span id="cb9-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// [[Rcpp::export]]</span></span>
<span id="cb9-38">String eval_hand_phe<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>IntegerVector hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-39">  phevaluator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Rank rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phevaluator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>EvaluateCards<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> hand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb9-40">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>describeCategory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb9-41"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>After this, I removed the example function, added a C/C++ benchmark, and published cards 0.3.0.</p>
<section id="follow-up" class="level2">
<h2 class="anchored" data-anchor-id="follow-up">Follow-up</h2>
<p>I did some additional research, and there doesn’t seem to be a simple way to change R to compile using <code>filename.cc.o</code> instead of <code>filename.o</code>, as it goes against the intent of the R developers, as described in this Stack Overflow <a href="https://stackoverflow.com/questions/23414448/r-makevars-file-to-overwrite-r-cmds-default-g-options">article</a>:</p>
<blockquote class="blockquote">
<p>The clear recommendation on r-devel (please check the archives) is that you should avoid Makefile logic if you can. IIRC this echoed in the Writing R Extension manual.</p>
</blockquote>
<p>So, it seems the right answer is to rename the files to avoid this conflict. Additionally, after reading a tidyverse blog post on <a href="https://www.tidyverse.org/blog/2023/03/cran-checks-compiled-code/">New CRAN requirements for packages with C and C++</a>, I learned that the R C++ standard was now C++17, so I technically did not need that line in the <code>Makevars</code> file, but I decided to keep it as it was an upstream requirement.</p>
<p>I also discovered an example <a href="https://github.com/coatless-r-n-d/rcpp-headers-subdirs">package</a> that explained how to put code in a subdirectory of <code>src/</code>, which I plan to use for the second version using Rcpp Modules.</p>
<p>I later added a script to copy (or update) the PH Evaluator source and header files to the cards package, to automate future updates if needed.</p>
<p>After reading through the <a href="https://rstudio.github.io/r-manuals/r-exts/Creating-R-packages.html">Creating R Packages</a> chapter of <a href="https://rstudio.github.io/r-manuals/r-exts/">Writing R Extensions</a> and evaluating my options, I am inclined to use a simple approach to creating a “phevaluator” package, copying the necessary files into <code>src/</code> (with a shell script for reproducibility), use a minimal <code>Makevars</code> file, and use <a href="https://CRAN.R-project.org/package=Rcpp/vignettes/Rcpp-modules.pdf">Rcpp Modules</a> to expose the C++ classes and methods in PH Evaluator, following the approach used by the <a href="https://github.com/coatless-r-n-d/rcpp-modules-student">RcppStudent</a> R package.</p>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/using-Rcpp.html</guid>
  <pubDate>Thu, 21 Dec 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>R Books</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/r-books.html</link>
  <description><![CDATA[ 




<p>An actively maintained and curated list of R Books and other recommended resources from my reading list.</p>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<p>Libraries used in this notebook.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(cranlogs)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span></code></pre></div>
</div>
</section>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>Books and resources I recommend for learning R.</p>
<section id="r-for-data-science" class="level3">
<h3 class="anchored" data-anchor-id="r-for-data-science">R for Data Science</h3>
<p><a href="https://r4ds.hadley.nz">R for Data Science (2e)</a> - Second Edition of <a href="https://hadley.nz/">Hadley Wickham’s</a> introductory book on R and exploratory data analysis. The book contains example code and exercises in most chapters. I used the <a href="https://r4ds.had.co.nz/">first edition</a> as my primary source when I was first learning R, and still recommend the book for beginners who want to learn R. The book teaches the basics of using tidyverse R<sup>1</sup> for exploratory data analysis and visualization. A companion book provides suggested <a href="https://mine-cetinkaya-rundel.github.io/r4ds-solutions/">solutions</a> to the exercises.</p>
<p>Sample visualization from the first chapter:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualization from https://r4ds.hadley.nz/data-visualize#first-steps</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> penguins,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> body_mass_g)</span>
<span id="cb2-5">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> species)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb2-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body mass and flipper length"</span>,</span>
<span id="cb2-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimensions for Adelie, Chinstrap, and Gentoo Penguins"</span>,</span>
<span id="cb2-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Flipper length (mm)"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Body mass (g)"</span>,</span>
<span id="cb2-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Species"</span></span>
<span id="cb2-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_colorblind</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/r-books_files/figure-html/r4ds-1.png" class="img-fluid figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<p>In addition to R for Data Science, I recommend the following resources for new R users:</p>
<ul>
<li><a href="https://r-graph-gallery.com/">The R Graph Gallery</a> - library of charts made with R and ggplot2</li>
<li>Packages for writing better code:
<ul>
<li><a href="https://rstudio.github.io/renv/">renv</a> - for package version management by project</li>
<li><a href="https://styler.r-lib.org/">styler</a> - for consistent formatting of R code</li>
<li><a href="https://lintr.r-lib.org">lintr</a> - for avoiding common mistakes</li>
</ul></li>
<li>Style guides for writing better code:
<ul>
<li><a href="https://style.tidyverse.org/">tidyverse style guide</a> - implemented by styler</li>
<li><a href="https://google.github.io/styleguide/Rguide.html">Google’s R Style Guide</a> - a fork of the tidyverse guide</li>
</ul></li>
</ul>
<p><a href="https://jabenninghoff.github.io/rdev/index.html">rdev</a>, my personalized collection of R development tools, includes all three of these packages and more, along with my own <a href="https://jabenninghoff.github.io/rdev/articles/style-guide.html">style guide</a> and R environment setup <a href="https://jabenninghoff.github.io/rdev/articles/rdev.html">instructions</a>.</p>
</section>
</section>
<section id="additional-reading" class="level2">
<h2 class="anchored" data-anchor-id="additional-reading">Additional Reading</h2>
<p>Books I read to improve my knowledge of R.</p>
<ul>
<li><a href="https://r-pkgs.org/">R Packages (2e)</a> - the second edition of Hadley Wickham’s book on writing R packages, which I used to build <a href="https://github.com/jabenninghoff/rdev">rdev</a></li>
<li><a href="https://adv-r.hadley.nz/">Advanced R</a> - the second edition of Hadley’s book on R programming, which explains the R language (the <a href="http://adv-r.had.co.nz">first edition</a> uses more base R than the second edition)</li>
<li><a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a> - solutions to exercises from <em>Advanced R</em></li>
<li><a href="https://ggplot2-book.org">ggplot2: Elegant Graphics for Data Analysis (3e)</a> - the third edition of Hadley’s book on his implementation of Leland Wilkinson’s <em>Grammar of Graphics</em></li>
<li><a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a> - solutions to exercises from <em>ggplot2</em></li>
</ul>
<p>My own notes and solutions to the Advanced R and ggplot2 exercises are available on this site.</p>
<section id="raps-with-r" class="level3">
<h3 class="anchored" data-anchor-id="raps-with-r">raps-with-r</h3>
<p><a href="https://raps-with-r.dev">Building reproducible analytical pipelines with R</a> - the stated goal of the book is to improve the reproducibility of data analysis. I don’t recommend this book. Section 1 is a reasonably good introduction to git and GitHub, but introduces trunk-based development without covering linear commit history. Section 2 provides some good advice, but much that I disagree with, including inline use of <code>knitr::knit_child</code> to automate creation of sections (which break the notebook workflow) and <code>fusen</code> to create packages from <code>.Rmd</code> files, which I found to create extra work with no clear benefits over using and/or extending the standard package layout like <a href="https://www.crumplab.com/vertical/index.html">vertical</a> or my own <a href="https://jabenninghoff.github.io/rdev/articles/analysis-package-layout.html">layout</a> from <a href="https://jabenninghoff.github.io/rdev/index.html">rdev</a>. (Interestingly, the author of vertical is <a href="https://www.crumplab.com/blog/post_886_10_14_22_quartoProjects/">also</a> <a href="https://www.crumplab.com/blog/663_quarto_projects/">switching</a> to <a href="https://quarto.org">Quarto</a> for reproducible research and analysis) I also found the code examples to be inconsistent and a bit clunky.</p>
<p>Chapter 12 gives recommendations on testing: unit testing with some basic examples, <a href="https://en.wikipedia.org/wiki/Assertion_(software_development)">assertive programming</a>, <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test-Driven Development (TDD)</a>, and test coverage. It suggests three packages for R assertions: <a href="https://github.com/hadley/assertthat"><code>assertthat</code></a>, <a href="https://poissonconsulting.github.io/chk/"><code>chk</code></a>, and <a href="https://mllg.github.io/checkmate/"><code>checkmate</code></a>. Both <code>chk</code> and <code>checkmate</code> are designed to check function arguments; of the two, <code>checkmate</code> appears to be more robust and built to address the downside of R being a dynamically typed language.</p>
<p>For data validation, I currently use <code>stopifnot()</code>, although I may switch to either <code>assertr</code> or <code>validate</code>, which are both popular packages. I validate function arguments using manual checks, but <code>checkmate</code> looks appealing as a way to write more succinct code. Total downloads for the <code>assertr</code>, <code>validate</code>, <code>chk</code>, and <code>checkmate</code> packages for the last month are listed below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cran_downloads</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">packages =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assertr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"validate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"chk"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"checkmate"</span>),</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">when =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"last-month"</span></span>
<span id="cb3-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(package) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarize</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">downloads =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(count), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">as_of =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(date))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 3
  package   downloads as_of     
  &lt;chr&gt;         &lt;dbl&gt; &lt;date&gt;    
1 assertr        1609 2023-12-30
2 checkmate    244133 2023-12-30
3 chk           11199 2023-12-30
4 validate       1426 2023-12-30</code></pre>
</div>
</div>
<p>2023-12-29 Update: I’ve started using <code>checkmate</code> to check function arguments and have found that <code>validate</code> is better overall at data validation.</p>
<p>Chapter 13 introduces <a href="https://docs.ropensci.org/targets/">targets</a>, “a Make-like pipeline tool for statistics and data science in R.” Conceptually, targets is very similar to an R Notebook, but like Make, will skip components that are up to date, and can run targets in parallel to speed up builds. targets can also render R Markdown documents using the <code>tarchetypes</code> package. I found the example target pipeline in the book convoluted and didn’t attempt to follow it. The targets <a href="https://books.ropensci.org/targets/">manual</a> explains that it implements <a href="https://books.ropensci.org/targets/literate-programming.html#scope">two kinds</a> of literate programming:</p>
<blockquote class="blockquote">
<ol type="1">
<li>A literate programming source document (or Quarto project) that renders inside an individual target. Here, you define a special kind of target that runs a lightweight R Markdown report which depends on upstream targets.</li>
<li>Target Markdown, an overarching system in which one or more Quarto or R Markdown files write the _targets.R file and encapsulate the pipeline.</li>
</ol>
</blockquote>
<p>Of these two types, the second is a better fit with my preferred workflow: including multiple self-contained notebooks in a single repository. From the <a href="https://books.ropensci.org/targets/markdown.html">appendix</a>, the design of Target Markdown supports both interactive development using notebooks and running a pipeline non-interactively when rendering the final document. For my work, targets doesn’t offer significant advantages over using R Markdown and Quarto - the only slowdown I typically encounter is when building a site with many notebooks, which the Quarto <a href="https://quarto.org/docs/projects/code-execution.html#freeze">freeze</a> option handles by only re-rendering documents when the source file changes. (I’m not performing the large, complex computations that targets is designed for)</p>
<p>Chapter 14 covers Docker, and asserts that it is necessary for reproducibility. While using Docker ensures a stable operating system environment, I think the book overstates the case for reproducibility, citing a single example where the operating system changed the results of an analysis because the scripts relied on OS file ordering. Much like use of targets, Docker would be most useful for projects with complex development environments shared across teams, but much of the benefits can be achieved using other approaches, like using <a href="https://fs.r-lib.org">OS-independent</a> code. The chapter also encourages using a “frozen” development environment that is updated on a fixed schedule to minimize the impact of frequent updates. This is exactly the opposite of the modern DevOps approach - the issues created by small, frequent updates are smaller and easier to address than the more complex problems created by large upgrades. I <em>always</em> start development by updating packages to the latest production release - while this sometimes introduces issues, they are typically easy to fix, and prioritizing maintenance first improves quality and security.</p>
<p>An alternate approach to using Docker is to leverage <a href="https://github.com/features/actions">GitHub Actions</a>, which provides on-demand virtual machines that can be used to consistently test, build, and deploy code. The Tidyverse community provides a <a href="https://github.com/r-lib/actions">library</a> of GitHub Actions for R, which I’ve customized for <a href="https://jabenninghoff.github.io/rdev/reference/use_rdev_package.html">rdev</a>. In fact, chapter 15 covers use of GitHub Actions using r-lib and presents them as a potential alternative for Docker.</p>
<p>Overall, I do follow the book’s core recommendations for reproducibility:</p>
<ul>
<li>Use version control extensively</li>
<li>Use trunk-based development</li>
<li>Adopt functional programming and <a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a></li>
<li>Use R Markdown which embeds analysis code and code output directly into the written report</li>
<li>Use <a href="https://rstudio.github.io/renv/">renv</a> to manage dependencies</li>
<li>Package all R code and publish using GitHub Pages</li>
<li>Write unit tests using <a href="https://testthat.r-lib.org">testthat</a></li>
<li>Use assertions to validate function arguments and imported data</li>
<li>Check test coverage using <a href="https://covr.r-lib.org"><code>covr</code></a></li>
<li>Use automated builds (but using Quarto instead of targets)</li>
</ul>
<p>I would consider use of targets and Docker for larger, more complex, or long-lived projects, but I found that <code>fusen</code> offered no clear benefits and wouldn’t recommend its use. I think the biggest lesson I took from the book was to follow DRY a bit more strictly than I currently do, and use more functions, tests, and assertions in my analysis code.</p>
<p>The book does reference some interesting reading I’ve added to my list:</p>
<ul>
<li>John M. Chambers. “Object-Oriented Programming, Functional Programming and R.” Statist. Sci. 29 (2) 167 - 180, May 2014. <a href="https://doi.org/10.1214/13-STS452" class="uri">https://doi.org/10.1214/13-STS452</a></li>
<li><a href="https://trunkbaseddevelopment.com/">Trunk-Based Development And Branch By Abstraction</a></li>
</ul>
<p>While reading the book, I discovered some interesting additional resources:</p>
<ul>
<li><a href="https://www.crumplab.com/vertical/">Vertical</a>, a “an R-based structured workflow for creating and sharing research assets in the form of an extended R package”, which I plan to review and compare to <a href="https://jabenninghoff.github.io/rdev/">rdev</a></li>
<li><a href="https://blog.djnavarro.net/posts/2023-08-08_being-assertive/">Four ways to write assertion checks in R</a> - an article on four methods for writing assertions in R:
<ul>
<li>Use <code>stopifnot()</code> from base R</li>
<li>Use the <a href="https://github.com/hadley/assertthat"><code>assertthat</code></a> package (last updated March 2019)</li>
<li>Use the <a href="https://bitbucket.org/richierocks/assertive/src/master/"><code>assertive</code></a> package (last updated July 2020)</li>
<li>Use the <a href="https://docs.ropensci.org/assertr/"><code>assertr</code></a> package for data assertions, which works especially well for assertion checks against data frames used in data analysis</li>
</ul></li>
<li>I also revisited the <a href="https://github.com/data-cleaning/validate"><code>validate</code></a> package, a data validation rules engine, which includes the Data Validation Cookbook (in Future Reading)</li>
</ul>
</section>
</section>
<section id="future-reading" class="level2">
<h2 class="anchored" data-anchor-id="future-reading">Future Reading</h2>
<p>R books on my reading list.</p>
<ul>
<li><a href="https://rstudio.github.io/r-manuals/">The R Manuals</a> - a re-styled version of the original R manuals, published using Quarto (starting with <em>Writing R Extensions</em>)</li>
<li><a href="https://bookdown.org/yihui/rmarkdown/">R Markdown: The Definitive Guide</a> - written by the author of <a href="https://yihui.org/knitr/">knitr</a></li>
<li><a href="https://bookdown.org/yihui/rmarkdown-cookbook/">R Markdown Cookbook</a> - the follow-up to <em>The Definitive Guide</em></li>
<li><a href="https://data-cleaning.github.io/validate/">The Data Validation Cookbook</a> - a book on the R <a href="https://CRAN.R-project.org/package=validate">validate</a> package</li>
<li><a href="https://us.sagepub.com/en-us/nam/discovering-statistics-using-r/book236067">Discovering Statistics Using R</a> - recommended to me as an introduction to statistics using R</li>
</ul>
</section>
<section id="r-dialects" class="level2">
<h2 class="anchored" data-anchor-id="r-dialects">R Dialects</h2>
<p>An explanatory note on the R dialects of base R and tidyverse R.</p>
<p>The <a href="https://en.wikipedia.org/wiki/R_(programming_language)">R programming language</a> is over 30 years old and has a large number of <a href="https://en.wikipedia.org/wiki/R_package">packages</a> (R libraries) that extend R. Unlike <a href="https://en.wikipedia.org/wiki/Python_(programming_language)">python</a> (a general purpose language), R was designed specifically for analysis, visualization, and statistical modeling, which is why I <a href="https://www.information-safety.org/2020/09/11/working-with-r/">chose R</a> for data analysis: it has built-in support for data structures like data frames (implemented in python using <a href="https://en.wikipedia.org/wiki/Pandas_(software)">pandas</a>), vectors, packages for just about any statistical tool you’d need, and of course, <a href="https://en.wikipedia.org/wiki/Ggplot2">ggplot2</a>. In fairness, python is more popular, more robust, and a better tool for some tasks, like data acquisition and machine learning (which were not priorities for my use).</p>
<p>Like many human languages, R has developed two distinct dialects: base R and tidyverse R. Base R consists of the <a href="https://cran.r-project.org/doc/FAQ/R-FAQ.html#Add_002don-packages-in-R">packages</a> included in the R distribution <em>(base, compiler, datasets, graphics, grDevices, grid, methods, parallel, splines, stats, stats4, tcltk, tools, utils)</em>, and the <a href="https://en.wikipedia.org/wiki/Tidyverse">Tidyverse</a> is a collection of packages that implement a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain-specific language</a> for data analysis, originally created by <a href="https://en.wikipedia.org/wiki/Hadley_Wickham">Hadley Wickham</a>.</p>
<p>In my experience, tidyverse R is better for data analysis, where base R is better for writing packages - tidyverse functions are closer to natural language, but have many more dependencies. <a href="https://atrebas.github.io/post/2019-03-03-datatable-dplyr/">Comparing</a> two popular tools for data manipulation, <a href="https://dplyr.tidyverse.org">dplyr</a> (tidyverse R) and <a href="https://rdatatable.gitlab.io/data.table/">data.table</a> (base R) shows these differences.</p>
<p>This code snippet is from a short analysis of survey responses using dplyr:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">survey_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> survey_import <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">across</span>(Q1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>Q7, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(</span>
<span id="cb5-3">    .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strongly disagree"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb5-4">    .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disagree"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-5">    .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neither agree nor disagree"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb5-6">    .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"agree"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb5-7">    .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strongly agree"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb5-8">  ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">Q8 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(Q8 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(end_date)</span></code></pre></div>
<p>The code is reasonably easy to understand, even if you’re not familiar with R.</p>
<p>The same code written in data.table isn’t as clear:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">likert_5 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb6-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strongly disagree"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disagree"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neither agree nor disagree"</span>,</span>
<span id="cb6-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"agree"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"strongly agree"</span></span>
<span id="cb6-4">)</span>
<span id="cb6-5">q_likert <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb6-6">q_yesno <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q8"</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">survey_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">copy</span>(survey_import)</span>
<span id="cb6-9">survey_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> survey_results[</span>
<span id="cb6-10">  , (q_likert) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> likert_5))),</span>
<span id="cb6-11">  .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> q_likert</span>
<span id="cb6-12">][</span>
<span id="cb6-13">  , (q_yesno) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(.SD, \(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yes"</span>)),</span>
<span id="cb6-14">  .SDcols <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> q_yesno</span>
<span id="cb6-15">][</span>
<span id="cb6-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(end_date)</span>
<span id="cb6-17">]</span></code></pre></div>
<p>While it may be harder to read, data.table has some clear advantages: it is quite <a href="https://h2oai.github.io/db-benchmark/">fast</a>, especially with very large datasets, and has no <a href="https://github.com/Rdatatable/data.table/blob/master/DESCRIPTION">dependencies</a> other than base R, where dplyr has many.</p>
<p>These tradeoffs are why I tend to use tidyverse R for analysis and base R for functions (most tidyverse expressions have functional equivalents in base R). Code used in data analysis should be clear and easy to read, which tidyverse R excels at. Packaged functions provide documentation and the source code isn’t typically read, but many dependencies can be problematic; <code>R CMD check</code> will raise a NOTE if there are too many imports.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For a detailed explanation of “tidyverse R”, see R Dialects↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reading</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/r-books.html</guid>
  <pubDate>Fri, 17 Nov 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Advanced R (Metaprogramming)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-4.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Metaprogramming” chapters of <a href="https://adv-r.hadley.nz/index.html">Advanced R</a>, second edition, with comparisons to solutions from <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lobstr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://github.com/hadley/adv-r/blob/master/common.R</span></span>
<span id="cb1-5">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-8">)</span>
<span id="cb1-9"></span>
<span id="cb1-10">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_mar =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options, envir) {</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb1-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-14">    }</span>
<span id="cb1-15">  }</span>
<span id="cb1-16">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://adv-r.hadley.nz/index.html">Advanced R</a> and <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read Advanced R and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
<p><strong>Important:</strong> advice on tidy evaluation has changed since these chapters were written; see the “Programming with dplyr” <a href="https://dplyr.tidyverse.org/articles/programming.html">vignette</a>.</p>
</section>
<section id="big-picture" class="level1">
<h1>17 Big picture</h1>
<p>Metaprogramming is the hardest topic in this book because it brings together many formerly unrelated topics and forces you grapple with issues that you probably haven’t thought about before. You’ll also need to learn a lot of new vocabulary, and at first it will seem like every new term is defined by three other terms that you haven’t heard of. Even if you’re an experienced programmer in another language, your existing skills are unlikely to be much help as few modern popular languages expose the level of metaprogramming that R provides. So don’t be surprised if you’re frustrated or confused at first; this is a natural part of the process that happens to everyone!</p>
<p>But I think it’s easier to learn metaprogramming now than ever before. Over the last few years, the theory and practice have matured substantially, providing a strong foundation paired with tools that allow you to solve common problems. In this chapter, you’ll get the big picture of all the main pieces and how they fit together.</p>
</section>
<section id="expressions" class="level1">
<h1>18 Expressions</h1>
<p>To compute on the language, we first need to understand its structure. That requires some new vocabulary, some new tools, and some new ways of thinking about R code. The first of these is the distinction between an operation and its result. Take the following code, which multiplies a variable <code>x</code> by 10 and saves the result to a new variable called <code>y</code>. It doesn’t work because we haven’t defined a variable called <code>x</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning in rm(x): object 'x' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in eval(expr, envir, enclos) : object 'x' not found</code></pre>
</div>
</div>
<p>It would be nice if we could capture the intent of the code without executing it. In other words, how can we separate our description of the action from the action itself?</p>
<p>One way is to use <code>rlang::expr()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb6-2">z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; y &lt;- x * 10</code></pre>
</div>
</div>
<p><code>expr()</code> returns an expression, an object that captures the structure of the code without evaluating it (i.e.&nbsp;running it). If you have an expression, you can evaluate it with <code>base::eval()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(z)</span>
<span id="cb8-3">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 40</code></pre>
</div>
</div>
<p>The focus of this chapter is the data structures that underlie expressions. Mastering this knowledge will allow you to inspect and modify captured code, and to generate code with code. We’ll come back to <code>expr()</code> in Chapter 19, and to <code>eval()</code> in Chapter 20.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">18.2.4 Exercises</h2>
<ol type="1">
<li>Reconstruct the code represented by the trees below:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─f</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─█─g</span></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─█─h</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─`+`</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; ├─█─`+`</span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; │ ├─1</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; │ └─2</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─3</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─`*`</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; ├─█─`(`</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; │ └─█─`+`</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; │   ├─x</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; │   └─y</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─z</span></span></code></pre></div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>())))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; └─█─g 
#&gt;   └─█─h</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`+` 
#&gt; ├─█─`+` 
#&gt; │ ├─1 
#&gt; │ └─2 
#&gt; └─3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`*` 
#&gt; ├─█─`(` 
#&gt; │ └─█─`+` 
#&gt; │   ├─x 
#&gt; │   └─y 
#&gt; └─z</code></pre>
</div>
</div>
<p>AR Solutions: Let the source (of the code chunks above) be with you and show you how the ASTs (abstract syntax trees) were produced.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>())))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; └─█─g 
#&gt;   └─█─h</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`+` 
#&gt; ├─█─`+` 
#&gt; │ ├─1 
#&gt; │ └─2 
#&gt; └─3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`*` 
#&gt; ├─█─`(` 
#&gt; │ └─█─`+` 
#&gt; │   ├─x 
#&gt; │   └─y 
#&gt; └─z</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Draw the following trees by hand and then check your answers with <code>lobstr::ast()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))))</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>())))</span>
<span id="cb23-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span></code></pre></div>
</div>
<p>Answer: code below, expression 1:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─f</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─█─g</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─█─h</span></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     └─█─i</span></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;       └─1</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;       └─2</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;       └─3</span></span>
<span id="cb24-8">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; └─█─g 
#&gt;   └─█─h 
#&gt;     └─█─i 
#&gt;       ├─1 
#&gt;       ├─2 
#&gt;       └─3</code></pre>
</div>
</div>
<p>Expression 2:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─f</span></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─1</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─█─g</span></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─2</span></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─█─h</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     └─3</span></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     └─█─i</span></span>
<span id="cb26-8">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>()))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; ├─1 
#&gt; └─█─g 
#&gt;   ├─2 
#&gt;   └─█─h 
#&gt;     ├─3 
#&gt;     └─█─i</code></pre>
</div>
</div>
<p>Expression 3:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; █─f</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─█─g</span></span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; | └─1</span></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; | └─2</span></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; └─█─h</span></span>
<span id="cb28-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─3</span></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   └─█─i</span></span>
<span id="cb28-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     └─4</span></span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     └─5</span></span>
<span id="cb28-10">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">i</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; ├─█─g 
#&gt; │ ├─1 
#&gt; │ └─2 
#&gt; └─█─h 
#&gt;   ├─3 
#&gt;   └─█─i 
#&gt;     ├─4 
#&gt;     └─5</code></pre>
</div>
</div>
<p>AR Solutions: Let us delegate the drawing to the <code>lobstr</code> package.</p>
<hr>
<ol start="3" type="1">
<li>What’s happening with the ASTs below? (Hint: carefully read <code>?"^"</code>.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`+` 
#&gt; ├─x 
#&gt; └─y</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`^` 
#&gt; ├─x 
#&gt; └─y</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-&gt;</span> x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`&lt;-` 
#&gt; ├─x 
#&gt; └─1</code></pre>
</div>
</div>
<p>Answer: all expressions are changed to their normal forms. In the first expression, the back ticks denoting symbols are not needed. In the third expression, the assignment operator is changed to the standard form. In the second expression, the operator is changed per this note in the R documentation:</p>
<blockquote class="blockquote">
<p><code>**</code> is translated in the parser to <code>^</code>, but this was undocumented for many years. It appears as an index entry in Becker <em>et al</em> (1988), pointing to the help for <code>Deprecated</code> but is not actually mentioned on that page. Even though it had been deprecated in S for 20 years, it was still accepted in R in 2008.</p>
</blockquote>
<p>AR Solutions: ASTs start function calls with the name of the function. This is why the call in the first expression is translated into its prefix form. In the second case, <code>**</code> is translated by R’s parser into <code>^</code>. In the last AST, the expression is flipped when R parses it.</p>
<hr>
<ol start="4" type="1">
<li>What is special about the AST below? (Hint: re-read Section 6.2.1.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`function` 
#&gt; ├─█─x = 1 
#&gt; │ └─y = 2 
#&gt; ├─█─`{` 
#&gt; └─&lt;inline srcref&gt;</code></pre>
</div>
</div>
<p>Answer: the AST includes two of the three parts of the function, the <code>formals()</code>, <code>x</code> and <code>y</code>, the <code>body()</code>, represented by <code>{</code> and <code>&lt;inline srcref&gt;</code>.</p>
<p>AR Solutions: The last leaf of the AST is not explicitly specified in the expression. Instead, the <code>srcref</code> attribute, which points to the functions source code, is automatically created by base R.</p>
<hr>
<ol start="5" type="1">
<li>What does the call tree of an <code>if</code> statement with multiple <code>else if</code> conditions look like? Why?</li>
</ol>
<p>Answer: the call tree shows nested if statements; this is because if-else is a function with three arguments, the <code>cond</code>, the <code>cons.expr</code> and the <code>alt.expr</code>. The <code>alt.expr</code> for each if-else statement is a new call to if.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(</span>
<span id="cb38-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb38-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>)</span>
<span id="cb38-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) {</span>
<span id="cb38-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>)</span>
<span id="cb38-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb38-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>)</span>
<span id="cb38-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) {</span>
<span id="cb38-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"four"</span>)</span>
<span id="cb38-10">  }</span>
<span id="cb38-11">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`if` 
#&gt; ├─█─`==` 
#&gt; │ ├─v 
#&gt; │ └─1 
#&gt; ├─█─`{` 
#&gt; │ └─█─print 
#&gt; │   └─"one" 
#&gt; └─█─`if` 
#&gt;   ├─█─`==` 
#&gt;   │ ├─v 
#&gt;   │ └─2 
#&gt;   ├─█─`{` 
#&gt;   │ └─█─print 
#&gt;   │   └─"two" 
#&gt;   └─█─`if` 
#&gt;     ├─█─`==` 
#&gt;     │ ├─v 
#&gt;     │ └─3 
#&gt;     ├─█─`{` 
#&gt;     │ └─█─print 
#&gt;     │   └─"three" 
#&gt;     └─█─`if` 
#&gt;       ├─█─`==` 
#&gt;       │ ├─v 
#&gt;       │ └─4 
#&gt;       └─█─`{` 
#&gt;         └─█─print 
#&gt;           └─"four"</code></pre>
</div>
</div>
<p>AR Solutions: The AST of nested <code>else if</code> statements might look a bit confusing because it contains multiple curly braces. However, we can see that in the <code>else</code> part of the AST just another expression is being evaluated, which happens to be an <code>if</code> statement and so forth.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(</span>
<span id="cb40-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb40-3">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb40-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb40-5">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb40-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb40-7">    <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb40-8">  }</span>
<span id="cb40-9">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`if` 
#&gt; ├─FALSE 
#&gt; ├─█─`{` 
#&gt; │ └─1 
#&gt; └─█─`if` 
#&gt;   ├─FALSE 
#&gt;   ├─█─`{` 
#&gt;   │ └─2 
#&gt;   └─█─`if` 
#&gt;     ├─TRUE 
#&gt;     └─█─`{` 
#&gt;       └─3</code></pre>
</div>
</div>
<p>We can see the structure more clearly if we avoid the curly braces:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(</span>
<span id="cb42-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span>
<span id="cb42-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb42-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb42-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb42-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: on</span></span>
<span id="cb42-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`if` 
#&gt; ├─FALSE 
#&gt; ├─1 
#&gt; └─█─`if` 
#&gt;   ├─FALSE 
#&gt;   ├─2 
#&gt;   └─█─`if` 
#&gt;     ├─TRUE 
#&gt;     └─3</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">18.3.5 Exercises</h2>
<ol start="2" type="1">
<li>Which two of the six types of atomic vector can’t appear in an expression? Why? Similarly, why can’t you create an expression that contains an atomic vector of length greater than one?</li>
</ol>
<p>Answer: <code>raw</code> and some <code>complex</code> numbers can’t appear in an expression, since constructing both requires a function call (<code>raw()</code> and <code>+</code> respectively). Similarly, creating atomic vectors longer than one requires <code>c()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>i, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">raw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>i))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; f(TRUE, 1L, 1, "x", 0+1i, raw(1L), 1 + (0+1i))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; c(1, 2)</code></pre>
</div>
</div>
<p>AR Solutions: There is no way to create raws and complex atomics without using a function call (this is only possible for imaginary scalars like <code>i</code>, <code>5i</code> etc.). But expressions that include a function are <em>calls</em>. Therefore, both of these vector types cannot appear in an expression.</p>
<p>Similarly, it is not possible to create an expression that evaluates to an atomic of length greater than one without using a function (e.g.&nbsp;<code>c()</code>).</p>
<p>Let’s make this observation concrete via an example:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Atomic</span></span>
<span id="cb48-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_atomic</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not an atomic (although it would evaluate to an atomic)</span></span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_atomic</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What happens when you subset a call object to remove the first element? e.g.&nbsp;<code>expr(read.csv("foo.csv", header = TRUE))[-1]</code>. Why?</li>
</ol>
<p>Answer: as the result demonstrates, this removes the function call which makes the first argument the new function call in the expression, since the AST structure (call object) is preserved, and the first element of the call object is the function position.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read.csv</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo.csv"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; "foo.csv"(header = TRUE)</code></pre>
</div>
</div>
<p>AR Solutions: When the first element of a call object is removed, the second element moves to the first position, which is the function to call. Therefore, we get <code>"foo.csv"(header = TRUE)</code>.</p>
<hr>
<ol start="3" type="1">
<li>Describe the differences between the following call objects.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb56-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(median, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb56-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(median), x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb56-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(median, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb56-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(median), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>Answer: the objects differ in their use of <code>expr()</code>. When using bare <code>median</code> and <code>x</code>, the object uses the evaluated function and value of <code>x</code> where using <code>expr()</code> prevents evaluation.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1">median</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, na.rm = FALSE, ...) 
#&gt; UseMethod("median")
#&gt; &lt;bytecode: 0x105c7c008&gt;
#&gt; &lt;environment: namespace:stats&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(median)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; median</code></pre>
</div>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; x</code></pre>
</div>
</div>
<p>AR Solutions: The call objects differ in their first two elements, which are in some cases evaluated before the call is constructed. In the first one, both <code>median()</code> and <code>x</code> are evaluated and inlined into the call. Therefore, we can see in the constructed call that median is a generic and the <code>x</code> argument is 1:10.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(median, x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (function (x, na.rm = FALSE, ...) 
#&gt; UseMethod("median"))(1:10, na.rm = TRUE)</code></pre>
</div>
</div>
<p>In the following calls we remain with differing combinations. Once, only <code>x</code> and once only <code>median()</code> gets evaluated.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(median), x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; median(1:10, na.rm = TRUE)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(median, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (function (x, na.rm = FALSE, ...) 
#&gt; UseMethod("median"))(x, na.rm = TRUE)</code></pre>
</div>
</div>
<p>In the final call neither <code>x</code> nor <code>median()</code> is evaluated.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(median), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; median(x, na.rm = TRUE)</code></pre>
</div>
</div>
<p>Note that all these calls will generate the same result when evaluated. The key difference is when the values bound to the <code>x</code> and <code>median</code> symbols are found.</p>
<hr>
<ol start="4" type="1">
<li><code>rlang::call_standardise()</code> doesn’t work so well for the following calls. Why? What makes <code>mean()</code> special?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call_standardise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning: `call_standardise()` is deprecated as of rlang 0.4.11
#&gt; This warning is displayed once every 8 hours.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(x = 1:10, na.rm = TRUE)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb76-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call_standardise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> T, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(x = 1:10, n = T)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb78-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call_standardise</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, , <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(x = 1:10, , TRUE)</code></pre>
</div>
</div>
<p>Answer: as noted in the book, “If the function uses <code>...</code> it’s not possible to standardise all arguments.” <code>mean()</code> has a single argument, <code>x</code>, and uses <code>...</code> for the remaining arguments, although the default S3 method is <code>mean(x, trim = 0, na.rm = FALSE, ...)</code>.</p>
<p>AR Solutions: The reason for this unexpected behaviour is that <code>mean()</code> uses the <code>...</code> argument and therefore cannot standardise the regarding arguments. Since <code>mean()</code> uses S3 dispatch (i.e.&nbsp;<code>UseMethod()</code>) and the underlying <code>mean.default()</code> method specifies some more arguments, <code>call_standardise()</code> can do much better with a specific S3 method.</p>
<hr>
<ol start="5" type="1">
<li>Why does this code not make sense?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb80-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb80-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span></code></pre></div>
</div>
<p>Answer: as the code below demonstrates, the only symbol (name) in the expression is <code>x</code>. Assigning a name to both components changes <code>x</code> to <code>y</code> but doesn’t change the function call <code>foo</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">ex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb81-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ex)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] ""  "x"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(ex) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>)</span>
<span id="cb83-2">ex</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(y = 1)</code></pre>
</div>
</div>
<p>AR Solutions: As stated in <em>Advanced R</em></p>
<blockquote class="blockquote">
<p>The first element of a call is always the function that gets called.</p>
</blockquote>
<p>Let’s see what happens when we run the code</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb85-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(x = 1)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb87-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(1)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb89-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(x = 1)</code></pre>
</div>
</div>
<p>So, giving the first element a name just adds metadata that R ignores.</p>
<hr>
<ol start="6" type="1">
<li>Construct the expression <code>if(x &gt; 1) "a" else "b"</code> using multiple calls to <code>call2()</code>. How does the code structure reflect the structure of the AST?</li>
</ol>
<p>Answer: code below. The <code>call2()</code> structure mirrors the AST of the if expression.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"if"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; if (x &gt; 1) "a" else "b"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`if` 
#&gt; ├─█─`&gt;` 
#&gt; │ ├─x 
#&gt; │ └─1 
#&gt; ├─"a" 
#&gt; └─"b"</code></pre>
</div>
</div>
<p>AR Solutions: Similar to the prefix version we get</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"if"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">call2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; if (x &gt; 1) "a" else "b"</code></pre>
</div>
</div>
<p>When we read the AST from left to right, we get the same structure: Function to evaluate, expression, which is another function and is evaluated first, and two constants which will be evaluated next.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">if</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`if` 
#&gt; ├─█─`&gt;` 
#&gt; │ ├─x 
#&gt; │ └─1 
#&gt; ├─"a" 
#&gt; └─"b"</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">18.4.4 Exercises</h2>
<ol type="1">
<li>R uses parentheses in two slightly different ways as illustrated by these two calls:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb99-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Compare and contrast the two uses by referencing the AST.</p>
<p>Answer: R uses parentheses both as a function <em>and</em> as part of a function call. In the first call, the outer parentheses are for <code>f</code> and the inner represent <code>(</code> with a single parameter. In the second call, equivalent to <code>(1 + 1)</code>, the parentheses are for the <code>(</code> function call.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; └─█─`(` 
#&gt;   └─1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`(` 
#&gt; └─█─`+` 
#&gt;   ├─1 
#&gt;   └─1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`(` 
#&gt; └─█─`+` 
#&gt;   ├─1 
#&gt;   └─1</code></pre>
</div>
</div>
<p>AR Solutions: The trick with these examples lies in the fact that <code>(</code> can be a part of R’s general prefix function syntax but can also represent a call to the <code>(</code> function.</p>
<p>So, in the AST of the first example, we will not see the outer <code>(</code> since it is prefix function syntax and belongs to <code>f()</code>. In contrast, the inner <code>(</code> is a function (represented as a symbol in the AST):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─f 
#&gt; └─█─`(` 
#&gt;   └─1</code></pre>
</div>
</div>
<p>In the second example, we can see that the outer <code>(</code> is a function and the inner <code>(</code> belongs to its syntax:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`(` 
#&gt; └─█─`+` 
#&gt;   ├─1 
#&gt;   └─1</code></pre>
</div>
</div>
<p>For the sake of clarity, let’s also create a third example, where none of the <code>(</code> is part of another function’s syntax:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`(` 
#&gt; └─█─`(` 
#&gt;   └─█─`+` 
#&gt;     ├─1 
#&gt;     └─1</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li><code>=</code> can also be used in two ways. Construct a simple example that shows both uses.</li>
</ol>
<p>Answer: <code>=</code> can be used for assignment and also for function parameters.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(val, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`=` 
#&gt; ├─val 
#&gt; └─█─sum 
#&gt;   ├─10 
#&gt;   └─na.rm = TRUE</code></pre>
</div>
</div>
<p>AR Solutions: <code>=</code> is used both for assignment, and for naming arguments in function calls:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span></code></pre></div>
</div>
<p>So, when we play with <code>ast()</code>, we can directly see that the following is not possible:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb115-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in ast(b = c(c = 1)) : unused argument (b = c(c = 1))</code></pre>
</div>
</div>
<p>We get an error because <code>b =</code> makes R looking for an argument called <code>b</code>. Since <code>x</code> is the only argument of <code>ast()</code>, we get an error.</p>
<p>The easiest way around this problem is to wrap this line in <code>{}</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb117-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>({b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)})  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`{` 
#&gt; └─█─`=` 
#&gt;   ├─b 
#&gt;   └─█─c 
#&gt;     └─c = 1</code></pre>
</div>
</div>
<p>When we ignore the braces and compare the trees, we can see that the first <code>=</code> is used for assignment and the second <code>=</code> is part of the syntax of function calls.</p>
<hr>
<ol start="3" type="1">
<li>Does <code>-2^2</code> yield 4 or -4? Why?</li>
</ol>
<p>Answer: the result is -4, because <code>^</code> has higher precedence than <code>-</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb119-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb121-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`-` 
#&gt; └─█─`^` 
#&gt;   ├─2 
#&gt;   └─2</code></pre>
</div>
</div>
<p>AR Solutions: It yields <code>-4</code>, because <code>^</code> has a higher operator precedence than <code>-</code>, which we can verify by looking at the AST (or looking it up under <code>?"Syntax"</code>):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb123-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb125-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`-` 
#&gt; └─█─`^` 
#&gt;   ├─2 
#&gt;   └─2</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>What does <code>!1 + !1</code> return? Why?</li>
</ol>
<p>Answer: <code>FALSE</code>. As the AST demonstrates, the <code>!</code> operator takes precedence.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb127-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb129-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`!` 
#&gt; └─█─`+` 
#&gt;   ├─1 
#&gt;   └─█─`!` 
#&gt;     └─1</code></pre>
</div>
</div>
<p>The result can be demonstrated by evaluating the AST in steps:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb131-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FALSE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb133-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb135-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FALSE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>AR Solutions: The answer is a little surprising:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb137-1"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>To answer the “why?”, we take a look at the AST:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb139-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`!` 
#&gt; └─█─`+` 
#&gt;   ├─1 
#&gt;   └─█─`!` 
#&gt;     └─1</code></pre>
</div>
</div>
<p>The right <code>!1</code> is evaluated first. It evaluates to <code>FALSE</code>, because R coerces every non 0 numeric to <code>TRUE</code>, when a logical operator is applied. The negation of <code>TRUE</code> then equals <code>FALSE</code>.</p>
<p>Next <code>1 + FALSE</code> is evaluated to <code>1</code>, since <code>FALSE</code> is coerced to <code>0</code>.</p>
<p>Finally <code>!1</code> is evaluated to <code>FALSE</code>.</p>
<p>Note that if <code>!</code> had a higher precedence, the intermediate result would be <code>FALSE + FALSE</code>, which would evaluate to <code>0</code>.</p>
<hr>
<ol start="5" type="1">
<li>Why does <code>x1 &lt;- x2 &lt;- x3 &lt;- 0</code> work? Describe the two reasons.</li>
</ol>
<p>Answer: assignment is right-associative: <code>x1 &lt;- (x2 &lt;- 0)</code> and <code>x1 &lt;- x2 &lt;- 0</code> are equivalent, and the rightmost assignment operator is evaluated first.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb141-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`&lt;-` 
#&gt; ├─x1 
#&gt; └─█─`&lt;-` 
#&gt;   ├─x2 
#&gt;   └─█─`&lt;-` 
#&gt;     ├─x3 
#&gt;     └─0</code></pre>
</div>
</div>
<p>AR Solutions: One reason is that <code>&lt;-</code> is right-associative, i.e.&nbsp;evaluation takes place from right to left:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb143-1">x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (x3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</div>
<p>The other reason is that <code>&lt;-</code> invisibly returns the value on the right-hand side.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1">(x3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0</code></pre>
</div>
</div>
<p>Note: I forgot that <code>&lt;-</code> returns the value invisibly.</p>
<hr>
<ol start="6" type="1">
<li>Compare the ASTs of <code>x + y %+% z</code> and <code>x ^ y %+% z</code>. What have you learned about the precedence of custom infix functions?</li>
</ol>
<p>Answer: custom infix functions have higher precedence than <code>+</code> and lower precedence than <code>^</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+%</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`+` 
#&gt; ├─x 
#&gt; └─█─`%+%` 
#&gt;   ├─y 
#&gt;   └─z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+%</span> z) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`%+%` 
#&gt; ├─█─`^` 
#&gt; │ ├─x 
#&gt; │ └─y 
#&gt; └─z</code></pre>
</div>
</div>
<p>AR Solutions: Let’s take a look at the syntax trees:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb150-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+%</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`+` 
#&gt; ├─x 
#&gt; └─█─`%+%` 
#&gt;   ├─y 
#&gt;   └─z</code></pre>
</div>
</div>
<p>Here <code>y %+% z</code> will be calculated first and the result will be added to <code>x</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb152-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%+%</span> z) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`%+%` 
#&gt; ├─█─`^` 
#&gt; │ ├─x 
#&gt; │ └─y 
#&gt; └─z</code></pre>
</div>
</div>
<p>Here <code>x ^ y</code> will be calculated first, and the result will be used as first argument to <code>%+%()</code>. We can conclude that custom infix functions have precedence between addition and exponentiation. The exact precedence of infix functions can be looked up under <code>?"Syntax"</code> where we see that it lies directly behind the sequence operator (<code>:</code>) and in front of the multiplication and division operators (<code>*</code> and <code>/</code>).</p>
<hr>
<ol start="7" type="1">
<li>What happens if you call <code>parse_expr()</code> with a string that generates multiple expressions? e.g.&nbsp;<code>parse_expr("x + 1; y + 1")</code></li>
</ol>
<p>Answer: <code>parse_expr()</code> throws an error. Use <code>parse_exprs()</code> with strings containing multiple expressions.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x + 1; y + 1"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse_expr("x + 1; y + 1") : 
#&gt;   `x` must contain exactly 1 expression, not 2.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_exprs</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x + 1; y + 1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; x + 1
#&gt; 
#&gt; [[2]]
#&gt; y + 1</code></pre>
</div>
</div>
<p>AR Solutions: In this case <code>parse_expr()</code> notices that more than one expression would have to be generated and throws an error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x + 1; y + 1"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse_expr("x + 1; y + 1") : 
#&gt;   `x` must contain exactly 1 expression, not 2.</code></pre>
</div>
</div>
<hr>
<ol start="8" type="1">
<li>What happens if you attempt to parse an invalid expression? e.g.&nbsp;<code>"a +"</code> or <code>"f())"</code>.</li>
</ol>
<p>Answer: <code>parse_expr()</code> throws an error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb160-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a +"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = x, keep.source = FALSE) : 
#&gt;   &lt;text&gt;:2:0: unexpected end of input
#&gt; 1: a +
#&gt;    ^</code></pre>
</div>
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f())"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = x, keep.source = FALSE) : 
#&gt;   &lt;text&gt;:1:4: unexpected ')'
#&gt; 1: f())
#&gt;        ^</code></pre>
</div>
</div>
<p>AR Solutions: Invalid expressions will lead to an error in the underlying <code>parse()</code> function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb164-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a +"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = x, keep.source = FALSE) : 
#&gt;   &lt;text&gt;:2:0: unexpected end of input
#&gt; 1: a +
#&gt;    ^</code></pre>
</div>
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb166-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_expr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f())"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = x, keep.source = FALSE) : 
#&gt;   &lt;text&gt;:1:4: unexpected ')'
#&gt; 1: f())
#&gt;        ^</code></pre>
</div>
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb168-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a +"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = "a +") : &lt;text&gt;:2:0: unexpected end of input
#&gt; 1: a +
#&gt;    ^</code></pre>
</div>
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb170-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f())"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in parse(text = "f())") : &lt;text&gt;:1:4: unexpected ')'
#&gt; 1: f())
#&gt;        ^</code></pre>
</div>
</div>
<hr>
<ol start="9" type="1">
<li><code>deparse()</code> produces vectors when the input is long. For example, the following call produces a vector of length two:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb172-1">expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb172-2">  m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> o <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z))</span>
<span id="cb172-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(expr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "g(a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + "
#&gt; [2] "    p + q + r + s + t + u + v + w + x + y + z)"</code></pre>
</div>
</div>
<p>What does <code>expr_text()</code> do instead?</p>
<p>Answer: <code>expr_text()</code> adds a newline (<code>\n</code>) instead.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb174-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(expr)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "g(a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + \n    p + q + r + s + t + u + v + w + x + y + z)"</code></pre>
</div>
</div>
<p>AR Solutions: <code>expr_text()</code> will paste the results from <code>deparse(expr)</code> together and use a linebreak (<code>\n</code>) as separator.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb176" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb176-1">expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> e <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> f <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> h <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> j <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> l <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb176-2">  n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> o <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> q <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> s <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> t <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> u <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z))</span>
<span id="cb176-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(expr)</span>
<span id="cb176-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "g(a + b + c + d + e + f + g + h + i + j + k + l + m + n + "</span></span>
<span id="cb176-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [2] "o + p + q + r + s + t + u + v + w + x + y + z)"</span></span>
<span id="cb176-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(expr)</span>
<span id="cb176-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "g(a + b + c + d + e + f + g + h + i + j + k + l + m + n</span></span>
<span id="cb176-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; + \n    o + p + q + r + s + t + u + v + w + x + y + z)"</span></span></code></pre></div>
</div>
<hr>
<ol start="10" type="1">
<li><code>pairwise.t.test()</code> assumes that <code>deparse()</code> always returns a length one character vector. Can you construct an input that violates this expectation? What happens?</li>
</ol>
<p>Answer: an especially long input for <code>x</code> or <code>g</code> would create a character vector of length two or more. However, starting in R 4.0.0, <code>pairwise.t.test()</code> uses <code>deparse1()</code> which guarantees a string (character of length one), so it is no longer possible to break <code>pairwise.t.test()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb177-1">pairwise.t.test</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, g, p.adjust.method = p.adjust.methods, pool.sd = !paired, 
#&gt;     paired = FALSE, alternative = c("two.sided", "less", "greater"), 
#&gt;     ...) 
#&gt; {
#&gt;     if (paired &amp;&amp; pool.sd) 
#&gt;         stop("pooling of SD is incompatible with paired tests")
#&gt;     DNAME &lt;- paste(deparse1(substitute(x)), "and", deparse1(substitute(g)))
#&gt;     g &lt;- factor(g)
#&gt;     p.adjust.method &lt;- match.arg(p.adjust.method)
#&gt;     alternative &lt;- match.arg(alternative)
#&gt;     if (pool.sd) {
#&gt;         METHOD &lt;- "t tests with pooled SD"
#&gt;         xbar &lt;- tapply(x, g, mean, na.rm = TRUE)
#&gt;         s &lt;- tapply(x, g, sd, na.rm = TRUE)
#&gt;         n &lt;- tapply(!is.na(x), g, sum)
#&gt;         degf &lt;- n - 1
#&gt;         total.degf &lt;- sum(degf)
#&gt;         pooled.sd &lt;- sqrt(sum(s^2 * degf)/total.degf)
#&gt;         compare.levels &lt;- function(i, j) {
#&gt;             dif &lt;- xbar[i] - xbar[j]
#&gt;             se.dif &lt;- pooled.sd * sqrt(1/n[i] + 1/n[j])
#&gt;             t.val &lt;- dif/se.dif
#&gt;             if (alternative == "two.sided") 
#&gt;                 2 * pt(-abs(t.val), total.degf)
#&gt;             else pt(t.val, total.degf, lower.tail = (alternative == 
#&gt;                 "less"))
#&gt;         }
#&gt;     }
#&gt;     else {
#&gt;         METHOD &lt;- if (paired) 
#&gt;             "paired t tests"
#&gt;         else "t tests with non-pooled SD"
#&gt;         compare.levels &lt;- function(i, j) {
#&gt;             xi &lt;- x[as.integer(g) == i]
#&gt;             xj &lt;- x[as.integer(g) == j]
#&gt;             t.test(xi, xj, paired = paired, alternative = alternative, 
#&gt;                 ...)$p.value
#&gt;         }
#&gt;     }
#&gt;     PVAL &lt;- pairwise.table(compare.levels, levels(g), p.adjust.method)
#&gt;     ans &lt;- list(method = METHOD, data.name = DNAME, p.value = PVAL, 
#&gt;         p.adjust.method = p.adjust.method)
#&gt;     class(ans) &lt;- "pairwise.htest"
#&gt;     ans
#&gt; }
#&gt; &lt;bytecode: 0x105d29340&gt;
#&gt; &lt;environment: namespace:stats&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb179-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, "
#&gt; [2] "18)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb181-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pairwise.t.test</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt;  Pairwise comparisons using t tests with pooled SD 
#&gt; 
#&gt; data:  1:18 and c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) 
#&gt; 
#&gt;    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
#&gt; 2  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 3  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 4  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 5  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 6  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 7  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 8  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 9  - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 10 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 11 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 12 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 13 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 14 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 15 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 16 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 17 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 18 - - - - - - - - - -  -  -  -  -  -  -  - 
#&gt; 
#&gt; P value adjustment method: holm</code></pre>
</div>
</div>
<p>AR Solutions: The function <code>pairwise.t.test()</code> captures its data arguments (<code>x</code> and <code>g</code>) so it can print the input expressions along the computed p-values. Prior to R 4.0.0 this used to be implemented via <code>deparse(substitute(x))</code> in combination with <code>paste()</code>. This could lead to unexpected output, if one of the inputs exceeded the default <code>width.cutoff</code> value of 60 characters within <code>deparse()</code>. In this case, the expression would be split into a character vector of length greater 1.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb183-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output in R version 3.6.2</span></span>
<span id="cb183-2">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb183-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pairwise.t.test</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb183-4">  d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span>
<span id="cb183-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;  Pairwise comparisons using t tests with pooled SD</span></span>
<span id="cb183-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb183-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; data:  2 and d + d + d + d + d + d + d + d + d + d + d + d + d + d</span></span>
<span id="cb183-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; + d + d +  2 and     d</span></span>
<span id="cb183-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb183-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;0 x 0 matrix&gt;</span></span>
<span id="cb183-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb183-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; P value adjustment method: holm</span></span></code></pre></div>
</div>
<p>In <a href="https://cran.r-project.org/doc/manuals/r-release/NEWS.html">R 4.0.0</a> <code>pairwise.t.test()</code> was updated to use the newly introduced <code>deparse1()</code>, which serves as a wrapper around <code>deparse()</code>.</p>
<blockquote class="blockquote">
<p>deparse1() is a simple utility added in R 4.0.0 to ensure a string result (character vector of length one), typically used in name construction, as deparse1(substitute(.)).</p>
</blockquote>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb184-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output since R 4.0.0</span></span>
<span id="cb184-2">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb184-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pairwise.t.test</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb184-4">  d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span>
<span id="cb184-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;  Pairwise comparisons using t tests with pooled SD</span></span>
<span id="cb184-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb184-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; data:  2 and d + d + d + d + d + d + d + d + d + d + d + d + d + d</span></span>
<span id="cb184-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; + d + d + d</span></span>
<span id="cb184-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb184-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;0 x 0 matrix&gt;</span></span>
<span id="cb184-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb184-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; P value adjustment method: holm</span></span></code></pre></div>
</div>
<hr>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb185-1">expr_type <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb185-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_syntactic_literal</span>(x)) {</span>
<span id="cb185-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"constant"</span></span>
<span id="cb185-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.symbol</span>(x)) {</span>
<span id="cb185-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"symbol"</span></span>
<span id="cb185-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.call</span>(x)) {</span>
<span id="cb185-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"call"</span></span>
<span id="cb185-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.pairlist</span>(x)) {</span>
<span id="cb185-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pairlist"</span></span>
<span id="cb185-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb185-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x)</span>
<span id="cb185-12">  }</span>
<span id="cb185-13">}</span>
<span id="cb185-14"></span>
<span id="cb185-15">switch_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb185-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_type</span>(x),</span>
<span id="cb185-17">    ...,</span>
<span id="cb185-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't know how to handle type "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb185-19">  )</span>
<span id="cb185-20">}</span></code></pre></div>
</div>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">18.5.3 Exercises</h2>
<ol type="1">
<li><code>logical_abbr()</code> returns <code>TRUE</code> for <code>T(1, 2, 3)</code>. How could you modify <code>logical_abbr_rec()</code> so that it ignores function calls that use <code>T</code> or <code>F</code>?</li>
</ol>
<p>AR Solutions: We can apply a similar logic as in the <a href="https://adv-r.hadley.nz/expressions.html#finding-all-variables-created-by-assignment">assignment example</a> from <em>Advanced R</em>. We just treat it as a special case handled within a sub function called <code>find_T_call()</code>, which finds <code>T()</code> calls and “bounces them out”. Therefore, we also repeat the <code>expr_type()</code> helper which tells us if we are in the base or in the recursive case.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb186-1">expr_type <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb186-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_syntactic_literal</span>(x)) {</span>
<span id="cb186-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"constant"</span></span>
<span id="cb186-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.symbol</span>(x)) {</span>
<span id="cb186-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"symbol"</span></span>
<span id="cb186-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.call</span>(x)) {</span>
<span id="cb186-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"call"</span></span>
<span id="cb186-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.pairlist</span>(x)) {</span>
<span id="cb186-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pairlist"</span></span>
<span id="cb186-10">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb186-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x)</span>
<span id="cb186-12">  }</span>
<span id="cb186-13">}</span>
<span id="cb186-14">switch_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb186-15">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">switch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_type</span>(x),</span>
<span id="cb186-16">    ...,</span>
<span id="cb186-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Don't know how to handle type "</span>,</span>
<span id="cb186-18">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x),</span>
<span id="cb186-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb186-20">    )</span>
<span id="cb186-21">  )</span>
<span id="cb186-22">}</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb187-1">find_T_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb187-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>)) {</span>
<span id="cb187-3">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb187-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec)</span>
<span id="cb187-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb187-6">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec)</span>
<span id="cb187-7">  }</span>
<span id="cb187-8">}</span>
<span id="cb187-9">logical_abbr_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb187-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(</span>
<span id="cb187-11">    x,</span>
<span id="cb187-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb187-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb187-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>),</span>
<span id="cb187-15"></span>
<span id="cb187-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb187-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec),</span>
<span id="cb187-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_T_call</span>(x)</span>
<span id="cb187-19">  )</span>
<span id="cb187-20">}</span>
<span id="cb187-21">logical_abbr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb187-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr_rec</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x))</span>
<span id="cb187-23">}</span></code></pre></div>
</div>
<p>Now let’s test our new <code>logical_abbr()</code> function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb188-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb190-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(T, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb192-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(T))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb194-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb196" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb196-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb198-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(T, T, T))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<p>Answer: taken from Advanced R solutions, we need to find function calls within the recursive call. The trick is to find and remove the <code>T</code> or <code>F</code> from the list:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb200-1">find_tf_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb200-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>)) {</span>
<span id="cb200-3">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb200-4">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec)</span>
<span id="cb200-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb200-6">    purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec)</span>
<span id="cb200-7">  }</span>
<span id="cb200-8">}</span>
<span id="cb200-9"></span>
<span id="cb200-10">logical_abbr_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb200-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(</span>
<span id="cb200-12">    x,</span>
<span id="cb200-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb200-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb200-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"T"</span>),</span>
<span id="cb200-16"></span>
<span id="cb200-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb200-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">some</span>(x, logical_abbr_rec),</span>
<span id="cb200-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_tf_call</span>(x)</span>
<span id="cb200-20">  )</span>
<span id="cb200-21">}</span>
<span id="cb200-22"></span>
<span id="cb200-23">logical_abbr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb200-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr_rec</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x))</span>
<span id="cb200-25">}</span>
<span id="cb200-26"></span>
<span id="cb200-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(T) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb202-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FALSE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb204" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb204-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FALSE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb206" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb206-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">F</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FALSE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>Note: I was unable to solve this exercise on my own, and needed to consult AR Solutions. The AR Solutions version only implements <code>T</code>, adding <code>F</code> is trivial.</p>
<hr>
<ol start="2" type="1">
<li><code>logical_abbr()</code> works with expressions. It currently fails when you give it a function. Why? How could you modify <code>logical_abbr()</code> to make it work? What components of a function will you need to recurse over?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb208" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb208-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb208-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T)</span>
<span id="cb208-3">})</span></code></pre></div>
</div>
<p>AR Solutions: The function currently fails, because <code>"closure"</code> is not handled in <code>switch_expr()</code> within <code>logical_abbr_rec()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb209-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb209-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> T)</span>
<span id="cb209-3">}</span>
<span id="cb209-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>f))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Don't know how to handle type closure</code></pre>
</div>
</div>
<p>If we want to make it work, we have to write a function to also iterate over the formals and the body of the input function.</p>
<p>Answer: the above example evaluates successfully as <code>TRUE</code>, however, the following fails, presumably because <code>expr_type</code> doesn’t handle <code>closure</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb211-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical_abbr</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb211-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x)</span>
<span id="cb211-3">}))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Don't know how to handle type integer</code></pre>
</div>
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb213-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_closure</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb213-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x)</span>
<span id="cb213-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb215-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb215-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x)</span>
<span id="cb215-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "closure"</code></pre>
</div>
</div>
<p>Note: I’m not sure why the error says <code>integer</code> instead of <code>closure</code>.</p>
<hr>
<ol start="3" type="1">
<li>Modify <code>find_assign</code> to also detect assignment using replacement functions, i.e.&nbsp;<code>names(x) &lt;- y</code>.</li>
</ol>
<p>Answer: first compare the AST to normal assignment:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb217" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb217-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`&lt;-` 
#&gt; ├─x 
#&gt; └─y</code></pre>
</div>
<div class="sourceCode cell-code" id="cb219" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb219-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`&lt;-` 
#&gt; ├─█─names 
#&gt; │ └─x 
#&gt; └─y</code></pre>
</div>
</div>
<p>Assignment is a call object where the first element is the symbol <code>&lt;-</code>, the second is a call object with the function and the name of the variable, and the third is the value to be assigned. The original code doesn’t detect <code>name(x) &lt;- y</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb221" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb221-1">flat_map_chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.x, .f, ...) {</span>
<span id="cb221-2">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten_chr</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(.x, .f, ...))</span>
<span id="cb221-3">}</span>
<span id="cb221-4"></span>
<span id="cb221-5">find_assign_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb221-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_symbol</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb221-7">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb221-8">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb221-9">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb221-10">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb221-11">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb221-12">  }</span>
<span id="cb221-13"></span>
<span id="cb221-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lhs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(children, find_assign_rec))</span>
<span id="cb221-15">}</span>
<span id="cb221-16"></span>
<span id="cb221-17">find_assign_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb221-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(x,</span>
<span id="cb221-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb221-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> ,</span>
<span id="cb221-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb221-22"></span>
<span id="cb221-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb221-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(x, find_assign_rec),</span>
<span id="cb221-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign_call</span>(x)</span>
<span id="cb221-26">  )</span>
<span id="cb221-27">}</span>
<span id="cb221-28"></span>
<span id="cb221-29">find_assign <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign_rec</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x)))</span>
<span id="cb221-30"></span>
<span id="cb221-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b" "c"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb223" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb223-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
</div>
<p>To detect the new pattern, modify <code>find_assign_call</code> to detect when the second element is a call, and return the third:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb225" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb225-1">find_assign_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb225-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_symbol</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb225-3">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb225-4">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb225-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb225-6">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb225-7">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb225-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb225-9">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb225-10">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb225-11">  }</span>
<span id="cb225-12"></span>
<span id="cb225-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lhs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(children, find_assign_rec))</span>
<span id="cb225-14">}</span>
<span id="cb225-15"></span>
<span id="cb225-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b" "c"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb227-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "y"</code></pre>
</div>
</div>
<p>AR Solutions: Let’s see what the AST of such an assignment looks like:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb229" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb229-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`&lt;-` 
#&gt; ├─█─names 
#&gt; │ └─x 
#&gt; └─x</code></pre>
</div>
</div>
<p>So, we need to catch the case where the first two elements are both calls. Further the first call is identical to <code>&lt;-</code> and we must return only the second call to see which objects got new values assigned.</p>
<p>This is why we add the following block within another <code>else</code> statement in <code>find_assign_call()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb231" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb231-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb231-2">  lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb231-3">  children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb231-4">}</span></code></pre></div>
</div>
<p>Let us finish with the whole code, followed by some tests for our new function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb232" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb232-1">flat_map_chr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.x, .f, ...) {</span>
<span id="cb232-2">  purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten_chr</span>(purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(.x, .f, ...))</span>
<span id="cb232-3">}</span>
<span id="cb232-4"></span>
<span id="cb232-5">find_assign <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign_rec</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x)))</span>
<span id="cb232-6"></span>
<span id="cb232-7">find_assign_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb232-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_symbol</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb232-9">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_string</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb232-10">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb232-11">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb232-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])) {</span>
<span id="cb232-13">      lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb232-14">      children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb232-15">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb232-16">      lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb232-17">      children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb232-18">    }</span>
<span id="cb232-19">  }</span>
<span id="cb232-20"></span>
<span id="cb232-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lhs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(children, find_assign_rec))</span>
<span id="cb232-22">}</span>
<span id="cb232-23"></span>
<span id="cb232-24">find_assign_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb232-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(</span>
<span id="cb232-26">    x,</span>
<span id="cb232-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb232-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> , <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb232-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb232-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(x, find_assign_rec),</span>
<span id="cb232-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign_call</span>(x)</span>
<span id="cb232-32">  )</span>
<span id="cb232-33">}</span>
<span id="cb232-34"></span>
<span id="cb232-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tests functionality</span></span>
<span id="cb232-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb234" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb234-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb236" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb236-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "names(x)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb238" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb238-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(y)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "names(x(y))"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb240-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(y)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "names(x(y))" "y"</code></pre>
</div>
</div>
<p>Note: using <code>expr_text()</code> instead of <code>as_string()</code> is preferable.</p>
<hr>
<ol start="4" type="1">
<li>Write a function that extracts all calls to a specified function.</li>
</ol>
<p>Answer: this is similar to the previous exercise. Here is a simple version that doesn’t properly walk the tree:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb242" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb242-1">find_fun_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, fun) {</span>
<span id="cb242-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, fun)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb242-3">}</span>
<span id="cb242-4"></span>
<span id="cb242-5">find_call_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, fun) {</span>
<span id="cb242-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(</span>
<span id="cb242-7">    x,</span>
<span id="cb242-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb242-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> ,</span>
<span id="cb242-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb242-11"></span>
<span id="cb242-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb242-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(x, find_call_rec),</span>
<span id="cb242-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_fun_call</span>(x, fun)</span>
<span id="cb242-15">  )</span>
<span id="cb242-16">}</span>
<span id="cb242-17"></span>
<span id="cb242-18">find_call_fun <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, fun) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_rec</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x), fun)</span>
<span id="cb242-19"></span>
<span id="cb242-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb244" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb244-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb246" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb246-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "sum(1:10)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb248" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb248-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb250" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb250-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
</div>
<p>Updated version:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb252" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb252-1">find_fun_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, fun) {</span>
<span id="cb252-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x, fun)) {</span>
<span id="cb252-3">    parents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(x)</span>
<span id="cb252-4">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb252-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb252-6">    parents <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb252-7">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb252-8">  }</span>
<span id="cb252-9"></span>
<span id="cb252-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(parents, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(children, find_call_rec, fun))</span>
<span id="cb252-11">}</span>
<span id="cb252-12"></span>
<span id="cb252-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb254" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb254-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb256" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb256-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "sum(1:10)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb258" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb258-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; character(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb260" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb260-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "sum(1:10)"  "sum(11:20)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb262" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb262-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_call_fun</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "sum(sum(1:10), sum(11:20))" "sum(1:10)"                 
#&gt; [3] "sum(11:20)"</code></pre>
</div>
</div>
<p>AR Solutions: Here we need to delete the previously added else statement and check for a call (not necessarily <code>&lt;-</code>) within the first <code>if()</code> in <code>find_assign_call()</code>. We save a call when we found one and return it later as part of our character output. Everything else stays the same:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb264" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb264-1">find_assign_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb264-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_call</span>(x)) {</span>
<span id="cb264-3">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr_text</span>(x)</span>
<span id="cb264-4">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb264-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb264-6">    lhs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()</span>
<span id="cb264-7">    children <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb264-8">  }</span>
<span id="cb264-9"></span>
<span id="cb264-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(lhs, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(children, find_assign_rec))</span>
<span id="cb264-11">}</span>
<span id="cb264-12"></span>
<span id="cb264-13">find_assign_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb264-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">switch_expr</span>(</span>
<span id="cb264-15">    x,</span>
<span id="cb264-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base cases</span></span>
<span id="cb264-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">constant =</span> ,</span>
<span id="cb264-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">symbol =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb264-19"></span>
<span id="cb264-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive cases</span></span>
<span id="cb264-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pairlist =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flat_map_chr</span>(x, find_assign_rec),</span>
<span id="cb264-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign_call</span>(x)</span>
<span id="cb264-23">  )</span>
<span id="cb264-24">}</span>
<span id="cb264-25"></span>
<span id="cb264-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x &lt;- y"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb266" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb266-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x</span>(y)) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> z)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "names(x(y)) &lt;- y &lt;- z" "names(x(y))"           "x(y)"                 
#&gt; [4] "y &lt;- z"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb268" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb268-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">find_assign</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "mean(sum(1:3))" "sum(1:3)"       "1:3"</code></pre>
</div>
</div>
<p>Note: the AR Solutions version detects <em>any</em> function call, not a specific function call.</p>
<hr>
</section>
</section>
<section id="quasiquotation" class="level1">
<h1>19 Quasiquotation</h1>
<p>Now that you understand the tree structure of R code, it’s time to return to one of the fundamental ideas that make <code>expr()</code> and <code>ast()</code> work: quotation. In tidy evaluation, all quoting functions are actually quasiquoting functions because they also support unquoting. Where quotation is the act of capturing an unevaluated expression, <strong>unquotation</strong> is the ability to selectively evaluate parts of an otherwise quoted expression. Together, this is called quasiquotation. Quasiquotation makes it easy to create functions that combine code written by the function’s author with code written by the function’s user. This helps to solve a wide variety of challenging problems.</p>
<p>Quasiquotation is one of the three pillars of tidy evaluation. You’ll learn about the other two (quosures and the data mask) in Chapter 20. When used alone, quasiquotation is most useful for programming, particularly for generating code. But when it’s combined with the other techniques, tidy evaluation becomes a powerful tool for data analysis.</p>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">19.2.2 Exercises</h2>
<ol type="1">
<li>For each function in the following base R code, identify which arguments are quoted and which are evaluated.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb270" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb270-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MASS) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: unused_import_linter.</span></span>
<span id="cb270-2"></span>
<span id="cb270-3">mtcars2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(mtcars, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb270-4"></span>
<span id="cb270-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(mtcars2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vs))</span>
<span id="cb270-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mtcars2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am)</span>
<span id="cb270-7"></span>
<span id="cb270-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(mtcars2)</span></code></pre></div>
</div>
<p>Answer: using the technique described in the chapter, test arguments outside their functions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb271-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MASS) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: unused_import_linter.</span></span>
<span id="cb271-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(MASS)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in eval(expr, envir, enclos) : object 'MASS' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb273-1">mtcars2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(mtcars, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb273-2">mtcars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
#&gt; Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
#&gt; Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
#&gt; AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
#&gt; Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
#&gt; Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
#&gt; Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
#&gt; Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
#&gt; Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
#&gt; Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb275-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(cyl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in eval(expr, envir, enclos) : object 'cyl' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb277-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(mtcars2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vs))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb279" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb279-1">mtcars2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb281" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb281-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(vs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in eval(expr, envir, enclos) : object 'vs' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb283" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb283-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mtcars2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 8</code></pre>
</div>
<div class="sourceCode cell-code" id="cb285" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb285-1">mtcars2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] 1 0 0 1 1 1 0 1 1 1 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb287" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb287-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(mtcars2)</span></code></pre></div>
</div>
<p>Results: <code>MASS</code>, <code>cyl</code>, <code>vs</code> are quoted, <code>mtcars</code>, <code>mtcars2</code> and <code>mtcars2$am</code> are not.</p>
<p>AR Solutions: For each argument we first follow the advice from <em>Advanced R</em> and execute the argument outside of the respective function. Since <code>MASS</code>, <code>cyl</code>, <code>vs</code> and <code>am</code> are not objects contained in the global environment, their execution raises an “Object not found” error. This way we confirm that the respective function arguments are quoted. For the other arguments, we may inspect the source code (and the documentation) to check if any quoting mechanisms are applied or the arguments are evaluated.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb288" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb288-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MASS) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MASS is quoted # nolint: unused_import_linter.</span></span></code></pre></div>
</div>
<p><code>library()</code> also accepts character vectors and doesn’t quote when <code>character.only</code> is set to <code>TRUE</code>, so <code>library(MASS, character.only = TRUE)</code> would raise an error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb289" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb289-1">mtcars2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(mtcars, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars is evaluated</span></span>
<span id="cb289-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyl is quoted</span></span>
<span id="cb289-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(mtcars2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(vs)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars2 is evaluated</span></span>
<span id="cb289-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum(vs) is quoted</span></span>
<span id="cb289-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(mtcars2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># matcars$am is evaluated</span></span>
<span id="cb289-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># am is quoted by $()</span></span></code></pre></div>
</div>
<p>When we inspect the source code of <code>rm()</code>, we notice that <code>rm()</code> catches its <code>...</code> argument as an unevaluated call (in this case a pairlist) via <code>match.call()</code>. This call is then converted into a string for further evaluation.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb290" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb290-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(mtcars2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars2 is quoted</span></span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>For each function in the following tidyverse code, identify which arguments are quoted and which are evaluated.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb291" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb291-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb291-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb291-3"></span>
<span id="cb291-4">by_cyl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb291-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb291-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mpg))</span>
<span id="cb291-7"></span>
<span id="cb291-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(by_cyl, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cyl, mean)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb291-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
</div>
<p>Answer: <code>library</code> automatically quotes its arguments. <code>cyl</code>, <code>mpg</code>, and <code>mean</code> are all data.frame columns.</p>
<ul>
<li>Quoted: <code>dplyr</code>, <code>ggplot2</code>, <code>cyl</code>, <code>mpg</code>, <code>mean</code> (in the final <code>ggpot</code> call)</li>
<li>Evaluated: <code>by_cyl</code>, <code>mtcars</code></li>
</ul>
<p>AR Solutions: From the previous exercise we’ve already learned that <code>library()</code> quotes its first argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb292" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb292-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dplyr is quoted</span></span>
<span id="cb292-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ggplot2 is quoted</span></span></code></pre></div>
</div>
<p>In similar fashion, it becomes clear that <code>cyl</code> is quoted by <code>group_by()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb293" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb293-1">by_cyl <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars is evaluated</span></span>
<span id="cb293-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(cyl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyl is quoted</span></span>
<span id="cb293-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(mpg)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean = mean(mpg) is quoted</span></span></code></pre></div>
</div>
<p>To find out what happens in <code>summarise()</code>, we inspect the source code. Tracing down the S3-dispatch of <code>summarise()</code>, we see that the <code>...</code> argument is quoted in <code>dplyr:::summarise_cols()</code> which is called in the underlying <code>summarise.data.frame()</code> method.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb294" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb294-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>summarise</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (.data, ..., .by = NULL, .groups = NULL) 
#&gt; {
#&gt;     by &lt;- enquo(.by)
#&gt;     if (!quo_is_null(by) &amp;&amp; !is.null(.groups)) {
#&gt;         abort("Can't supply both `.by` and `.groups`.")
#&gt;     }
#&gt;     UseMethod("summarise")
#&gt; }
#&gt; &lt;bytecode: 0x1158ea270&gt;
#&gt; &lt;environment: namespace:dplyr&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb296" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb296-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>summarise.data.frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (.data, ..., .by = NULL, .groups = NULL) 
#&gt; {
#&gt;     by &lt;- compute_by({
#&gt;         {
#&gt;             .by
#&gt;         }
#&gt;     }, .data, by_arg = ".by", data_arg = ".data")
#&gt;     cols &lt;- summarise_cols(.data, dplyr_quosures(...), by, "summarise")
#&gt;     out &lt;- summarise_build(by, cols)
#&gt;     if (!cols$all_one) {
#&gt;         summarise_deprecate_variable_size()
#&gt;     }
#&gt;     if (!is_tibble(.data)) {
#&gt;         out &lt;- as.data.frame(out)
#&gt;     }
#&gt;     if (identical(.groups, "rowwise")) {
#&gt;         out &lt;- rowwise_df(out, character())
#&gt;     }
#&gt;     out
#&gt; }
#&gt; &lt;bytecode: 0x11305c470&gt;
#&gt; &lt;environment: namespace:dplyr&gt;</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb298" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb298-1">dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>summarise_cols</span>
<span id="cb298-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; function (.data, ...)</span></span>
<span id="cb298-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; {</span></span>
<span id="cb298-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     mask &lt;- DataMask$new(.data, caller_env())</span></span>
<span id="cb298-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     dots &lt;- enquos(...)</span></span>
<span id="cb298-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     dots_names &lt;- names(dots)</span></span>
<span id="cb298-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     auto_named_dots &lt;- names(enquos(..., .named = TRUE))</span></span>
<span id="cb298-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     cols &lt;- list()</span></span>
<span id="cb298-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     sizes &lt;- 1L</span></span>
<span id="cb298-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     chunks &lt;- vector("list", length(dots))</span></span>
<span id="cb298-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     types &lt;- vector("list", length(dots))</span></span>
<span id="cb298-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span>
<span id="cb298-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;     ## function definition abbreviated for clarity ##</span></span>
<span id="cb298-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; }</span></span>
<span id="cb298-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;bytecode: 0x55b540c07ca0&gt;</span></span>
<span id="cb298-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;environment: namespace:dplyr&gt;</span></span></code></pre></div>
</div>
<p>In the following <code>{ggplot2}</code> expression the <code>cyl</code>- and <code>mean</code>-objects are quoted.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb299" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb299-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(</span>
<span id="cb299-2">  by_cyl, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by_cyl is evaluated</span></span>
<span id="cb299-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cyl, mean) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># aes() is evaluated</span></span>
<span id="cb299-4">) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb299-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cyl, mean is quoted (via aes)</span></span>
<span id="cb299-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
</div>
<p>We can confirm this also by inspecting <code>aes()</code>’s source code.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb300" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb300-1">ggplot2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>aes</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, y, ...) 
#&gt; {
#&gt;     xs &lt;- arg_enquos("x")
#&gt;     ys &lt;- arg_enquos("y")
#&gt;     dots &lt;- enquos(...)
#&gt;     args &lt;- c(xs, ys, dots)
#&gt;     args &lt;- Filter(Negate(quo_is_missing), args)
#&gt;     local({
#&gt;         aes &lt;- function(x, y, ...) NULL
#&gt;         inject(aes(!!!args))
#&gt;     })
#&gt;     aes &lt;- new_aes(args, env = parent.frame())
#&gt;     rename_aes(aes)
#&gt; }
#&gt; &lt;bytecode: 0x115b58680&gt;
#&gt; &lt;environment: namespace:ggplot2&gt;</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-5" class="level2">
<h2 class="anchored" data-anchor-id="exercises-5">19.3.6 Exercises</h2>
<ol type="1">
<li>How is <code>expr()</code> implemented? Look at its source code.</li>
</ol>
<p>Answer: reviewing the source code:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb302" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb302-1">rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>expr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (expr) 
#&gt; {
#&gt;     enexpr(expr)
#&gt; }
#&gt; &lt;bytecode: 0x1128a0558&gt;
#&gt; &lt;environment: namespace:rlang&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb304" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb304-1">rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>enexpr</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (arg) 
#&gt; {
#&gt;     .Call(ffi_enexpr, substitute(arg), parent.frame())
#&gt; }
#&gt; &lt;bytecode: 0x113318bc8&gt;
#&gt; &lt;environment: namespace:rlang&gt;</code></pre>
</div>
</div>
<p><code>expr()</code> simply calls <code>enexpr()</code>, which uses the C++ function <code>ffi_enexpr</code> and uses the base R function <code>substitute()</code>.</p>
<p>AR Solutions: <code>expr()</code> acts as a simple wrapper, which passes its argument to <code>enexpr()</code>.</p>
<hr>
<ol start="2" type="1">
<li>Compare and contrast the following two functions. Can you predict the output before running them?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb306" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb306-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb306-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb306-3">}</span>
<span id="cb306-4">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb306-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb306-6">}</span>
<span id="cb306-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span>
<span id="cb306-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span></code></pre></div>
</div>
<p>Answer: per Advanced R, <code>exprs(x = x, y = y)</code> is shorthand for <code>list(x = expr(x), y = expr(y))</code>, and <code>expr()</code> will capture the argument exactly as provided. <code>enexpr()</code> captures what the caller supplied, with <code>enexprs()</code> returning a list.</p>
<p>Test the predictions in comments:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb307" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb307-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb307-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb307-3">}</span>
<span id="cb307-4">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb307-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb307-6">}</span>
<span id="cb307-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns $x x $y y</span></span>
<span id="cb307-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $x
#&gt; x
#&gt; 
#&gt; $y
#&gt; y</code></pre>
</div>
<div class="sourceCode cell-code" id="cb309" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb309-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns $x a + b $y c + d</span></span>
<span id="cb309-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $x
#&gt; a + b
#&gt; 
#&gt; $y
#&gt; c + d</code></pre>
</div>
</div>
<p>Correct!</p>
<p>AR Solutions: Both functions are able to capture multiple arguments and will return a named list of expressions. <code>f1()</code> will return the arguments defined within the body of <code>f1()</code>. This happens because <code>exprs()</code> captures the expressions as specified by the developer during the definition of <code>f1()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb311" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb311-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $x
#&gt; x
#&gt; 
#&gt; $y
#&gt; y</code></pre>
</div>
</div>
<p><code>f2()</code> will return the arguments supplied to <code>f2()</code> as specified by the user when the function is called.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb313" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb313-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b, c <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $x
#&gt; a + b
#&gt; 
#&gt; $y
#&gt; c + d</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>What happens if you try to use <code>enexpr()</code> with an expression (i.e.&nbsp; <code>enexpr(x + y)</code> ? What happens if <code>enexpr()</code> is passed a missing argument?</li>
</ol>
<p>Answer: from the code below, <code>arg</code> must be a symbol, not an expression, and <code>arg</code> must exist.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb315" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb315-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in enexpr(x + y) : `arg` must be a symbol</code></pre>
</div>
<div class="sourceCode cell-code" id="cb317" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb317-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arg =</span> foo))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in (function (arg)  : object 'foo' not found</code></pre>
</div>
</div>
<p>AR Solutions: In the first case an error is thrown:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb319" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb319-1">on_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb319-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x))</span>
<span id="cb319-3">}</span>
<span id="cb319-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on_expr</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in enexpr(expr(x)) : `arg` must be a symbol</code></pre>
</div>
</div>
<p>In the second case a missing argument is returned:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb321" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb321-1">on_missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb321-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(x)</span>
<span id="cb321-3">}</span>
<span id="cb321-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on_missing</span>()</span></code></pre></div>
<div class="sourceCode cell-code" id="cb322" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb322-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_missing</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on_missing</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>How are <code>exprs(a)</code> and <code>exprs(a = )</code> different? Think about both the input and the output.</li>
</ol>
<p>Answer: as the code below demonstrates, <code>expr(a)</code> creates an unnamed list with <code>a</code> as the first element. <code>exprs(a = )</code> which creates an named list with an empty first element. Input of the form <code>x = y</code> creates a named list, while the form <code>x</code> creates an unnamed list.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb324" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb324-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb326" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb326-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb328" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb328-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $a
#&gt; a</code></pre>
</div>
</div>
<p>AR Solutions: In <code>exprs(a)</code> the input <code>a</code> is interpreted as a symbol for an unnamed argument. Consequently, the output shows an unnamed list with the first element containing the symbol <code>a</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb330" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb330-1">out1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(a)</span>
<span id="cb330-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(out1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; List of 1
#&gt;  $ : symbol a</code></pre>
</div>
</div>
<p>In <code>exprs(a = )</code> the first argument is named <code>a</code>, but then no value is provided. This leads to the output of a named list with the first element named <code>a</code>, which contains the missing argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb332" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb332-1">out2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> )</span>
<span id="cb332-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(out2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; List of 1
#&gt;  $ a: symbol</code></pre>
</div>
<div class="sourceCode cell-code" id="cb334" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb334-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_missing</span>(out2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<hr>
<ol start="5" type="1">
<li>What are other differences between <code>exprs()</code> and <code>alist()</code>? Read the documentation for the named arguments of <code>exprs()</code> to find out.</li>
</ol>
<p>Answer: <code>exprs()</code> has three named arguments (<code>alist()</code> has none):</p>
<ul>
<li><code>.named</code>, which automatically adds names to the list</li>
<li><code>.ignore_empty</code>, which selectively ignores empty arguments depending on the setting</li>
<li><code>.unquote_names</code>, which treats use of <code>:=</code> (which allows names injection) as <code>=</code></li>
</ul>
<p>AR Solutions: <code>exprs()</code> provides the additional arguments <code>.named</code> (<code>= FALSE</code>), <code>.ignore_empty</code> (<code>c("trailing", "none", "all")</code>) and <code>.unquote_names</code> (<code>TRUE</code>). <code>.named</code> allows to ensure that all dots are named. <code>ignore_empty</code> allows to specify how empty arguments should be handled for dots (<code>"trailing"</code>) or all arguments (<code>"none"</code> and <code>"all"</code>). Further via <code>.unquote_names</code> one can specify if <code>:=</code> should be treated like <code>=</code>. <code>:=</code> can be useful as it supports unquoting (<code>!!</code>) on the left-hand side.</p>
<hr>
<ol start="6" type="1">
<li><p>The documentation for <code>substitute()</code> says:</p>
<blockquote class="blockquote">
<p>Substitution takes place by examining each component of the parse tree as follows:</p>
<ul>
<li>If it is not a bound symbol in <code>env</code>, it is unchanged.</li>
<li>If it is a promise object (i.e., a formal argument to a function) the expression slot of the promise replaces the symbol.</li>
<li>If it is an ordinary variable, its value is substituted, unless <code>env</code> is <code>.GlobalEnv</code> in which case the symbol is left unchanged.</li>
</ul>
</blockquote>
<p>Create examples that illustrate each of the above cases.</p></li>
</ol>
<p>Answer: reviewing Google results for <a href="https://rlang.r-lib.org/reference/env_names.html">R bound symbol</a>, <a href="https://rstudio.github.io/promises/articles/overview.html">R promise object</a>, and chapter 6.5.1, construct the following code:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb336" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb336-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordinary variable in `.GlobalEnv`</span></span>
<span id="cb336-2">foo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span>
<span id="cb336-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(foo)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo</code></pre>
</div>
<div class="sourceCode cell-code" id="cb338" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb338-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ordinary variable not in `.GlobalEnv`</span></span>
<span id="cb338-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb338-3">  foo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span>
<span id="cb338-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(foo)</span>
<span id="cb338-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "bar"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb340" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb340-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not a bound symbol in `env`</span></span>
<span id="cb340-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(func)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; func</code></pre>
</div>
<div class="sourceCode cell-code" id="cb342" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb342-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># promise object</span></span>
<span id="cb342-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb342-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb342-4">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb342-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> y))</span>
<span id="cb342-6">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(x = 1:10)</code></pre>
</div>
</div>
<p>In the promise example, <code>y</code> is substituted, but not <code>x</code>, since <code>x</code> is the formal argument to <code>mean()</code>.</p>
<p>AR Solutions: Let’s create a new environment <code>my_env</code>, which contains no objects. In this case <code>substitute()</code> will just return its first argument (<code>expr</code>):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb344" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb344-1">my_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb344-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(x, my_env)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; x</code></pre>
</div>
</div>
<p>When we create a function containing an argument, which is directly returned after substitution, this function just returns the provided expression:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb346" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb346-1">foo <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(x)</span>
<span id="cb346-2"></span>
<span id="cb346-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; x + y * sin(0)</code></pre>
</div>
</div>
<p>In case <code>substitute()</code> can find (parts of) the expression in <code>env</code>, it will literally substitute. However, unless <code>env</code> is <code>.GlobalEnv</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb348" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb348-1">my_env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb348-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(x, my_env)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb350" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb350-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb350-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(x, .GlobalEnv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; x</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-6" class="level2">
<h2 class="anchored" data-anchor-id="exercises-6">19.4.8 Exercises</h2>
<ol type="1">
<li>Given the following components:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb352" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb352-1">xy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span>
<span id="cb352-2">xz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb352-3">yz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb352-4">abc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(a, b, c)</span></code></pre></div>
</div>
<p>Use quasiquotation to construct the following calls:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb353" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb353-1">(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb353-2"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb353-3">(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y)</span>
<span id="cb353-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">atan2</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb353-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span>
<span id="cb353-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(a, b, c)</span>
<span id="cb353-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(a, b, c), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb353-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z)</span></code></pre></div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb354" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb354-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (x + y) / (y + z)</span></span>
<span id="cb354-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (x + y)/(y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb356" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb356-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -(x + z) ^ (y + z)</span></span>
<span id="cb356-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xz)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^!!</span>yz)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; -(x + z)^(y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb358" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb358-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (x + y) + (y + z) - (x + y)</span></span>
<span id="cb358-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (x + y) + (y + z) - (x + y)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb360" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb360-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># atan2(x + y, y + z)</span></span>
<span id="cb360-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">atan2</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; atan2(x + y, y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb362" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb362-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum(x + y, x + y, y + z)</span></span>
<span id="cb362-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; sum(x + y, x + y, y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb364" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb364-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum(a, b, c)</span></span>
<span id="cb364-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>abc))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; sum(a, b, c)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb366" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb366-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean(c(a, b, c), na.rm = TRUE)</span></span>
<span id="cb366-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>abc), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(c(a, b, c), na.rm = TRUE)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb368" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb368-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># foo(a = x + y, b = y + z)</span></span>
<span id="cb368-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(a = x + y, b = y + z)</code></pre>
</div>
</div>
<p>Surprisingly, multiple parentheses are needed to construct <code>(x + y) + (y + z) - (x + y)</code>.</p>
<p>AR Solutions We combine and unquote the given quoted expressions to construct the desired calls like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb370" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb370-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (x + y)/(y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb372" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb372-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xz)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (2)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; -(x + z)^(y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb374" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb374-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (3)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; (x + y) + (y + z) - (x + y)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb376" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb376-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">atan2</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (4)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; atan2(x + y, y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb378" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb378-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (5)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; sum(x + y, x + y, y + z)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb380" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb380-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>abc)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (6)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; sum(a, b, c)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb382" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb382-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>abc), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (7)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(c(a, b, c), na.rm = TRUE)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb384" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb384-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>xy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>yz)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (8)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; foo(a = x + y, b = y + z)</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>The following two calls print the same, but are actually different:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb386" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb386-1">(a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(1:10)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb388" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb388-1">(b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; mean(1:10)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb390" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb390-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(a, b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>What’s the difference? Which one is more natural?</p>
<p>Answer: the key difference is the use of <code>!!</code> for the sequence <code>1:10</code>. Comparing <code>expr()</code> for both of the arguments supplied to mean, <code>!!</code> changes the expression from a call to <code>:</code> to an integer vector:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb392" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb392-1">arga <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb392-2">argb <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb392-3">arga</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 1:10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb394" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb394-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>arga)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─`:` 
#&gt; ├─1 
#&gt; └─10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb396" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb396-1">argb</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb398" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb398-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>argb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;inline integer&gt;</code></pre>
</div>
</div>
<p>Use of <code>!!</code> creates a non-standard AST with an inline integer. The first form is more natural.</p>
<p>AR Solutions: It’s easiest to see the difference with <code>lobstr::ast()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb400" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb400-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─mean 
#&gt; └─█─`:` 
#&gt;   ├─1 
#&gt;   └─10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb402" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb402-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ast</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █─mean 
#&gt; └─&lt;inline integer&gt;</code></pre>
</div>
</div>
<p>In the expression <code>mean(!!(1:10))</code> the call <code>1:10</code> is evaluated to an integer vector, while still being a call object in <code>mean(1:10)</code>.</p>
<p>The first version (<code>mean(1:10)</code>) seems more natural. It captures lazy evaluation, with a promise that is evaluated when the function is called. The second version (<code>mean(!!(1:10))</code>) inlines a vector directly into a call.</p>
<hr>
</section>
<section id="exercises-7" class="level2">
<h2 class="anchored" data-anchor-id="exercises-7">19.6.5 Exercises</h2>
<ol type="1">
<li>One way to implement <code>exec()</code> is shown below. Describe how it works. What are the key ideas?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb404" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb404-1">exec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, ..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb404-2">  args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2</span>(...)</span>
<span id="cb404-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">do.call</span>(f, args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> .env)</span>
<span id="cb404-4">}</span></code></pre></div>
</div>
<p>Answer: the implementation is a wrapper to <code>do.call()</code>, which requires a function, list of arguments, and environment (it also has a <code>quote</code> parameter which is set to <code>FALSE</code> by default). <code>list2()</code> is used to convert the function arguments into a list which is compatible with <code>do.call()</code>.</p>
<p>AR Solutions: <code>exec()</code> takes a function (<code>f</code>), its arguments (<code>...</code>) and an environment (<code>.env</code>) as input. This allows to construct a call from <code>f</code> and <code>...</code> and evaluate this call in the supplied environment. As the <code>...</code> argument is handled via <code>list2()</code>, <code>exec()</code> supports tidy dots (quasiquotation), which means that arguments and names (on the left-hand side of <code>:=</code>) can be unquoted via <code>!!</code> and <code>!!!</code>.</p>
<hr>
<ol start="2" type="1">
<li>Carefully read the source code for <code>interaction()</code>, <code>expand.grid()</code>, and <code>par()</code>. Compare and contrast the techniques they use for switching between dots and list behaviour.</li>
</ol>
<p>Answer: reviewing the source code for each function, all three functions convert dots into a list using <code>list(...)</code>. All three also allow passing multiple arguments as well as a list as a single argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb405" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb405-1">interaction</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., drop = FALSE, sep = ".", lex.order = FALSE) 
#&gt; {
#&gt;     args &lt;- list(...)
#&gt;     narg &lt;- length(args)
#&gt;     if (narg &lt; 1L) 
#&gt;         stop("No factors specified")
#&gt;     if (narg == 1L &amp;&amp; is.list(args[[1L]])) {
#&gt;         args &lt;- args[[1L]]
#&gt;         narg &lt;- length(args)
#&gt;     }
#&gt;     for (i in narg:1L) {
#&gt;         f &lt;- as.factor(args[[i]])[, drop = drop]
#&gt;         l &lt;- levels(f)
#&gt;         if1 &lt;- as.integer(f) - 1L
#&gt;         if (i == narg) {
#&gt;             ans &lt;- if1
#&gt;             lvs &lt;- l
#&gt;         }
#&gt;         else {
#&gt;             if (lex.order) {
#&gt;                 ll &lt;- length(lvs)
#&gt;                 ans &lt;- ans + ll * if1
#&gt;                 lvs &lt;- paste(rep(l, each = ll), rep(lvs, length(l)), 
#&gt;                   sep = sep)
#&gt;             }
#&gt;             else {
#&gt;                 ans &lt;- ans * length(l) + if1
#&gt;                 lvs &lt;- paste(rep(l, length(lvs)), rep(lvs, each = length(l)), 
#&gt;                   sep = sep)
#&gt;             }
#&gt;             if (anyDuplicated(lvs)) {
#&gt;                 ulvs &lt;- unique(lvs)
#&gt;                 while ((i &lt;- anyDuplicated(flv &lt;- match(lvs, 
#&gt;                   ulvs)))) {
#&gt;                   lvs &lt;- lvs[-i]
#&gt;                   ans[ans + 1L == i] &lt;- match(flv[i], flv[1:(i - 
#&gt;                     1)]) - 1L
#&gt;                   ans[ans + 1L &gt; i] &lt;- ans[ans + 1L &gt; i] - 1L
#&gt;                 }
#&gt;                 lvs &lt;- ulvs
#&gt;             }
#&gt;             if (drop) {
#&gt;                 olvs &lt;- lvs
#&gt;                 lvs &lt;- lvs[sort(unique(ans + 1L))]
#&gt;                 ans &lt;- match(olvs[ans + 1L], lvs) - 1L
#&gt;             }
#&gt;         }
#&gt;     }
#&gt;     structure(as.integer(ans + 1L), levels = lvs, class = "factor")
#&gt; }
#&gt; &lt;bytecode: 0x1122c1090&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb407" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb407-1">expand.grid</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE) 
#&gt; {
#&gt;     nargs &lt;- length(args &lt;- list(...))
#&gt;     if (!nargs) 
#&gt;         return(as.data.frame(list()))
#&gt;     if (nargs == 1L &amp;&amp; is.list(a1 &lt;- args[[1L]])) 
#&gt;         nargs &lt;- length(args &lt;- a1)
#&gt;     if (nargs == 0L) 
#&gt;         return(as.data.frame(list()))
#&gt;     cargs &lt;- vector("list", nargs)
#&gt;     iArgs &lt;- seq_len(nargs)
#&gt;     nmc &lt;- paste0("Var", iArgs)
#&gt;     nm &lt;- names(args)
#&gt;     if (is.null(nm)) 
#&gt;         nm &lt;- nmc
#&gt;     else if (any(ng0 &lt;- nzchar(nm))) 
#&gt;         nmc[ng0] &lt;- nm[ng0]
#&gt;     names(cargs) &lt;- nmc
#&gt;     rep.fac &lt;- 1L
#&gt;     d &lt;- lengths(args)
#&gt;     if (KEEP.OUT.ATTRS) {
#&gt;         dn &lt;- vector("list", nargs)
#&gt;         names(dn) &lt;- nmc
#&gt;     }
#&gt;     orep &lt;- prod(d)
#&gt;     if (orep == 0L) {
#&gt;         for (i in iArgs) cargs[[i]] &lt;- args[[i]][FALSE]
#&gt;     }
#&gt;     else {
#&gt;         for (i in iArgs) {
#&gt;             x &lt;- args[[i]]
#&gt;             if (KEEP.OUT.ATTRS) 
#&gt;                 dn[[i]] &lt;- paste0(nmc[i], "=", if (is.numeric(x)) 
#&gt;                   format(x)
#&gt;                 else x)
#&gt;             nx &lt;- length(x)
#&gt;             orep &lt;- orep/nx
#&gt;             if (stringsAsFactors &amp;&amp; is.character(x)) 
#&gt;                 x &lt;- factor(x, levels = unique(x))
#&gt;             x &lt;- x[rep.int(rep.int(seq_len(nx), rep.int(rep.fac, 
#&gt;                 nx)), orep)]
#&gt;             cargs[[i]] &lt;- x
#&gt;             rep.fac &lt;- rep.fac * nx
#&gt;         }
#&gt;     }
#&gt;     if (KEEP.OUT.ATTRS) 
#&gt;         attr(cargs, "out.attrs") &lt;- list(dim = d, dimnames = dn)
#&gt;     rn &lt;- .set_row_names(as.integer(prod(d)))
#&gt;     structure(cargs, class = "data.frame", row.names = rn)
#&gt; }
#&gt; &lt;bytecode: 0x1121b5b30&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb409" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb409-1">par</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., no.readonly = FALSE) 
#&gt; {
#&gt;     .Pars.readonly &lt;- c("cin", "cra", "csi", "cxy", "din", "page")
#&gt;     single &lt;- FALSE
#&gt;     args &lt;- list(...)
#&gt;     if (!length(args)) 
#&gt;         args &lt;- as.list(if (no.readonly) 
#&gt;             .Pars[-match(.Pars.readonly, .Pars)]
#&gt;         else .Pars)
#&gt;     else {
#&gt;         if (all(unlist(lapply(args, is.character)))) 
#&gt;             args &lt;- as.list(unlist(args))
#&gt;         if (length(args) == 1) {
#&gt;             if (is.list(args[[1L]]) || is.null(args[[1L]])) 
#&gt;                 args &lt;- args[[1L]]
#&gt;             else if (is.null(names(args))) 
#&gt;                 single &lt;- TRUE
#&gt;         }
#&gt;     }
#&gt;     value &lt;- .External2(C_par, args)
#&gt;     if (single) 
#&gt;         value &lt;- value[[1L]]
#&gt;     if (!is.null(names(args))) 
#&gt;         invisible(value)
#&gt;     else value
#&gt; }
#&gt; &lt;bytecode: 0x105bcde08&gt;
#&gt; &lt;environment: namespace:graphics&gt;</code></pre>
</div>
</div>
<p>AR Solutions: All three functions capture the dots via <code>args &lt;- list(...)</code>.</p>
<p><code>interaction()</code> computes factor interactions between the captured input factors by iterating over the <code>args</code>. When a list is provided this is detected via <code>length(args) == 1 &amp;&amp; is.list(args[[1]])</code> and one level of the list is stripped through <code>args &lt;- args[[1]]</code>. The rest of the function’s code doesn’t differentiate further between list and dots behaviour.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb411" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb411-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span>
<span id="cb411-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Both calls create the same output</span></span>
<span id="cb411-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interaction</span>(     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dots</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] a.e b.f c.e d.f
#&gt; Levels: a.e b.e c.e d.e a.f b.f c.f d.f</code></pre>
</div>
<div class="sourceCode cell-code" id="cb413" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb413-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interaction</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] a.e b.f c.e d.f
#&gt; Levels: a.e b.e c.e d.e a.f b.f c.f d.f</code></pre>
</div>
<div class="sourceCode cell-code" id="cb415" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb415-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: on</span></span></code></pre></div>
</div>
<p><code>expand.grid()</code> uses the same strategy and also assigns <code>args &lt;- args[[1]]</code> in case of <code>length(args) == 1 &amp;&amp; is.list(args[[1]])</code>.</p>
<p><code>par()</code> does the most pre-processing to ensure a valid structure of the <code>args</code> argument. When no dots are provided (<code>!length(args)</code>) it creates a list of arguments from an internal character vector (partly depending on its <code>no.readonly</code> argument). Further, given that all elements of <code>args</code> are character vectors (<code>all(unlist(lapply(args, is.character)))</code>), <code>args</code> is turned into a list via <code>as.list(unlist(args))</code> (this flattens nested lists). Similar to the other functions, one level of <code>args</code> gets stripped via <code>args &lt;- args[[1L]]</code>, when <code>args</code> is of length one and its first element is a list.</p>
<hr>
<ol start="3" type="1">
<li>Explain the problem with this definition of <code>set_attr()</code></li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb416" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb416-1">set_attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb416-2">  attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2</span>(...)</span>
<span id="cb416-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attr</span>
<span id="cb416-4">  x</span>
<span id="cb416-5">}</span>
<span id="cb416-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_attr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in attributes(x) &lt;- attr : attributes must be named</code></pre>
</div>
</div>
<p>Answer: <code>attributes(x) &lt;- value</code> requires <code>value</code> to be a named list, which is only generated for <code>list2</code> calls of the form <code>list2(a = 1, b = 2)</code> - setting <code>.named = TRUE</code> doesn’t help in this case as it generates zero-length names which are not allowed by <code>attributes()</code>. Using dots will only work when each attribute is explicitly named.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb418" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb418-1">set_attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb418-2">  attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.named =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb418-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attr</span>
<span id="cb418-4">  x</span>
<span id="cb418-5">}</span>
<span id="cb418-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_attr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in attributes(x) &lt;- attr : attempt to use zero-length variable name</code></pre>
</div>
</div>
<p>AR Solutions: <code>set_attr()</code> expects an object named <code>x</code> and its attributes, supplied via the dots. Unfortunately, this prohibits us to provide attributes named <code>x</code> as these would collide with the argument name of our object. Even omitting the object’s argument name doesn’t help in this case — as can be seen in the example where the object is consequently treated as an unnamed attribute.</p>
<p>However, we may name the first argument <code>.x</code>, which seems clearer and less likely to invoke errors. In this case <code>1:10</code> will get the (named) attribute <code>x = 10</code> assigned:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb420" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb420-1">set_attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.x, ...) {</span>
<span id="cb420-2">  attr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list2</span>(...)</span>
<span id="cb420-3"></span>
<span id="cb420-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(.x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> attr</span>
<span id="cb420-5">  .x</span>
<span id="cb420-6">}</span>
<span id="cb420-7"></span>
<span id="cb420-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_attr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  1  2  3  4  5  6  7  8  9 10
#&gt; attr(,"x")
#&gt; [1] 10</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-8" class="level2">
<h2 class="anchored" data-anchor-id="exercises-8">19.7.5 Exercises</h2>
<ol type="1">
<li>In the linear-model example, we could replace the <code>expr()</code> in <code>reduce(summands, ~ expr(!!.x + !!.y))</code> with <code>call2()</code>: <code>reduce(summands, call2, "+")</code>. Compare and contrast the two approaches. Which do you think is easier to read?</li>
</ol>
<p>Answer: both approaches add the first and second arguments. The <code>call2()</code> method implicitly passes the arguments, where the formula method explicitly adds them, making it easier to understand.</p>
<p>AR Solutions:</p>
<hr>
<ol start="2" type="1">
<li>Re-implement the Box-Cox transform defined below using unquoting and <code>new_function()</code>:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb422" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb422-1">bc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb422-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb422-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(x)</span>
<span id="cb422-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb422-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) (x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> lambda</span>
<span id="cb422-6">  }</span>
<span id="cb422-7">}</span>
<span id="cb422-8"></span>
<span id="cb422-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(x) log(x)
#&gt; &lt;environment: 0x114db09d0&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb424" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb424-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(x) (x^lambda - 1) / lambda
#&gt; &lt;bytecode: 0x1168dc7f0&gt;
#&gt; &lt;environment: 0x114e11d20&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb426" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb426-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.6931472</code></pre>
</div>
<div class="sourceCode cell-code" id="cb428" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb428-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1.5</code></pre>
</div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb430" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb430-1">bc <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb430-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb430-3">    func <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>({</span>
<span id="cb430-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(x)</span>
<span id="cb430-5">    })</span>
<span id="cb430-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb430-7">    func <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>({</span>
<span id="cb430-8">      ((x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^!!</span>lambda) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>lambda</span>
<span id="cb430-9">    })</span>
<span id="cb430-10">  }</span>
<span id="cb430-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(</span>
<span id="cb430-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ),</span>
<span id="cb430-13">    func,</span>
<span id="cb430-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()</span>
<span id="cb430-15">  )</span>
<span id="cb430-16">}</span>
<span id="cb430-17"></span>
<span id="cb430-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; {
#&gt;     log(x)
#&gt; }</code></pre>
</div>
<div class="sourceCode cell-code" id="cb432" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb432-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; {
#&gt;     ((x^2) - 1)/2
#&gt; }</code></pre>
</div>
<div class="sourceCode cell-code" id="cb434" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb434-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.6931472</code></pre>
</div>
<div class="sourceCode cell-code" id="cb436" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb436-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1.5</code></pre>
</div>
</div>
<p>AR Solutions: Here <code>new_function()</code> allows us to create a function factory using tidy evaluation.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb438" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb438-1">bc2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb438-2">  lambda <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(lambda)</span>
<span id="cb438-3"></span>
<span id="cb438-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: if_not_else_linter.</span></span>
<span id="cb438-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(x)))</span>
<span id="cb438-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb438-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> ), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>((x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>lambda) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>lambda))</span>
<span id="cb438-8">  }</span>
<span id="cb438-9">}</span>
<span id="cb438-10"></span>
<span id="cb438-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; log(x)
#&gt; &lt;environment: 0x1069fabd0&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb440" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb440-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; (x^2 - 1)/2
#&gt; &lt;environment: 0x1118fefd0&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb442" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb442-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bc2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1.5</code></pre>
</div>
</div>
<p>Note: I prefer the base R approach to <code>new_function()</code>.</p>
<hr>
<ol start="3" type="1">
<li>Re-implement the simple <code>compose()</code> defined below using quasiquotation and <code>new_function()</code>:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb444" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb444-1">compose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, g) {</span>
<span id="cb444-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(...))</span>
<span id="cb444-3">}</span>
<span id="cb444-4"></span>
<span id="cb444-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sum, as.integer)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(...) f(g(...))
#&gt; &lt;environment: 0x112694cd8&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb446" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb446-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sum, as.integer)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 55</code></pre>
</div>
</div>
<p>Answer: (non-working) code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb448" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb448-1">compose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, g) {</span>
<span id="cb448-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(</span>
<span id="cb448-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(...),</span>
<span id="cb448-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>({</span>
<span id="cb448-5">      (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>f)((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>g)(...))</span>
<span id="cb448-6">    }),</span>
<span id="cb448-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()</span>
<span id="cb448-8">  )</span>
<span id="cb448-9">}</span>
<span id="cb448-10"></span>
<span id="cb448-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sum, as.integer)</span>
<span id="cb448-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sum, as.integer)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>AR Solutions: The implementation is fairly straightforward, even though a lot of parentheses are required:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb449" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb449-1">compose2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, g) {</span>
<span id="cb449-2">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(f)</span>
<span id="cb449-3">  g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(g)</span>
<span id="cb449-4"></span>
<span id="cb449-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_function</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exprs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">... =</span> ), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>f)((<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>g)(...))))</span>
<span id="cb449-6">}</span>
<span id="cb449-7"></span>
<span id="cb449-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sin, cos)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(...) f(g(...))
#&gt; &lt;bytecode: 0x1143a7ed0&gt;
#&gt; &lt;environment: 0x115b11ff0&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb451" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb451-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(sin, cos)(pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -0.841471</code></pre>
</div>
<div class="sourceCode cell-code" id="cb453" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb453-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose2</span>(sin, cos)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (...) 
#&gt; sin(cos(...))
#&gt; &lt;environment: 0x1150e8350&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb455" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb455-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose2</span>(sin, cos)(pi)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -0.841471</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="evaluation" class="level1">
<h1>20 Evaluation</h1>
<p>The user-facing inverse of quotation is unquotation: it gives the <em>user</em> the ability to selectively evaluate parts of an otherwise quoted argument. The developer-facing complement of quotation is evaluation: this gives the <em>developer</em> the ability to evaluate quoted expressions in custom environments to achieve specific goals.</p>
<p>This chapter begins with a discussion of evaluation in its purest form. You’ll learn how <code>eval()</code> evaluates an expression in an environment, and then how it can be used to implement a number of important base R functions. Once you have the basics under your belt, you’ll learn extensions to evaluation that are needed for robustness. There are two big new ideas:</p>
<ul>
<li><p>The quosure: a data structure that captures an expression along with its associated environment, as found in function arguments.</p></li>
<li><p>The data mask, which makes it easier to evaluate an expression in the context of a data frame. This introduces potential evaluation ambiguity which we’ll then resolve with data pronouns.</p></li>
</ul>
<p>Together, quasiquotation, quosures, and data masks form what we call <strong>tidy evaluation</strong>, or tidy eval for short. Tidy eval provides a principled approach to non-standard evaluation that makes it possible to use such functions both interactively and embedded with other functions. Tidy evaluation is the most important practical implication of all this theory so we’ll spend a little time exploring the implications. The chapter finishes off with a discussion of the closest related approaches in base R, and how you can program around their drawbacks.</p>
<section id="exercises-9" class="level2">
<h2 class="anchored" data-anchor-id="exercises-9">20.2.4 Exercises</h2>
<ol type="1">
<li>Carefully read the documentation for <code>source()</code>. What environment does it use by default? What if you supply <code>local = TRUE</code>? How do you provide a custom environment?</li>
</ol>
<p>Answer: by default, <code>source()</code> uses the global environment, and uses the calling environment with <code>local = TRUE</code>, and doesn’t support other options; to provide a custom environment, you must use <code>sys.source()</code>.</p>
<p>AR Solutions: By default, <code>source()</code> uses the global environment (<code>local = FALSE</code>). A specific evaluation environment may be chosen, by passing it explicitly to the <code>local</code> argument. To use current environment (i.e.&nbsp;the calling environment of <code>source()</code>) set <code>local = TRUE</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb457" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb457-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a temporary, sourceable R script that prints x</span></span>
<span id="cb457-2">tmp_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb457-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"print(x)"</span>, tmp_file)</span>
<span id="cb457-4"></span>
<span id="cb457-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set `x` globally</span></span>
<span id="cb457-6">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"global environment"</span></span>
<span id="cb457-7">env2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"specified environment"</span>)</span>
<span id="cb457-8"></span>
<span id="cb457-9">locate_evaluation <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(file, local) {</span>
<span id="cb457-10">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local environment"</span></span>
<span id="cb457-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>(file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">local =</span> local)</span>
<span id="cb457-12">}</span>
<span id="cb457-13"></span>
<span id="cb457-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Where will source() evaluate the code?</span></span>
<span id="cb457-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locate_evaluation</span>(tmp_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">local =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "global environment"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb459" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb459-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locate_evaluation</span>(tmp_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">local =</span> env2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "specified environment"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb461" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb461-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">locate_evaluation</span>(tmp_file, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">local =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "local environment"</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Predict the results of the following lines of code:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb463" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb463-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))</span>
<span id="cb463-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))))</span>
<span id="cb463-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))))</span></code></pre></div>
</div>
<p>Answer: all of these <em>should</em> return <code>4</code>, since the innermost expression is evaluated first.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb464" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb464-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb466" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb466-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb468" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb468-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(expr(eval(expr(eval(expr(2 + 2))))))</code></pre>
</div>
</div>
<p>Incorrect: let’s explore how these are evaluated:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb470" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb470-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 2 + 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb472" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb472-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb474" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb474-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(expr(2 + 2))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb476" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb476-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb478" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb478-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(expr(eval(expr(2 + 2))))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb480" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb480-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
</div>
<p>When <code>expr()</code> is on the outside, the expression isn’t evaluated, when <code>eval()</code> is on the outside the answer ‘collapses’ to 4.</p>
<p>AR Solutions: Let’s look at a quote from the <a href="http://adv-r.had.co.nz/Computing-on-the-language.html#subset">first edition of <em>Advanced R</em></a>:</p>
<blockquote class="blockquote">
<p>“<code>expr()</code> and <code>eval()</code> are opposites. […] each <code>eval()</code> peels off one layer of <code>expr()</code>’s”.</p>
</blockquote>
<p>In general, <code>eval(expr(x))</code> evaluates to <code>x</code>. Therefore, (1) evaluates to <img src="https://latex.codecogs.com/png.latex?2%20+%202%20=%204">. Adding another <code>eval()</code> doesn’t have impact here. So, also (2) evaluates to <code>4</code>. However, when wrapping (1) into <code>expr()</code> the whole expression will be quoted.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb482" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb482-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (1)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb484" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb484-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (2)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb486" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb486-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))))))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (3)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(expr(eval(expr(eval(expr(2 + 2))))))</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Fill in the function bodies below to re-implement <code>get()</code> using <code>sym()</code> and <code>eval()</code>, and<code>assign()</code> using <code>sym()</code>, <code>expr()</code>, and <code>eval()</code>. Don’t worry about the multiple ways of choosing an environment that <code>get()</code> and <code>assign()</code> support; assume that the user supplies it explicitly.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb488" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb488-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name is a string</span></span>
<span id="cb488-2">get2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, env) {}</span>
<span id="cb488-3">assign2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, value, env) {}</span></code></pre></div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb489" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb489-1">get2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, env) {</span>
<span id="cb489-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(name), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb489-3">}</span>
<span id="cb489-4">assign2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, value, env) {</span>
<span id="cb489-5">  s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(name)</span>
<span id="cb489-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>value), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> env)</span>
<span id="cb489-7">}</span>
<span id="cb489-8"></span>
<span id="cb489-9">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span></span>
<span id="cb489-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1234</code></pre>
</div>
<div class="sourceCode cell-code" id="cb491" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb491-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2345</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>())</span>
<span id="cb491-2">test</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1234</code></pre>
</div>
</div>
<p>AR Solutions: We reimplement these two functions using tidy evaluation. We turn the string <code>name</code> into a symbol, then evaluate it:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb493" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb493-1">get2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb493-2">  name_sym <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(name)</span>
<span id="cb493-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(name_sym, env)</span>
<span id="cb493-4">}</span>
<span id="cb493-5"></span>
<span id="cb493-6">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb493-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
</div>
<p>To build the correct expression for the value assignment, we unquote using <code>!!</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb495" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb495-1">assign2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb495-2">  name_sym <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sym</span>(name)</span>
<span id="cb495-3">  assign_expr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">expr</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>name_sym <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!</span>value)</span>
<span id="cb495-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(assign_expr, env)</span>
<span id="cb495-5">}</span>
<span id="cb495-6"></span>
<span id="cb495-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb495-8">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
</div>
<p>Note: I had to review AR Solutions to discover the need to unquote using <code>!!</code>.</p>
<hr>
<ol start="4" type="1">
<li>Modify <code>source2()</code> so it returns the result of <em>every</em> expression, not just the last one. Can you eliminate the for loop?</li>
</ol>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb497" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb497-1">my_source2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb497-2">  file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb497-3">  exprs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_exprs</span>(file)</span>
<span id="cb497-4"></span>
<span id="cb497-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(exprs, eval, env))</span>
<span id="cb497-6">}</span></code></pre></div>
</div>
<p>AR Solutions: The code for <code>source2()</code> was given in <em>Advanced R</em> as:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb498" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb498-1">source2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb498-2">  file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb498-3">  exprs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_exprs</span>(file)</span>
<span id="cb498-4"></span>
<span id="cb498-5">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb498-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(exprs)) {</span>
<span id="cb498-7">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(exprs[[i]], env)</span>
<span id="cb498-8">  }</span>
<span id="cb498-9"></span>
<span id="cb498-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(res)</span>
<span id="cb498-11">}</span></code></pre></div>
</div>
<p>In order to highlight the modifications in our new <code>source2()</code> function, we’ve preserved the differing code from the former <code>source2()</code> in a comment.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb499" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb499-1">source2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb499-2">  file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warn =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb499-3">  exprs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_exprs</span>(file)</span>
<span id="cb499-4"></span>
<span id="cb499-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># res &lt;- NULL</span></span>
<span id="cb499-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for (i in seq_along(exprs)) {</span></span>
<span id="cb499-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   res[[i]] &lt;- eval(exprs[[i]], env)</span></span>
<span id="cb499-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># }</span></span>
<span id="cb499-9"></span>
<span id="cb499-10">  res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(exprs, eval, env)</span>
<span id="cb499-11"></span>
<span id="cb499-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(res)</span>
<span id="cb499-13">}</span></code></pre></div>
</div>
<p>Let’s create a file and test <code>source2()</code>. Keep in mind that <code>&lt;-</code> returns invisibly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb500" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb500-1">tmp_file <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb500-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(</span>
<span id="cb500-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x &lt;- 1</span></span>
<span id="cb500-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       x</span></span>
<span id="cb500-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       y &lt;- 2</span></span>
<span id="cb500-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       y  # some comment"</span>,</span>
<span id="cb500-7">  tmp_file</span>
<span id="cb500-8">)</span>
<span id="cb500-9"></span>
<span id="cb500-10">(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source2</span>(tmp_file))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 1
#&gt; 
#&gt; [[2]]
#&gt; [1] 1
#&gt; 
#&gt; [[3]]
#&gt; [1] 2
#&gt; 
#&gt; [[4]]
#&gt; [1] 2</code></pre>
</div>
</div>
<p>Note: validate <code>my_source2()</code> returns the same results:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb502" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb502-1">(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_source2</span>(tmp_file))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 1
#&gt; 
#&gt; [[2]]
#&gt; [1] 1
#&gt; 
#&gt; [[3]]
#&gt; [1] 2
#&gt; 
#&gt; [[4]]
#&gt; [1] 2</code></pre>
</div>
</div>
<hr>
<ol start="5" type="1">
<li>We can make <code>base::local()</code> slightly easier to understand by spreading out over multiple lines:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb504" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb504-1">local3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()) {</span>
<span id="cb504-2">  call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(expr), envir))</span>
<span id="cb504-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(call, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>())</span>
<span id="cb504-4">}</span></code></pre></div>
</div>
<p>Explain how <code>local()</code> works in words. (Hint: you might want to <code>print(call)</code> to help understand what <code>substitute()</code> is doing, and read the documentation to remind yourself what environment <code>new.env()</code> will inherit from.)</p>
<p>Answer: adding <code>print(call)</code> shows that <code>substitute()</code> creates a call to evaluate the expression passed to <code>local3()</code> in <code>new.env()</code>, which inherits the environment from the caller. So:</p>
<p><code>local()</code> works by evaluating an expression in a new child environment.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb505" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb505-1">local3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()) {</span>
<span id="cb505-2">  call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(expr), envir))</span>
<span id="cb505-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(call)</span>
<span id="cb505-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(call, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>())</span>
<span id="cb505-5">}</span>
<span id="cb505-6"></span>
<span id="cb505-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local3</span>(test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4567</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(quote(test &lt;- 4567), new.env())</code></pre>
</div>
</div>
<p>AR Solutions: Let’s follow the advice and add <code>print(call)</code> inside of <code>local3()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb507" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb507-1">local3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()) {</span>
<span id="cb507-2">  call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>(expr), envir))</span>
<span id="cb507-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(call)</span>
<span id="cb507-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(call, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>())</span>
<span id="cb507-5">}</span></code></pre></div>
</div>
<p>The first line generates a call to <code>eval()</code>, because <code>substitute()</code> operates in the current evaluation argument. However, this doesn’t matter here, as both, <code>expr</code> and <code>envir</code> are promises and therefore “the expression slots of the promises replace the symbols”, from <code>?substitute</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb508" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb508-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local3</span>({</span>
<span id="cb508-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb508-3">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb508-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; eval(quote({
#&gt;     x &lt;- 10
#&gt;     x * 2
#&gt; }), new.env())</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 20</code></pre>
</div>
</div>
<p>Next, <code>call</code> will be evaluated in the caller environment (aka the parent frame). Given that <code>call</code> contains another call <code>eval()</code> why does this matter? The answer is subtle: this outer environment determines where the bindings for <code>eval</code>, <code>quote</code>, and <code>new.env</code> are found.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb511" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb511-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eval</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">quote</span>({</span>
<span id="cb511-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb511-3">  x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb511-4">}), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 20</code></pre>
</div>
<div class="sourceCode cell-code" id="cb513" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb513-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<hr>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>advanced-r</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-4.html</guid>
  <pubDate>Sun, 19 Feb 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2 (Extending)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Extending” chapters of <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a>, third edition, with comparisons to solutions from <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(wesanderson)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maps)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-6"></span>
<span id="cb1-7">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-10">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a> and <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read the ggplot2 book and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="programming-with-ggplot2" class="level1">
<h1>19 Programming with ggplot2</h1>
<p>A major requirement of a good data analysis is flexibility. If your data changes, or you discover something that makes you rethink your basic assumptions, you need to be able to easily change many plots at once. The main inhibitor of flexibility is code duplication. If you have the same plotting statement repeated over and over again, you’ll have to make the same change in many different places. Often just the thought of making all those changes is exhausting! This chapter will help you overcome that problem by showing you how to program with ggplot2.</p>
<p>To make your code more flexible, you need to reduce duplicated code by writing functions. When you notice you’re doing the same thing over and over again, think about how you might generalise it and turn it into a function. If you’re not that familiar with how functions work in R, you might want to brush up your knowledge at <a href="https://adv-r.hadley.nz/functions.html" class="uri">https://adv-r.hadley.nz/functions.html</a>.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">19.2.1 Exercises</h2>
<ol type="1">
<li>Create an object that represents a pink histogram with 100 bins.</li>
</ol>
<p>Answer: <code>pink_hist</code> applied to the price of <code>diamonds</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pink_hist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pink"</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-4">  pink_hist</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">pink_hist_ggs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pink"</span>,</span>
<span id="cb3-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-4">)</span></code></pre></div>
</div>
<p>Note: I think the intent here is to set <code>fill</code>, not <code>color</code>.</p>
<hr>
<ol start="2" type="1">
<li>Create an object that represents a fill scale with the Blues ColorBrewer palette.</li>
</ol>
<p>Answer: <code>blues</code> applied to a <code>geom_bar()</code> example:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">blues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_brewer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blues"</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_classic</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-6">  blues</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fill_blues <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_distiller</span>(</span>
<span id="cb5-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Blues"</span></span>
<span id="cb5-3">)</span></code></pre></div>
</div>
<p>Note that the documentation states:</p>
<blockquote class="blockquote">
<p>The <code>distiller</code> scales extend <code>brewer</code> scales by smoothly interpolating 7 colours from any palette to a continuous scale.</p>
</blockquote>
<hr>
<ol start="3" type="1">
<li>Read the source code for <code>theme_grey()</code>. What are its arguments? How does it work?</li>
</ol>
<p>Answer: <code>theme_grey()</code> has 4 arguments: <code>base_size</code>, <code>base_family</code>, <code>base_line_size</code>, and <code>base_rect_size</code>. It specifies a complete theme object, <code>t</code>, and uses the <code>%+replace%</code> function to modify an internal global, <code>ggplot_global$theme_all_null</code> using <code>t</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">theme_grey</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (base_size = 11, base_family = "", base_line_size = base_size/22, 
#&gt;     base_rect_size = base_size/22) 
#&gt; {
#&gt;     half_line &lt;- base_size/2
#&gt;     t &lt;- theme(line = element_line(colour = "black", linewidth = base_line_size, 
#&gt;         linetype = 1, lineend = "butt"), rect = element_rect(fill = "white", 
#&gt;         colour = "black", linewidth = base_rect_size, linetype = 1), 
#&gt;         text = element_text(family = base_family, face = "plain", 
#&gt;             colour = "black", size = base_size, lineheight = 0.9, 
#&gt;             hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(), 
#&gt;             debug = FALSE), axis.line = element_blank(), axis.line.x = NULL, 
#&gt;         axis.line.y = NULL, axis.text = element_text(size = rel(0.8), 
#&gt;             colour = "grey30"), axis.text.x = element_text(margin = margin(t = 0.8 * 
#&gt;             half_line/2), vjust = 1), axis.text.x.top = element_text(margin = margin(b = 0.8 * 
#&gt;             half_line/2), vjust = 0), axis.text.y = element_text(margin = margin(r = 0.8 * 
#&gt;             half_line/2), hjust = 1), axis.text.y.right = element_text(margin = margin(l = 0.8 * 
#&gt;             half_line/2), hjust = 0), axis.ticks = element_line(colour = "grey20"), 
#&gt;         axis.ticks.length = unit(half_line/2, "pt"), axis.ticks.length.x = NULL, 
#&gt;         axis.ticks.length.x.top = NULL, axis.ticks.length.x.bottom = NULL, 
#&gt;         axis.ticks.length.y = NULL, axis.ticks.length.y.left = NULL, 
#&gt;         axis.ticks.length.y.right = NULL, axis.title.x = element_text(margin = margin(t = half_line/2), 
#&gt;             vjust = 1), axis.title.x.top = element_text(margin = margin(b = half_line/2), 
#&gt;             vjust = 0), axis.title.y = element_text(angle = 90, 
#&gt;             margin = margin(r = half_line/2), vjust = 1), axis.title.y.right = element_text(angle = -90, 
#&gt;             margin = margin(l = half_line/2), vjust = 0), legend.background = element_rect(colour = NA), 
#&gt;         legend.spacing = unit(2 * half_line, "pt"), legend.spacing.x = NULL, 
#&gt;         legend.spacing.y = NULL, legend.margin = margin(half_line, 
#&gt;             half_line, half_line, half_line), legend.key = element_rect(fill = "grey95", 
#&gt;             colour = NA), legend.key.size = unit(1.2, "lines"), 
#&gt;         legend.key.height = NULL, legend.key.width = NULL, legend.text = element_text(size = rel(0.8)), 
#&gt;         legend.text.align = NULL, legend.title = element_text(hjust = 0), 
#&gt;         legend.title.align = NULL, legend.position = "right", 
#&gt;         legend.direction = NULL, legend.justification = "center", 
#&gt;         legend.box = NULL, legend.box.margin = margin(0, 0, 0, 
#&gt;             0, "cm"), legend.box.background = element_blank(), 
#&gt;         legend.box.spacing = unit(2 * half_line, "pt"), panel.background = element_rect(fill = "grey92", 
#&gt;             colour = NA), panel.border = element_blank(), panel.grid = element_line(colour = "white"), 
#&gt;         panel.grid.minor = element_line(linewidth = rel(0.5)), 
#&gt;         panel.spacing = unit(half_line, "pt"), panel.spacing.x = NULL, 
#&gt;         panel.spacing.y = NULL, panel.ontop = FALSE, strip.background = element_rect(fill = "grey85", 
#&gt;             colour = NA), strip.clip = "inherit", strip.text = element_text(colour = "grey10", 
#&gt;             size = rel(0.8), margin = margin(0.8 * half_line, 
#&gt;                 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)), 
#&gt;         strip.text.x = NULL, strip.text.y = element_text(angle = -90), 
#&gt;         strip.text.y.left = element_text(angle = 90), strip.placement = "inside", 
#&gt;         strip.placement.x = NULL, strip.placement.y = NULL, strip.switch.pad.grid = unit(half_line/2, 
#&gt;             "pt"), strip.switch.pad.wrap = unit(half_line/2, 
#&gt;             "pt"), plot.background = element_rect(colour = "white"), 
#&gt;         plot.title = element_text(size = rel(1.2), hjust = 0, 
#&gt;             vjust = 1, margin = margin(b = half_line)), plot.title.position = "panel", 
#&gt;         plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)), 
#&gt;         plot.caption = element_text(size = rel(0.8), hjust = 1, 
#&gt;             vjust = 1, margin = margin(t = half_line)), plot.caption.position = "panel", 
#&gt;         plot.tag = element_text(size = rel(1.2), hjust = 0.5, 
#&gt;             vjust = 0.5), plot.tag.position = "topleft", plot.margin = margin(half_line, 
#&gt;             half_line, half_line, half_line), complete = TRUE)
#&gt;     ggplot_global$theme_all_null %+replace% t
#&gt; }
#&gt; &lt;bytecode: 0x10e7e2418&gt;
#&gt; &lt;environment: namespace:ggplot2&gt;</code></pre>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>Its arguments include <code>base_size</code>, <code>base_family</code>, <code>base_line_size</code>, and <code>base_rect_size</code></li>
<li>According to the help file, <code>theme_gray()</code> is the signature ggplot2 theme with a grey background and white gridlines and is designed to put the data forward yet make comparisons easy.</li>
</ul>
<hr>
<ol start="4" type="1">
<li>Create <code>scale_colour_wesanderson()</code>. It should have a parameter to pick the palette from the wesanderson package, and create either a continuous or discrete scale.</li>
</ol>
<p>Answer: to construct this function, it is helpful to review the code for <code>scale_color_brewer()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">scale_color_brewer</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., type = "seq", palette = 1, direction = 1, aesthetics = "colour") 
#&gt; {
#&gt;     discrete_scale(aesthetics, "brewer", brewer_pal(type, palette, 
#&gt;         direction), ...)
#&gt; }
#&gt; &lt;bytecode: 0x10fc7d530&gt;
#&gt; &lt;environment: namespace:ggplot2&gt;</code></pre>
</div>
</div>
<p>The function is a wrapper for <code>discrete_scale()</code> and calls <code>scales::brewer_pal()</code>, which is a <a href="https://adv-r.hadley.nz/function-factories.html">function factory</a>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>brewer_pal</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (type = "seq", palette = 1, direction = 1) 
#&gt; {
#&gt;     pal &lt;- pal_name(palette, type)
#&gt;     force(direction)
#&gt;     function(n) {
#&gt;         if (n &lt; 3) {
#&gt;             pal &lt;- suppressWarnings(RColorBrewer::brewer.pal(n, 
#&gt;                 pal))
#&gt;         }
#&gt;         else {
#&gt;             pal &lt;- RColorBrewer::brewer.pal(n, pal)
#&gt;         }
#&gt;         pal &lt;- pal[seq_len(n)]
#&gt;         if (direction == -1) {
#&gt;             pal &lt;- rev(pal)
#&gt;         }
#&gt;         pal
#&gt;     }
#&gt; }
#&gt; &lt;bytecode: 0x107ef3810&gt;
#&gt; &lt;environment: namespace:scales&gt;</code></pre>
</div>
</div>
<p>First we construct a discrete scale, using <code>Darjeeling1</code> as the default:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">wesanderson_pal <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, type) {</span>
<span id="cb12-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n) {</span>
<span id="cb12-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wes_palette</span>(name, n, type)</span>
<span id="cb12-4">  }</span>
<span id="cb12-5">}</span>
<span id="cb12-6"></span>
<span id="cb12-7">scale_color_wesanderson_d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Darjeeling1"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"discrete"</span>,</span>
<span id="cb12-8">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aesthetics =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colour"</span>) {</span>
<span id="cb12-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discrete_scale</span>(aesthetics, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wesanderson_d"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wesanderson_pal</span>(name, type), ...)</span>
<span id="cb12-10">}</span></code></pre></div>
</div>
<p>Note that these functions are limited by the number of colors in each wesanderson palette (4-7), which will generate an error if more colors are requested. The <code>wesanderson_pal</code> function could be revised to auto-enable <code>continuous</code> or <code>scale_color_wesanderson_d()</code> can be called with <code>type = "continuous"</code>.</p>
<p>For a continuous scale, it is helpful to review the code of <code>scale_color_viridis_c()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">scale_color_viridis_c</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., alpha = 1, begin = 0, end = 1, direction = 1, 
#&gt;     option = "D", values = NULL, space = "Lab", na.value = "grey50", 
#&gt;     guide = "colourbar", aesthetics = "colour") 
#&gt; {
#&gt;     continuous_scale(aesthetics, "viridis_c", gradient_n_pal(viridis_pal(alpha, 
#&gt;         begin, end, direction, option)(6), values, space), na.value = na.value, 
#&gt;         guide = guide, ...)
#&gt; }
#&gt; &lt;bytecode: 0x11e49fe08&gt;
#&gt; &lt;environment: namespace:ggplot2&gt;</code></pre>
</div>
</div>
<p>We can add a continuous scale based using <code>Zissou1</code> as the default:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">scale_color_wesanderson_c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...,</span>
<span id="cb15-2">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zissou1"</span>,</span>
<span id="cb15-3">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continuous"</span>,</span>
<span id="cb15-4">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb15-5">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lab"</span>,</span>
<span id="cb15-6">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>,</span>
<span id="cb15-7">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colourbar"</span>,</span>
<span id="cb15-8">                                      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">aesthetics =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"colour"</span>) {</span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">continuous_scale</span>(</span>
<span id="cb15-10">    aesthetics, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wesanderson_c"</span>,</span>
<span id="cb15-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gradient_n_pal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wesanderson_pal</span>(name, type)(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(wes_palettes[[name]])), values, space),</span>
<span id="cb15-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.value =</span> na.value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">guide =</span> guide, ...</span>
<span id="cb15-13">  )</span>
<span id="cb15-14">}</span></code></pre></div>
</div>
<p><code>scale_colour_wesanderson_d()</code> applied to an <code>mpg</code> plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_wesanderson_d</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p><code>scale_colour_wesanderson_c()</code> applied to an <code>mpg</code> plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_wesanderson_c</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Notes: while the exercise calls for a single function, this breaks the normal conventions for ggplot2. Such a function could be written by combining <code>scale_colour_wesanderson_d()</code> and <code>scale_colour_wesanderson_c()</code>.</p>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">scale_colour_wesanderson <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">palette =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BottleRocket1"</span>, ...) {</span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> wesanderson<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wes_palette</span>(palette), ...)</span>
<span id="cb18-3">}</span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working example</span></span>
<span id="cb18-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, disp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(gear))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_wesanderson</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">19.3.4 Exercises</h2>
<ol type="1">
<li>To make the best use of space, many examples in this book hide the axes labels and legend. I’ve just copied-and-pasted the same code into multiple places, but it would make more sense to create a reusable function. What would that function look like?</li>
</ol>
<p>Answer: <code>hide_ll()</code> does this, demonstrated with an <code>mpg</code> plot.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">hide_ll <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>),</span>
<span id="cb19-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb19-5">  )</span>
<span id="cb19-6">}</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hide_ll</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">remove_labels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb20-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>,</span>
<span id="cb20-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb20-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>()</span>
<span id="cb20-5">)</span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Working Example</span></span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, disp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(gear))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-9">  remove_labels</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Note: the GG Solutions answer is more verbose, but uses only a single function call (theme).</p>
<hr>
<ol start="2" type="1">
<li>Extend the <code>borders()</code> function to also add <code>coord_quickmap()</code> to the plot.</li>
</ol>
<p>Answer: <code>borders_quickmap()</code> implemented and demonstrated using a <code>borders()</code> example. In this case, the function passes all <code>...</code> variables to <code>borders()</code> and none to <code>coord_quickmap()</code> which avoids the complexity of handling arguments for both functions.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">borders_quickmap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb21-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">borders</span>(...),</span>
<span id="cb21-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_quickmap</span>()</span>
<span id="cb21-5">  )</span>
<span id="cb21-6">}</span>
<span id="cb21-7"></span>
<span id="cb21-8">us.cities <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(capital <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(country.etc <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AK"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HI"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(long, lat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">borders_quickmap</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Note: because of the complexities, it’s unlikely I’d ever implement something like <a href="https://ggplot2-book.org/programming.html#additional-arguments">Additional arguments</a> - there are minimal gains compared to calling two functions with separate lists of parameters.</p>
<p>GG Solutions: Not sure.</p>
<hr>
<ol start="3" type="1">
<li>Look through your own code. What combinations of geoms or scales do you use all the time? How could you extract the pattern into a reusable function?</li>
</ol>
<p>Answer: a common pattern I use is <code>geom_smooth</code> with <code>lm</code> and <code>y ~ x</code>. An implementation of this using robust linear modeling from <code>MASS</code> is demonstrated below:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">geom_rlm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"smooth"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"identity"</span>, ...,</span>
<span id="cb22-2">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> MASS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>rlm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,</span>
<span id="cb22-3">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb22-4">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orientation =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>,</span>
<span id="cb22-5">                     <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb22-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(</span>
<span id="cb22-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> mapping, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> data, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stat =</span> stat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> position, ...,</span>
<span id="cb22-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> method, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> se, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">orientation =</span> orientation,</span>
<span id="cb22-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> show.legend, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit.aes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb22-10">  )</span>
<span id="cb22-11">}</span>
<span id="cb22-12"></span>
<span id="cb22-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rlm</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions: no answer.</p>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">19.4.2 Exercises</h2>
<ol type="1">
<li>Create a <code>distribution()</code> function specially designed for visualising continuous distributions. Allow the user to supply a dataset and the name of a variable to visualise. Let them choose between histograms, frequency polygons, and density plots. What other arguments might you want to include?</li>
</ol>
<p>Answer: code below. In this case, it is useful to include <code>binwidth</code> and <code>bins</code>, used in creating both histograms and frequency polygons, and <code>na.rm</code>, used in all three. Defaults to histogram.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">distribution <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(data, var, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogram"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb23-2">                         <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb23-3">  gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(data, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>({{ var }}))</span>
<span id="cb23-4"></span>
<span id="cb23-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"histogram"</span>) {</span>
<span id="cb23-6">    gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> binwidth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> bins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb23-7">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"freqpoly"</span>) {</span>
<span id="cb23-8">    gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_freqpoly</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> binwidth, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> bins, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb23-9">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (type <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span>) {</span>
<span id="cb23-10">    gg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> gg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> na.rm)</span>
<span id="cb23-11">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb23-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`type` must be histogram, freqpoly, or density"</span>)</span>
<span id="cb23-13">  }</span>
<span id="cb23-14">  gg</span>
<span id="cb23-15">}</span>
<span id="cb23-16"></span>
<span id="cb23-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distribution</span>(diamonds, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distribution</span>(diamonds, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"freqpoly"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-18-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">distribution</span>(diamonds, price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"density"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-18-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What additional arguments should <code>pcp()</code> take? What are the downsides of how <code>...</code> is used in the current code?</li>
</ol>
<p>Answer: it would be useful to add arguments for the order of the variables, and a scale adjustment for value, drawing from examples on <a href="https://en.wikipedia.org/wiki/Parallel_coordinates">Wikipedia</a>. Using <code>...</code> for <code>geom_line()</code> prevents other unnamed parameters from being passed to other functions, like <code>ggplot()</code>.</p>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">19.5.1 Exercises</h2>
<ol type="1">
<li>How could you add a <code>geom_point()</code> layer to each element of the following list?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">plots <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)),</span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)),</span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(faithfuld, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(waiting, eruptions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> density))</span>
<span id="cb26-5">)</span></code></pre></div>
</div>
<p>Answer: easily done with <code>lapply</code>()`:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(plots, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(g) g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; [[2]]</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-20-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; [[3]]</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-20-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What does the following function do? What’s a better name for it?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">mystery <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(...), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">accumulate =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb31-3">}</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mystery</span>(</span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(),</span>
<span id="cb31-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(),</span>
<span id="cb31-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xlab</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>),</span>
<span id="cb31-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ylab</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb31-11">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; [[2]]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-21-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; [[3]]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-21-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; [[4]]</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; `geom_smooth()` using method = 'loess' and formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5_files/figure-html/unnamed-chunk-21-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Answer: a better name would be ‘add layer and print’.</p>
<hr>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>ggplot2</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-5.html</guid>
  <pubDate>Sun, 18 Dec 2022 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2 (Grammar)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Grammar” chapters of <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a>, third edition, with comparisons to solutions from <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(MASS) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: unused_import_linter. Used for "rlm".</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jbplot)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggthemes)</span>
<span id="cb1-6"></span>
<span id="cb1-7">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-10">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a> and <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read the ggplot2 book and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="mastering-the-grammar" class="level1">
<h1>13 Mastering the grammar</h1>
<p>In order to unlock the full power of ggplot2, you’ll need to master the underlying grammar. By understanding the grammar, and how its components fit together, you can create a wider range of visualizations, combine multiple sources of data, and customise to your heart’s content.</p>
<p>This chapter describes the theoretical basis of ggplot2: the layered grammar of graphics. The layered grammar is based on Wilkinson’s grammar of graphics, but adds a number of enhancements that help it to be more expressive and fit seamlessly into the R environment. The differences between the layered grammar and Wilkinson’s grammar are described fully in Hadley Wickham. In this chapter you will learn a little bit about each component of the grammar and how they all fit together. The next chapters discuss the components in more detail, and provide more examples of how you can use them in practice.</p>
<p>The grammar makes it easier for you to iteratively update a plot, changing a single feature at a time. The grammar is also useful because it suggests the high-level aspects of a plot that <em>can</em> be changed, giving you a framework to think about graphics, and hopefully shortening the distance from mind to paper. It also encourages the use of graphics customised to a particular problem, rather than relying on specific chart types.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">13.5 Exercises</h2>
<ul>
<li>One of the best ways to get a handle on how the grammar works is to apply it to the analysis of existing graphics. For each of the graphics listed below, write down the components of the graphic. Don’t worry if you don’t know what the corresponding functions in ggplot2 are called (or if they even exist!), instead focussing on recording the key elements of a plot so you could communicate it to someone else.</li>
</ul>
<p>Answer: use the components from 13.4 to describe each plot: data, aesthetics (aes), stat, geom, scale, coordinate system (coord), and faceting</p>
<ol type="1">
<li>“Napoleon’s march” by Charles John Minard: <a href="http://www.datavis.ca/gallery/re-minard.php">link</a></li>
</ol>
<p>Answer: the plot describes Napolean’s 1812 campaign. Larger version at: <a href="https://en.wikipedia.org/wiki/Charles_Joseph_Minard#/media/File:Minard.png">Wikipedia</a></p>
<ul>
<li>data: the size, location and date of the army’s travel, along with temperature</li>
<li>aes: x, y mapped to location over time, with width representing size</li>
<li>stat: no transformation</li>
<li>geom: line</li>
<li>scale: scales are used for location and temperature</li>
<li>coord: Cartesian / map projection</li>
<li>facet: no faceting</li>
</ul>
<hr>
<ol start="2" type="1">
<li>“Where the Heat and the Thunder Hit Their Shots”, by Jeremy White, Joe Ward, and Matthew Ericson at The New York Times. <a href="https://archive.nytimes.com/www.nytimes.com/interactive/2012/06/11/sports/basketball/nba-shot-analysis.html?_r=0">link</a></li>
</ol>
<p>Answer: a plot of basketball shots and points scored.</p>
<ul>
<li>data: number of attempts and points scored by location</li>
<li>aes: x, y mapped to location, size mapped to attempts, color to points scored</li>
<li>stat: no transformation (possibly points per attempt)</li>
<li>geom: hex tiles</li>
<li>scale: continuous scales mapped to location, size (attempts), and color (points)</li>
<li>coord: Cartesian, mapped to the court</li>
<li>facet: faceting by team and players</li>
</ul>
<hr>
<ol start="3" type="1">
<li>“London Cycle Hire Journeys”, by James Cheshire. <a href="https://web.archive.org/web/20190523203409/http://spatialanalysis.co.uk/2012/02/great-maps-ggplot2/">link</a></li>
</ol>
<p>Answer: retrieved from <a href="https://web.archive.org/web/20210516232923/http://spatialanalysis.co.uk/wp-content/uploads/2012/02/bike_ggplot.png">archive.org</a>.</p>
<ul>
<li>data: travels of London bicycle rentals</li>
<li>aes: x, y mapped to location, density (alpha) mapped to number of trips in a location</li>
<li>stat: none</li>
<li>geom: line</li>
<li>scale: location</li>
<li>coord: Cartesian / map projection</li>
<li>facet: none</li>
</ul>
<hr>
<ol start="4" type="1">
<li>The Pew Research Center’s favorite data visualizations of 2014: <a href="https://www.pewresearch.org/short-reads/2014/12/29/our-favorite-pew-research-center-data-visualizations-from-2014/">link</a></li>
</ol>
<p>Answer: multiple plots, described individually.</p>
<p>Political Shifts</p>
<ul>
<li>data: responses to political values questions</li>
<li>aes: height showing volume of responses, between consistently liberal and conservative</li>
<li>stat: histogram</li>
<li>geom: area / frequency polygon, with color showing above / below median of the other party</li>
<li>scale: continuous</li>
<li>coord: Cartesian</li>
<li>facet: faceting by party by year</li>
</ul>
<p>Next America</p>
<ul>
<li>data: population by age group and gender</li>
<li>aes: binned data by age and gender</li>
<li>stat: none</li>
<li>geom: bar and color by gender, with boomers a distinct color</li>
<li>scale: continuous</li>
<li>coord: Cartesian</li>
<li>facet: faceting by year, animated</li>
</ul>
<p>“Murder Capitals”</p>
<ul>
<li>data: murder rate for six cities, with the highest rate shown for each year, national rate</li>
<li>aes: x is time (year) and y is the murder rate</li>
<li>stat: none</li>
<li>geom: bar, line</li>
<li>scale: city is additionally mapped to year at the top of the plot, and national rate is shown as a line across the bottom</li>
<li>coord: Cartesian</li>
<li>facet: none</li>
</ul>
<p>Ideological Placement of News Sources</p>
<ul>
<li>data: scores of responses to political values questions mapped to audiences for news sources</li>
<li>aes: x mapped to score for a news source audience</li>
<li>stat: none</li>
<li>geom: point</li>
<li>scale: a single (x-axis) continuous scale, with labels for each source</li>
<li>coord: Cartesian</li>
<li>facet: none</li>
</ul>
<p>Regional Support for Same-Sex Marriage</p>
<ul>
<li>data: percentage of population supporting same-sex marriage by region</li>
<li>aes: x mapped to time (year), y mapped to percent support</li>
<li>stat: none</li>
<li>geom: line</li>
<li>scale: continuous</li>
<li>coord: Cartesian</li>
<li>facet: faceting by region, national support is an additional layer</li>
</ul>
<hr>
<ol start="5" type="1">
<li>“The Tony’s Have Never Been so Dominated by Women”, by Joanna Kao at FiveThirtyEight: <a href="https://fivethirtyeight.com/features/the-tonys-have-never-been-so-dominated-by-women/">link</a>.</li>
</ol>
<p>Answer: a plot of Tony award winners by category.</p>
<ul>
<li>data: Tony award categories by year with at least one female winner</li>
<li>aes: categories along the y axis, years along the x axis, colored red if a female won</li>
<li>stat: none</li>
<li>geom: square points with color showing female winners</li>
<li>scale: discrete categories and years</li>
<li>coord: Cartesian</li>
<li>facet: none</li>
</ul>
<hr>
<ol start="6" type="1">
<li>“In Climbing Income Ladder, Location Matters” by the Mike Bostock, Shan Carter, Amanda Cox, Matthew Ericson, Josh Keller, Alicia Parlapiano, Kevin Quealy and Josh Williams at the New York Times: <a href="https://www.nytimes.com/2013/07/22/business/in-climbing-income-ladder-location-matters.html">link</a></li>
</ol>
<p>Answer: not visible due to paywall, unable to retrieve the graphic.</p>
<hr>
<ol start="7" type="1">
<li>“Dissecting a Trailer: The Parts of the Film That Make the Cut”, by Shan Carter, Amanda Cox, and Mike Bostock at the New York Times: <a href="https://archive.nytimes.com/www.nytimes.com/interactive/2013/02/19/movies/awardsseason/oscar-trailers.html">link</a></li>
</ol>
<p>Answer: multiple plots showing the sequencing of movie trailers.</p>
<ul>
<li>data: scenes in a trailer mapped to when they occurred in the full film</li>
<li>aes: x axis showing the timestamp of a trailer scene, y axis and color showing when the scene occurred, including scenes not in the final film</li>
<li>stat: none</li>
<li>geom: square points (with width per scene), connected by lines</li>
<li>scale: continuous duration (seconds)</li>
<li>coord: Cartesian</li>
<li>facet: faceting by trailer (all plots are mapped to the same scale)</li>
</ul>
<hr>
</section>
</section>
<section id="build-a-plot-layer-by-layer" class="level1">
<h1>14 Build a plot layer by layer</h1>
<p>One of the key ideas behind ggplot2 is that it allows you to easily iterate, building up a complex plot a layer at a time. Each layer can come from a different dataset and have a different aesthetic mapping, making it possible to create sophisticated plots that display data from multiple sources.</p>
<p>You’ve already created layers with functions like <code>geom_point()</code> and <code>geom_histogram()</code>. In this chapter, you’ll dive into the details of a layer, and how you can control all five components: data, the aesthetic mappings, the geom, stat, and position adjustments. The goal here is to give you the tools to build sophisticated plots tailored to the problem at hand.</p>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">14.3.1 Exercises</h2>
<ol type="1">
<li>The first two arguments to ggplot are <code>data</code> and <code>mapping</code>. The first two arguments to all layer functions are <code>mapping</code> and <code>data</code>. Why does the order of the arguments differ? (Hint: think about what you set most commonly.)</li>
</ol>
<p>Answer: most plots use common data for all layers, where the aesthetics are more likely to vary.</p>
<p>GG Solutions:</p>
<ul>
<li>Commonly, you first set the data in <code>ggplot()</code> and then set aesthetics inside your layer functions, like <code>geom_point()</code>, <code>geom_boxplot()</code>, or <code>geom_histogram()</code>.</li>
</ul>
<hr>
<ol start="2" type="1">
<li>The following code uses dplyr to generate some summary statistics about each class of car.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(class) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hwy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(hwy))</span></code></pre></div>
</div>
<pre><code>Use the data to recreate this plot:</code></pre>
<p>Answer: with some help from the source code to get the measurements right, here is the solution:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n = "</span>, n)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.35</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(</span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> class, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, hwy),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>,</span>
<span id="cb5-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb5-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> class, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> class, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n = "</span>, n)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>I plotted 3 different layers: jittered points, red point for the summary measure, mean, and text for the sample size (n).</li>
</ul>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">14.4.3 Exercises</h2>
<ol type="1">
<li>Simplify the following plot specifications:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>displ, mpg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cty), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy))</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(brainwt), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(bodywt)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> msleep)</span></code></pre></div>
</div>
<p>Answer:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(msleep, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(brainwt), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(bodywt))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions offers a similar solution for the first two and a strange solution for the third (since the <code>diamonds</code> data is never used in the third plot):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy))</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>()</span>
<span id="cb10-7"></span>
<span id="cb10-8">msleep_processed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> msleep <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb10-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">brainwt_log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(brainwt),</span>
<span id="cb10-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bodywt_log =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(bodywt)</span>
<span id="cb10-12">  )</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(brainwt_log, bodywt_log),</span>
<span id="cb10-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> msleep_processed</span>
<span id="cb10-17">  )</span></code></pre></div>
</div>
<p>Note: I prefer my answer to GG Solutions.</p>
<hr>
<ol start="2" type="1">
<li>What does the following code do? Does it work? Does it make sense? Why/why not?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(trans, hwy))</span></code></pre></div>
</div>
<p>Answer: it does work, but does not make sense, and should be done as separate plots so that the variables comparisons are visible:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(trans, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-8-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>It plots points of <code>class</code> vs <code>cty</code> and then a boxplot of <code>trans</code> vs <code>hwy</code>. It doesn’t make sense to plot layers with different <code>x</code> and <code>y</code> variables.</li>
</ul>
<hr>
<ol start="3" type="1">
<li>What happens if you try to use a continuous variable on the x axis in one layer, and a categorical variable in another layer? What happens if you do it in the opposite order?</li>
</ol>
<p>Answer: let’s experiment!</p>
<p>This code throws an error, <code>Error: Discrete value supplied to continuous scale</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, hwy), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span></code></pre></div>
</div>
<p>Reversing the order works, but draws a strange plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, hwy), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>Not sure</li>
</ul>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">14.5.1 Exercises</h2>
<ol type="1">
<li>Download and print out the ggplot2 cheatsheet from <a href="http://www.rstudio.com/resources/cheatsheets/">rstudio</a> so you have a handy visual reference for all the geoms.</li>
</ol>
<p>Answer: cheatsheets have moved to <a href="https://posit.co/resources/cheatsheets/">posit</a> (as the company rebranded).</p>
<hr>
<ol start="2" type="1">
<li>Look at the documentation for the graphical primitive geoms. Which aesthetics do they use? How can you summarise them in a compact form?</li>
</ol>
<p>Answer: from 14.5, the primitives are:</p>
<ul>
<li><code>geom_blank()</code>: no aesthetics, “draw nothing”</li>
<li><code>geom_point()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <code>alpha</code>, <code>color</code>, <code>fill</code>, <code>group</code>, <code>shape</code>, <code>size</code>, <code>stroke</code>, “draw points”</li>
<li><code>geom_path()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <code>alpha</code>, <code>color</code>, <code>group</code>, <code>linetype</code>, <code>linewidth</code>, “connect observations”</li>
<li><code>geom_ribbon()</code>: <strong><code>x</code> or <code>y</code></strong>, <strong><code>ymin</code> or <code>xmin</code></strong>, <strong><code>ymax</code> or <code>xmax</code></strong>, <code>alpha</code>, <code>color</code>, <code>fill</code>, <code>group</code>, <code>linetype</code>, <code>linewidth</code>, “draw an area along a line”</li>
<li><code>geom_segment()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <strong><code>xend</code></strong>, <strong><code>yend</code></strong>, <code>alpha</code>, <code>color</code>, <code>group</code>, <code>linetype</code>, <code>linewidth</code>, “connect two points”</li>
<li><code>geom_rect()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <code>alpha</code>, <code>color</code>, <code>fill</code>, <code>group</code>, <code>height</code>, <code>linetype</code>, <code>linewidth</code>, <code>width</code>, “draw rectangles”</li>
<li><code>geom_polygon()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <code>alpha</code>, <code>color</code>, <code>fill</code>, <code>group</code>, <code>linetype</code>, <code>linewidth</code>, <code>subgroup</code>, “draw polygons”</li>
<li><code>geom_text()</code>: <strong><code>x</code></strong>, <strong><code>y</code></strong>, <strong><code>label</code></strong>, <code>alpha</code>, <code>angle</code>, <code>color</code>, <code>family</code>, <code>fontface</code>, <code>group</code>, <code>hjust</code>, <code>lineheight</code>, <code>size</code>, <code>vjust</code>, “draw text”</li>
</ul>
<hr>
<ol start="3" type="1">
<li>What’s the best way to master an unfamiliar geom? List three resources to help you get started.</li>
</ol>
<p>Answer:</p>
<ul>
<li>R Documentation for ggplot2, either built-in or <a href="https://ggplot2.tidyverse.org">online</a></li>
<li>Posit <a href="https://posit.co/resources/cheatsheets/">cheatsheets</a></li>
<li>The <a href="https://r-graph-gallery.com">R Graph Gallery</a></li>
</ul>
<hr>
<ol start="4" type="1">
<li>For each of the plots below, identify the geom used to draw it.</li>
</ol>
<p>Answer: in the order they appear in the <a href="https://ggplot2-book.org/layers.html#exercises-11">Exercises</a>:</p>
<ol type="1">
<li><code>geom_violin</code></li>
<li><code>geom_point</code> (actually uses <code>geom_count</code>)</li>
<li><code>geom_hex</code></li>
<li><code>geom_point</code> (actually uses <code>geom_jitter</code>)</li>
<li><code>geom_area</code></li>
<li><code>geom_path</code></li>
</ol>
<p>Note: verifying my answers against the <a href="https://github.com/hadley/ggplot2-book/blob/main/layers.qmd">source code</a>, I got two wrong, although the underlying geom is <code>geom_point</code>.</p>
<p>GG Solutions:</p>
<p>Starting from top left, clockwise direction:</p>
<ul>
<li><code>geom_violin()</code>, <code>geom_point()</code>, <code>geom_point()</code>, <code>geom_path()</code>, <code>geom_area()</code>, <code>geom_hex()</code>.</li>
</ul>
<p>Note: GG Solutions makes the same mistakes I did.</p>
<hr>
<ol start="5" type="1">
<li><p>For each of the following problems, suggest a useful geom:</p>
<ul>
<li>Display how a variable has changed over time.</li>
<li>Show the detailed distribution of a single variable.</li>
<li>Focus attention on the overall trend in a large dataset.</li>
<li>Draw a map.</li>
<li>Label outlying points.</li>
</ul></li>
</ol>
<p>Answers below:</p>
<ul>
<li>Display how a variable has changed over time: <code>geom_line</code>, with time on the x axis, or <code>geom_path</code> to show changes in two dimensions over time.</li>
<li>Show the detailed distribution of a single variable: one of the distribution plots, <code>geom_histogram</code> and <code>geom_dotplot</code> are good choices.</li>
<li>Focus attention on the overall trend in a large dataset: <code>geom_smooth</code>.</li>
<li>Draw a map: <code>geom_map</code> or its successor, <code>geom_sf</code>.</li>
<li>Label outlying points: <code>geom_text</code> or <code>geom_label</code>.</li>
</ul>
<hr>
</section>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">14.6.2 Exercises</h2>
<ol type="1">
<li>The code below creates a similar dataset to <code>stat_smooth()</code>. Use the appropriate geoms to mimic the default <code>geom_smooth()</code> display.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">loess</span>(hwy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg)</span>
<span id="cb16-2">smoothed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">displ =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))</span>
<span id="cb16-3">pred <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predict</span>(mod, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">newdata =</span> smoothed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb16-4">smoothed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fit</span>
<span id="cb16-5">smoothed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy_lwr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>se.fit</span>
<span id="cb16-6">smoothed<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>hwy_upr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fit <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.96</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>se.fit</span></code></pre></div>
</div>
<p>Answer: the exercise is to replicate <code>geom_smooth</code> using the <code>smoothed</code> data frame, which includes a line and a ribbon:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> smoothed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> hwy_lwr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> hwy_upr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> smoothed, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-12-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>A perfect match!</p>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">smoothed <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dodgerblue1"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_ribbon</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> hwy_lwr, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> hwy_upr), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What stats were used to create the following plots?</li>
</ol>
<p>Answer: in the order they appear in the <a href="https://ggplot2-book.org/layers.html#exercises-12">Exercises</a>:</p>
<ol type="1">
<li><code>stat_ecdf</code></li>
<li><code>stat_qq</code></li>
<li><code>stat_density</code></li>
</ol>
<p>Confirmed correct by reviewing the <a href="https://github.com/hadley/ggplot2-book/blob/main/layers.qmd">source code</a>.</p>
<p>GG Solutions: From left to right,</p>
<p><code>stat_ecdf()</code>, <code>stat_qq()</code>, <code>stat_function()</code></p>
<hr>
<ol start="3" type="1">
<li>Read the help for <code>stat_sum()</code> then use <code>geom_count()</code> to create a plot that shows the proportion of cars that have each combination of <code>drv</code> and <code>trans</code>.</li>
</ol>
<p>Answer: in addition, facet by year.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, trans)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_count</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(prop), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_percent</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Combinations of drive train and transmissions"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"% of cars"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, trans)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_count</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(prop), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
</section>
<section id="exercises-5" class="level2">
<h2 class="anchored" data-anchor-id="exercises-5">14.7.1 Exercises</h2>
<ol type="1">
<li>When might you use <code>position_nudge()</code>? Read the documentation.</li>
</ol>
<p>Answer: as the documentation states, “Nudging is built in to <code>geom_text()</code> because it’s so useful for moving labels a small distance from what they’re labelling.”</p>
<p>GG Solutions: According to the help page, <code>position_nudge()</code> is generally useful for adjusting the position of items on discrete scales by a small amount. Nudging is built in to geom_text() because it’s so useful for moving labels a small distance from what they’re labelling.</p>
<hr>
<ol start="2" type="1">
<li>Many position adjustments can only be used with a few geoms. For example, you can’t stack boxplots or errors bars. Why not? What properties must a geom possess in order to be stackable? What properties must it possess to be dodgeable?</li>
</ol>
<p>Answer: reading the docs, <code>position_stack()</code> requires that geoms have a position (points, lines, text) or a dimension (bar, area). Boxplots and error bars can’t be stacked since they don’t have a position or area. A geom must have a width in order to be dodgeable, which can be set with <code>position_dodge(width = ...)</code>.</p>
<p>GG Solutions: Not sure</p>
<hr>
<ol start="3" type="1">
<li>Why might you use <code>geom_jitter()</code> instead of <code>geom_count()</code>? What are the advantages and disadvantages of each technique?</li>
</ol>
<p>Answer: <code>geom_jitter()</code> preserves the size and number of points but not position, and <code>geom_count()</code> preserves the position but not number or size. <code>geom_jitter()</code> can be a better choice when there are few overlapping points.</p>
<p>GG Solutions: <code>geom_jitter()</code> adds a small amount of random variation to the location of each point. It is useful for looking at all the overplotted points. On the other hand, <code>geom_count()</code> counts the number of overlapping observations at each location. It is useful for understanding the number of points in a location.</p>
<hr>
<ol start="4" type="1">
<li>When might you use a stacked area plot? What are the advantages and disadvantages compared to a line plot?</li>
</ol>
<p>Answer: a stacked area plot is a good way to show the relationship of related variables, showing how parts of a whole change over time, for example, plotting the phases of incident response (mean time to detect, mean time to resolve). It is very similar to a line plot, and makes relative values (proportions) easier to compare and absolute values harder to compare.</p>
<p>GG Solutions: Stacked area plot seems useful when you want to portray an area whereas a line plot seems useful when you just need a line.</p>
<hr>
</section>
</section>
<section id="scales-and-guides" class="level1">
<h1>15 Scales and guides</h1>
<p>The scales toolbox in Chapters 10 to 12 provides extensive guidance for how to work with scales, focusing on solving common data visualisation problems. The practical goals of the toolbox mean that topics are introduced when they are most relevant: for example, scale transformations are discussed in relation to continuous position scales (Section 10.1.7) because that is the most common situation in which you might want to transform a scale. However, because ggplot2 aims to provide a grammar of graphics, there is nothing preventing you from transforming other kinds of scales (see Section 15.6). This chapter aims to illustrate these concepts: I’ll discuss the theory underpinning scales and guides, and give examples showing how concepts that I’ve discussed specifically for position or colour scales also apply elsewhere.</p>
<section id="setting-color-with-limits" class="level2">
<h2 class="anchored" data-anchor-id="setting-color-with-limits">Setting color with limits</h2>
<p>Let’s create a pair of plots controlling color with limits (from 11.3.5)! First, we’ll just plot both independently:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">gg_99 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb22-5"></span>
<span id="cb22-6">gg_08 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb22-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> fl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb22-10"></span>
<span id="cb22-11">gg_99</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">gg_08</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-16-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Now, let’s replot using limits:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">gg_99 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(</span>
<span id="cb24-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb24-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb24-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diesel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regular"</span>)</span>
<span id="cb24-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">gg_08 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(</span>
<span id="cb25-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb25-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compressed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diesel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ethanol"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regular"</span>)</span>
<span id="cb25-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-17-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="key-glyphs" class="level2">
<h2 class="anchored" data-anchor-id="key-glyphs">Key glyphs</h2>
<p>Let’s use a key glyph! (<code>draw_key_timeseries()</code>)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(economics, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, psavert, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Personal</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Savings</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Rate"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">key_glyph =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timeseries"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="coordinate-systems" class="level1">
<h1>16 Coordinate systems</h1>
<p>Coordinate systems have two main jobs:</p>
<ul>
<li><p>Combine the two position aesthetics to produce a 2d position on the plot. The position aesthetics are called <code>x</code> and <code>y</code>, but they might be better called position 1 and 2 because their meaning depends on the coordinate system used. For example, with the polar coordinate system they become angle and radius (or radius and angle), and with maps they become latitude and longitude.</p></li>
<li><p>In coordination with the faceter, coordinate systems draw axes and panel backgrounds. While the scales control the values that appear on the axes, and how they map from data to position, it is the coordinate system which actually draws them. This is because their appearance depends on the coordinate system: an angle axis looks quite different than an x axis.</p></li>
</ul>
<section id="polar-coordinates" class="level2">
<h2 class="anchored" data-anchor-id="polar-coordinates">Polar coordinates</h2>
<p>Let’s draw a spiral with polar coordinates!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>We can use polar coordinates to draw a pie chart:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(cyl))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_polar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of cylinders"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_void</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="faceting" class="level1">
<h1>17 Faceting</h1>
<p>You first encountered faceting in Section 2.5. Faceting generates small multiples each showing a different subset of the data. Small multiples are a powerful tool for exploratory data analysis: you can rapidly compare patterns in different parts of the data and see whether they are the same or different. This section will discuss how you can fine-tune facets, particularly the way in which they interact with position scales.</p>
<section id="facet-grid" class="level2">
<h2 class="anchored" data-anchor-id="facet-grid">Facet grid</h2>
<p>Let’s draw a facet grid!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(drv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> cyl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="free-scales" class="level2">
<h2 class="anchored" data-anchor-id="free-scales">Free scales</h2>
<p>Free scales are useful when faceting across different variables over the same time period:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(economics_long, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, value)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>variable, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free_y"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="facet-space" class="level2">
<h2 class="anchored" data-anchor-id="facet-space">Facet space</h2>
<p><code>facet_grid()</code> has an additional parameter called <code>space</code>, which takes the same values as <code>scales</code>. When space is “free”, each column (or row) will have width (or height) proportional to the range of the scale for that column (or row). This makes the scaling equal across the whole plot: 1 cm on each panel maps to the same range of data. (This is somewhat analogous to the ‘sliced’ axis limits of lattice.) For example, if panel a had range 2 and panel b had range 4, one-third of the space would be given to a, and two-thirds to b. This is most useful for categorical scales, where we can assign space proportionally based on the number of levels in each facet, as illustrated below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">mpg2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(mpg, cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> drv <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> class <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2seater"</span>)</span>
<span id="cb31-2">mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>model, mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cty)</span>
<span id="cb31-3">mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>manufacturer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>manufacturer, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>mpg2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cty)</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, model)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(manufacturer <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">space =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">strip.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="grouping-and-faceting" class="level2">
<h2 class="anchored" data-anchor-id="grouping-and-faceting">Grouping and faceting</h2>
<p>Let’s combine grouping and faceting!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mpg, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>drv), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey75"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>drv)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="exercises-6" class="level2">
<h2 class="anchored" data-anchor-id="exercises-6">17.7 Exercises</h2>
<ol type="1">
<li>Diamonds: display the distribution of price conditional on cut and carat. Try faceting by cut and grouping by carat. Try faceting by carat and grouping by cut. Which do you prefer?</li>
</ol>
<p>Answer: faceting by caret requires discretizing, here we use <code>cut_number()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_c</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>cut)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-25-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">carat_n =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cut_number</span>(carat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> cut)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>carat_n)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-25-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Faceting by cut seems preferable, since it provides an insight not provided by faceting by carat: there are more large carat diamonds with a Fair cut.</p>
<p>GG Solutions: takes a different approach, and concludes: “It makes more sense to facet by cut because its a discrete variable. Faceting by carat, a continuous variable, makes too many facets and renders the plot unreadable!”</p>
<hr>
<ol start="2" type="1">
<li>Diamonds: compare the relationship between price and carat for each colour. What makes it hard to compare the groups? Is grouping better or faceting? If you use faceting, what annotation might you add to make it easier to see the differences between panels?</li>
</ol>
<p>Answer: comparing is hard because of overlap between groups and overplotting. Overall, grouping seems easier to read than faceting. Adding a reference line (in this case, a robust linear regression) makes it easier to see differences across faceting panels.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> color)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>price)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-26-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> color)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(diamonds, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>color), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_cartesian</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(diamonds<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>price))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>color)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-26-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> color))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-27-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> color)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>color)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-27-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>I think its better to use grouping to compare the different colors. The panels all have the same shape, so it’s hard to compare the groups across facets. If I use faceting, I’d add that the plot is facetted by diamond colour, from D (best) to J (worst).</li>
</ul>
<hr>
<ol start="3" type="1">
<li>Why is <code>facet_wrap()</code> generally more useful than <code>facet_grid()</code>?</li>
</ol>
<p>Answer: when faceting by a single variable, <code>facet_wrap()</code> is easier to use as it wraps the facets to fit the plot space automatically. <code>facet_grid()</code> is generally more useful only when faceting with two variables.</p>
<p>GG Solutions: I think <code>facet_wrap()</code> is more useful than <code>facet_grid()</code> because the former function is useful if you have a single variable with many levels and want to arrange the plots in a more space efficient manner. In data analysis, its extremely common to have a single variable with many levels that the analyst wants to arrange the for easy comparison. Although <code>facet_grid()</code> works on single variables, <code>facet_wrap()</code> involves less typing when you have a single variable.</p>
<hr>
<ol start="4" type="1">
<li>Recreate the following plot. It facets <code>mpg2</code> by class, overlaying a smooth curve fit to the full dataset.</li>
</ol>
<p>Answer: plot below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(mpg2, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>class), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>class)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Comparing to the <a href="https://github.com/hadley/ggplot2-book/blob/main/facet.qmd">source code</a>, the answer is correct!</p>
<p>GG Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">mpg2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mpg2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>class), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">se =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>class)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; `geom_smooth()` using formula = 'y ~ x'</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-29-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
</section>
</section>
<section id="themes" class="level1">
<h1>18 Themes</h1>
<p>In this chapter you will learn how to use the ggplot2 theme system, which allows you to exercise fine control over the non-data elements of your plot. The theme system does not affect how the data is rendered by geoms, or how it is transformed by scales. Themes don’t change the perceptual properties of the plot, but they do help you make the plot aesthetically pleasing or match an existing style guide. Themes give you control over things like fonts, ticks, panel strips, and backgrounds.</p>
<p>This separation of control into data and non-data parts is quite different from base and lattice graphics. In base and lattice graphics, most functions take a large number of arguments that specify both data and non-data appearance, which makes the functions complicated and harder to learn. ggplot2 takes a different approach: when creating the plot you determine how the data is displayed, then <em>after</em> it has been created you can edit every detail of the rendering, using the theming system.</p>
<section id="exercises-7" class="level2">
<h2 class="anchored" data-anchor-id="exercises-7">18.2.1 Exercises</h2>
<ol type="1">
<li>Try out all the themes in ggthemes. Which do you like the best?</li>
</ol>
<p>Answer: the “interesting” themes are displayed below. From the top four, I’d pick <code>theme_solarized_2()</code>, although <code>theme_fivethirtyeight()</code> is a close runner-up.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(cyl))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(</span>
<span id="cb42-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuel economy declines as engine size increases"</span>,</span>
<span id="cb42-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1999-2008"</span>,</span>
<span id="cb42-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">caption =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Data from https://fueleconomy.gov/"</span>,</span>
<span id="cb42-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Displacement (liters)"</span>,</span>
<span id="cb42-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Miles per gallon (highway)"</span>,</span>
<span id="cb42-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cylinders"</span></span>
<span id="cb42-11">  )</span>
<span id="cb42-12"></span>
<span id="cb42-13">base</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-30-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_calc</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-30-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_fivethirtyeight</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-30-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_hc</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-30-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_solarized_2</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-30-5.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What aspects of the default theme do you like? What don’t you like?<br>
What would you change?</li>
</ol>
<p>Answer: my personal theme, <code>theme_quo()</code> uses a white background with light gray gridlines (based on <code>theme_minimal()</code>), bold titles, captions left-adjusted, and a better font, <a href="https://www.latofonts.com">Lato</a>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-31-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Look at the plots in your favourite scientific journal. What theme do they most resemble? What are the main differences?</li>
</ol>
<p>Answer: the plots from <a href="https://doi.org/10.1016/j.ssci.2018.07.021">this paper</a> on <em>Safety Science</em> most closely resemble <code>theme_classic()</code>, with few differences, the most notable being the position of the legend in Figures 4, 5, 8, and 9.</p>
<hr>
</section>
<section id="exercises-8" class="level2">
<h2 class="anchored" data-anchor-id="exercises-8">18.4.6 Exercises</h2>
<ol type="1">
<li>Create the ugliest plot possible! (Contributed by Andrew D. Steen, University of Tennessee - Knoxville)</li>
</ol>
<p>Answer: using the same base, alter colors and theme settings, must still be legible:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loess"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"limegreen"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_grey</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comic Sans MS"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb48-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"skyblue"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>),</span>
<span id="cb48-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">face =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bold"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>),</span>
<span id="cb48-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.subtitle =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>),</span>
<span id="cb48-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.caption =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>),</span>
<span id="cb48-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.margin =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">margin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb48-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.line =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"maroon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dotdash"</span>),</span>
<span id="cb48-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hotpink"</span>),</span>
<span id="cb48-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>),</span>
<span id="cb48-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lemonchiffon"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray50"</span>),</span>
<span id="cb48-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.key =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pink"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb48-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>),</span>
<span id="cb48-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deeppink"</span>),</span>
<span id="cb48-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lavender"</span>),</span>
<span id="cb48-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linetype =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"twodash"</span>)</span>
<span id="cb48-19">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_excel</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-32-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li><code>theme_dark()</code> makes the inside of the plot dark, but not the outside. Change the plot background to black, and then update the text settings so you can still read the labels.</li>
</ol>
<p>Answer:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_dark</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb49-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb49-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>),</span>
<span id="cb49-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray50"</span>)</span>
<span id="cb49-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-33-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Make an elegant theme that uses “linen” as the background colour and a serif font for the text.</li>
</ol>
<p>Answer:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Georgia"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb50-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb50-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.background =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_rect</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"linen"</span>),</span>
<span id="cb50-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.major =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray85"</span>),</span>
<span id="cb50-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid.minor =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray90"</span>)</span>
<span id="cb50-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-34-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>Systematically explore the effects of <code>hjust</code> when you have a multiline title. Why doesn’t <code>vjust</code> do anything?</li>
</ol>
<p>Answer: with multiline titles, <code>hjust</code> affects both lines in the same way, between left justified (0), centered (0.5), and right justified (1). <code>vjust</code> does slightly alter the vertical justification, but not significantly since two lines are just within the vertical margins.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">multi <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb51-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Fuel economy declines as engine size increases</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1999-2008"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">subtitle =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb51-3"></span>
<span id="cb51-4">multi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-35-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">multi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-35-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">multi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-35-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">multi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-35-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1">multi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">plot.title =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_text</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4_files/figure-html/unnamed-chunk-35-5.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>ggplot2</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-4.html</guid>
  <pubDate>Fri, 09 Dec 2022 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2 (Scales)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Scales” chapters of <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a>, third edition, with comparisons to solutions from <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jbplot)</span>
<span id="cb1-4"></span>
<span id="cb1-5">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a> and <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read the ggplot2 book and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="position-scales-and-axes" class="level1">
<h1>10 Position scales and axes</h1>
<p>Position scales are used to control the locations of visual entities in a plot, and how those locations are mapped to data values. Every plot has two position scales, corresponding to the x and y aesthetics. In most cases this is clear in the plot specification, because the user explicitly specifies the variables mapped to x and y explicitly. However, this is not always the case. Consider this plot specification:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>()</span></code></pre></div>
</div>
<p>In this example the y aesthetic is not specified by the user. Rather, the aesthetic is mapped to a computed variable: <code>geom_histogram()</code> computes a <code>count</code> variable that gets mapped to the y aesthetic. The default behaviour of <code>geom_histogram()</code> is equivalent to the following:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> displ, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>()</span></code></pre></div>
</div>
<p>Because position scales are used in every plot, it is useful to understand how they work and how they can be modified.</p>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>The goal of <code>label_date_short()</code> is to automatically construct short labels that are sufficient to uniquely identify the dates:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(economics, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, psavert)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2004-01-01"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2005-01-01"</span>)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_date_short</span>())</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Let’s create a plot with rotated labels!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(manufacturer, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_axis</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">angle =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="colour-scales-and-legends" class="level1">
<h1>11 Colour scales and legends</h1>
<p>A comparison of different color scales:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">erupt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(faithfuld, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(waiting, eruptions, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> density)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">expand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7">erupt</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_viridis_c</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_viridis_c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">option =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magma"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<section id="missing-values" class="level2">
<h2 class="anchored" data-anchor-id="missing-values">Missing values</h2>
<p>All continuous colour scales have an <code>na.value</code> parameter that controls what colour is used for missing values (including values outside the range of the scale limits). By default it is set to grey, which will stand out when you use a colourful scale. If you use a black and white scale, you might want to set it to something else to make it more obvious. You can set <code>na.value = NA</code> to make missing values invisible, or choose a specific colour if you prefer:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb9-2">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_tile</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb9-6">base</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradient</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.value =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_gradient</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.value =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-6-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="limits-breaks-and-labels" class="level2">
<h2 class="anchored" data-anchor-id="limits-breaks-and-labels">Limits, breaks, and labels</h2>
<p>Scale limits for discrete colour scales can be set using the <code>limits</code> argument to the scale argument, or by using the <code>lims()</code> helper function. This can be important when the same variable is represented in different plots, and you want to ensure that the colours are consistent across plots. To demonstrate this I’ll extend the example from Section 10.1.1. Colour represents the fuel type, which can be <strong>r</strong>egular, <strong>e</strong>thanol, <strong>d</strong>iesel, <strong>p</strong>remium or <strong>c</strong>ompressed natural gas.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mpg_99 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1999</span>)</span>
<span id="cb12-2">mpg_08 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(year <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2008</span>)</span>
<span id="cb12-3">base_99 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg_99, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> fl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb12-5">base_08 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg_08, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> fl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb12-7">base_99</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">base_08</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-7-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Each plot makes sense on its own, but visual comparison between the two is difficult. The axis limits are different, and because only regular, premium and diesel fuels are represented in the 1998 data the colours are mapped inconsistently. To ensure a consistent mapping for the colour aesthetic, we can use <code>lims()</code> to manually set the limits. As discussed in Section 10.1.1 it takes name-value pairs as input, where the name specifies the aesthetic and the value specifies the limits:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">base_99 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">base_08 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-8-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>The nice thing about <code>lims()</code> is that we can set the limits for multiple aesthetics at once. To ensure that x, y, and colour all use consistent limits we can do this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">base_99 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(</span>
<span id="cb16-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb16-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>),</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb16-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">base_08 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(</span>
<span id="cb17-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>),</span>
<span id="cb17-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>),</span>
<span id="cb17-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>)</span>
<span id="cb17-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-9-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>There are two potential limitations to these plots. First, while setting the scale limits does ensure that colours are mapped identically in both plots, it also means that the plot for the 1999 data displays labels for all five fuel types, despite the fact that ethanol and compressed natural gas fuels were not in use at that time. We can address this by manually setting the scale breaks, ensuring that only those fuel types that appear in the data are shown in the legend. The second limitation is that the labels are not particularly helpful, which we can address by specifying them manually. When setting multiple properties of a single scale, it can be more useful to customise using the arguments to the scale function rather than using the <code>lims()</code> helper function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">base_99 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(</span>
<span id="cb18-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb18-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb18-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diesel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regular"</span>)</span>
<span id="cb18-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>However, there is nothing stopping you from using <code>lims()</code> to control the position aesthetic limits, while using <code>scale_colour_discrete()</code> to exercise more fine-grained control over the colour aesthetic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">base_99 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(</span>
<span id="cb19-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb19-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb19-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diesel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regular"</span>)</span>
<span id="cb19-7">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">base_08 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lims</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_discrete</span>(</span>
<span id="cb20-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>),</span>
<span id="cb20-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"compressed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"diesel"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ethanol"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"premium"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"regular"</span>)</span>
<span id="cb20-6">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-11-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="legends" class="level2">
<h2 class="anchored" data-anchor-id="legends">Legends</h2>
<ul>
<li><code>override.aes</code> is useful when you want the elements in the legend display differently to the geoms in the plot. This is often required when you’ve used transparency or size to deal with moderate overplotting and also used colour in the plot.</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stroke =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>())</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guide_legend</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">override.aes =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-12-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="binned-colour" class="level2">
<h2 class="anchored" data-anchor-id="binned-colour">Binned colour scales</h2>
<p>Colour scales also come in binned versions. The default scale is <code>scale_fill_binned()</code> which in turn defaults to <code>scale_fill_steps()</code>. As with the binned position scales discussed in Section 10.4 these scales have an <code>n.breaks</code> argument that controls the number of discrete colour categories created by the scale. Counterintuitively—because the human visual system is very good at detecting edges—this can sometimes make a continuous colour gradient easier to perceive:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_binned</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_steps</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-13-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_steps</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-13-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>The viridis palettes can be used in the same way, by calling the palette generating functions directly when specifying the <code>colours</code> argument to <code>scale_fill_stepsn()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_stepsn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> viridis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">viridis</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_stepsn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> viridis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">magma</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-14-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">erupt <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_stepsn</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n.breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colours =</span> viridis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inferno</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-14-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="other-aesthetics" class="level1">
<h1>12 Other aesthetics</h1>
<p>In addition to position and colour, there are several other aesthetics that ggplot2 can use to represent data.</p>
<section id="size" class="level2">
<h2 class="anchored" data-anchor-id="size">Size</h2>
<p>The size aesthetic is typically used to scale points and text. The default scale for size aesthetics is <code>scale_size()</code> in which a linear increase in the variable is mapped onto a linear increase in the area (not the radius) of the geom. Scaling as a function of area is a sensible default as human perception of size is more closely mimicked by area scaling than by radius scaling. By default the smallest value in the data (more precisely in the scale limits) is mapped to a size of 1 and the largest is mapped to a size of 6. The <code>range</code> argument allows you to scale the size of the geoms:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span>
<span id="cb29-3">base</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">base <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_size</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-15-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Let’s draw a scale model of the planets!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">planets <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb31-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mercury"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Venus"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Earth"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jupiter"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Saturn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Uranus"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Neptune"</span>),</span>
<span id="cb31-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Inner"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Outer"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)),</span>
<span id="cb31-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">position =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb31-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">radius =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2440</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6052</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6378</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3390</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">71400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60330</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25559</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24764</span>),</span>
<span id="cb31-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb31-7">)</span>
<span id="cb31-8">planets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(planets, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(name, name))</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(planets, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> radius)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_radius</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">range =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Radius"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The planets of the solar system"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="manual-scales" class="level2">
<h2 class="anchored" data-anchor-id="manual-scales">Manual scales</h2>
<p>Let’s create a plot with manual scales:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1">huron <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1972</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">level =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(LakeHuron))</span>
<span id="cb32-2"></span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(huron, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> level <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"above"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> level <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"below"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_colour_manual</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Direction"</span>,</span>
<span id="cb32-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">above =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">below =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span>
<span id="cb32-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="identity-scales" class="level2">
<h2 class="anchored" data-anchor-id="identity-scales">Identity scales</h2>
<p>Let’s plot all the R colors!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(luv_colours, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(u, v)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> col), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_identity</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_equal</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>ggplot2</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-3.html</guid>
  <pubDate>Sat, 03 Dec 2022 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2 (Getting started)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Getting started” chapters of <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a>, third edition, with comparisons to solutions from <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(modelr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jbplot)</span>
<span id="cb1-5"></span>
<span id="cb1-6">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-9">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a> and <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read the ggplot2 book and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="first-steps" class="level1">
<h1>2 First steps</h1>
<p>The goal of this chapter is to teach you how to produce useful graphics with ggplot2 as quickly as possible. You’ll learn the basics of ggplot() along with some useful “recipes” to make the most important plots. ggplot() allows you to make complex plots with just a few lines of code because it’s based on a rich underlying theory, the grammar of graphics. Here we’ll skip the theory and focus on the practice, and in later chapters you’ll learn how to use the full expressive power of the grammar.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">2.2.1 Exercises</h2>
<ol type="1">
<li>List five functions that you could use to get more information about the <code>mpg</code> dataset.</li>
</ol>
<p>Answer:</p>
<p>Five common base R functions I use to interrogate dataframes are:</p>
<ol type="1">
<li><code>summary()</code></li>
<li><code>hist()</code></li>
<li><code>plot()</code></li>
<li><code>lm()</code></li>
<li><code>View()</code></li>
</ol>
<p>GG Solutions:</p>
<ul>
<li><code>help(mpg)</code>: Documentation of dataset</li>
<li><code>dim(mpg)</code>: Dimensions of dataset</li>
<li><code>summary(mpg)</code>: Summary measures of dataset</li>
<li><code>str(mpg)</code>: Display of the internal structure of dataset</li>
<li><code>glimpse(mpg)</code>: <code>dplyr</code> version of <code>str(mpg)</code></li>
</ul>
<hr>
<ol start="2" type="1">
<li>How can you find out what other datasets are included with ggplot2?</li>
</ol>
<p>Answer: use <code>data(package = "ggplot2")</code>, which returns the following:</p>
<pre><code>Data sets in package ‘ggplot2’:

diamonds                      Prices of over 50,000 round cut diamonds
economics                     US economic time series
economics_long                US economic time series
faithfuld                     2d density estimate of Old Faithful data
luv_colours                   'colors()' in Luv space
midwest                       Midwest demographics
mpg                           Fuel economy data from 1999 to 2008 for 38 popular models of
                              cars
msleep                        An updated and expanded version of the mammals sleep dataset
presidential                  Terms of 12 presidents from Eisenhower to Trump
seals                         Vector field of seal movements
txhousing                     Housing sales in TX</code></pre>
<p>GG Solutions:</p>
<p><code>data(package = "ggplot2")</code> loads the available data sets in ggplot2. Alternatively,if you have internet access, go to https://ggplot2.tidyverse.org/reference/index.html#section-data</p>
<hr>
<ol start="3" type="1">
<li>Apart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert <code>cty</code> and <code>hwy</code> into the European standard of l/100km?</li>
</ol>
<p>Answer: to convert miles/gallon to liters/100km, we use the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7Bmiles/gallon%7D%20%5Ctimes%20%5Cfrac%7B3.78541%7D%7B1.609344%20%5Cdiv%20100%7D%20=%20l/100km"></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">mpg_l100km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb3-2">  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.78541</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.609344</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb3-3">}</span>
<span id="cb3-4"></span>
<span id="cb3-5">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cty =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mpg_l100km</span>(cty), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hwy =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mpg_l100km</span>(hwy))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 234 × 11
#&gt;    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class
#&gt;    &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;
#&gt;  1 audi         a4           1.8  1999     4 auto… f      13.1  8.11 p     comp…
#&gt;  2 audi         a4           1.8  1999     4 manu… f      11.2  8.11 p     comp…
#&gt;  3 audi         a4           2    2008     4 manu… f      11.8  7.59 p     comp…
#&gt;  4 audi         a4           2    2008     4 auto… f      11.2  7.84 p     comp…
#&gt;  5 audi         a4           2.8  1999     6 auto… f      14.7  9.05 p     comp…
#&gt;  6 audi         a4           2.8  1999     6 manu… f      13.1  9.05 p     comp…
#&gt;  7 audi         a4           3.1  2008     6 auto… f      13.1  8.71 p     comp…
#&gt;  8 audi         a4 quattro   1.8  1999     4 manu… 4      13.1  9.05 p     comp…
#&gt;  9 audi         a4 quattro   1.8  1999     4 auto… 4      14.7  9.41 p     comp…
#&gt; 10 audi         a4 quattro   2    2008     4 manu… 4      11.8  8.40 p     comp…
#&gt; # ℹ 224 more rows</code></pre>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li><p>According to <a href="https://www.asknumbers.com/mpg-to-L100km.aspx">asknumbers</a>, you divide 235.214583 by the mpg values in <code>cty</code> and <code>hwy</code> to convert them into the European standard of l/100km.</p></li>
<li><p>Function to convert into European standard (Rademaker, 2016):</p></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mpgTol100km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(milespergallon) {</span>
<span id="cb5-2">  GalloLiter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.785411784</span></span>
<span id="cb5-3">  MileKilometer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.609344</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">  l100km <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> GalloLiter) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (milespergallon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> MileKilometer)</span>
<span id="cb5-6">  l100km</span>
<span id="cb5-7">}</span></code></pre></div>
</div>
<hr>
<ol start="4" type="1">
<li>Which manufacturer has the most models in this dataset? Which model has the most variations? Does your answer change if you remove the redundant specification of drive train (e.g.&nbsp;“pathfinder 4wd”, “a4 quattro”) from the model name?</li>
</ol>
<p>Answer: we can generate a dataframe with manufacturers, models, and variations using:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mpg_summary <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(manufacturer, model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variations =</span> n)</span>
<span id="cb6-4"></span>
<span id="cb6-5">mpg_summary</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 38 × 3
#&gt;    manufacturer model              variations
#&gt;    &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;
#&gt;  1 audi         a4                          7
#&gt;  2 audi         a4 quattro                  8
#&gt;  3 audi         a6 quattro                  3
#&gt;  4 chevrolet    c1500 suburban 2wd          5
#&gt;  5 chevrolet    corvette                    5
#&gt;  6 chevrolet    k1500 tahoe 4wd             4
#&gt;  7 chevrolet    malibu                      5
#&gt;  8 dodge        caravan 2wd                11
#&gt;  9 dodge        dakota pickup 4wd           9
#&gt; 10 dodge        durango 4wd                 7
#&gt; # ℹ 28 more rows</code></pre>
</div>
</div>
<p>The model with the most variations is the Dodge Caravan 2wd.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mpg_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(variations) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 3
#&gt;   manufacturer model       variations
#&gt;   &lt;chr&gt;        &lt;chr&gt;            &lt;int&gt;
#&gt; 1 dodge        caravan 2wd         11</code></pre>
</div>
</div>
<p>The manufacturer with the most models is Toyota.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">mpg_summary <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(manufacturer) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 2
#&gt;   manufacturer     n
#&gt;   &lt;chr&gt;        &lt;int&gt;
#&gt; 1 toyota           6</code></pre>
</div>
</div>
<p>If we first remove the redundant drive train from the summary, we get:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mpg_summary2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gsub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" (quattro)|(2wd)|(4wd)|(awd)$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, model)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(manufacturer, model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">variations =</span> n)</span>
<span id="cb12-5"></span>
<span id="cb12-6">mpg_summary2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 37 × 3
#&gt;    manufacturer model              variations
#&gt;    &lt;chr&gt;        &lt;chr&gt;                   &lt;int&gt;
#&gt;  1 audi         "a4"                       15
#&gt;  2 audi         "a6"                        3
#&gt;  3 chevrolet    "c1500 suburban "           5
#&gt;  4 chevrolet    "corvette"                  5
#&gt;  5 chevrolet    "k1500 tahoe "              4
#&gt;  6 chevrolet    "malibu"                    5
#&gt;  7 dodge        "caravan "                 11
#&gt;  8 dodge        "dakota pickup "            9
#&gt;  9 dodge        "durango "                  7
#&gt; 10 dodge        "ram 1500 pickup "         10
#&gt; # ℹ 27 more rows</code></pre>
</div>
</div>
<p>The model with the most variations has changed to the Audi A4.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">mpg_summary2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(variations) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 3
#&gt;   manufacturer model variations
#&gt;   &lt;chr&gt;        &lt;chr&gt;      &lt;int&gt;
#&gt; 1 audi         a4            15</code></pre>
</div>
</div>
<p>The manufacturer with the most models is still Toyota.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">mpg_summary2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(manufacturer) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb16-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 2
#&gt;   manufacturer     n
#&gt;   &lt;chr&gt;        &lt;int&gt;
#&gt; 1 toyota           6</code></pre>
</div>
</div>
<p>GG Solutions:</p>
<p>Not included here because I believe the answer to question 4 in <a href="https://ggplot2-book-solutions-3ed.netlify.app/first-steps.html#exercises-1">2.2 Exercises</a> is incorrect, as it counts variants by manufacturer, not models by manufacturer.</p>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">2.3.1 Exercises</h2>
<ol type="1">
<li>How would you describe the relationship between <code>cty</code> and <code>hwy</code>? Do you have any concerns about drawing conclusions from that plot?</li>
</ol>
<p>Answer: we can explore the relationship using a scatterplot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>There is a strong correlation between <code>cty</code> and <code>hwy</code>, which is expected since these are both measures of fuel efficiency of the same car.</p>
<p>GG Solutions:</p>
<ul>
<li>The plot shows a strongly linear relationship, which tells me that <code>cty</code> and <code>hwy</code> are highly correlated variables. The only concern I have is that the points seem to be overlapping.</li>
<li>There is not much insight to be gained except that cars which are fuel efficient on a highway are also fuel efficient in cities. This relationship is probably a function of speed (Rademaker, 2016)</li>
</ul>
<hr>
<ol start="2" type="1">
<li>What does <code>ggplot(mpg, aes(model, manufacturer)) + geom_point()</code> show? Is it useful? How could you modify the data to make it more informative?</li>
</ol>
<p>Answer: this plot shows each model as a point for each manufacturer, which is not particularly useful, although it does allow for a quick count of models by manufacturer. A bar chart showing count of models by manufacturer would be more useful.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(model, manufacturer)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb19-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>The plot shows the manufacturer of each model. Its not very readable since there are too many models and this clutters up the x-axis with too many ticks! I would just plot 20 or so models so that the graph is more readable. See below:</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb20-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(model, manufacturer)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>A possible alternative would be to look total number of observations for each manufacturer-model combination using geom_bar(). (Rademaker, 2016)</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb21-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transmute</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"man_mod"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(manufacturer, model, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: keyword_quote_linter.</span></span>
<span id="cb21-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(man_mod)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Note: I prefer my solution for this exercise.</p>
<hr>
<ol start="3" type="1">
<li><p>Describe the data, aesthetic mappings and layers used for each of the following plots. You’ll need to guess a little because you haven’t seen all the datasets and functions yet, but use your common sense! See if you can predict what the plot will look like before running the code.</p>
<ol type="1">
<li><code>ggplot(mpg, aes(cty, hwy)) + geom_point()</code></li>
<li><code>ggplot(diamonds, aes(carat, price)) + geom_point()</code></li>
<li><code>ggplot(economics, aes(date, unemploy)) + geom_line()</code></li>
<li><code>ggplot(mpg, aes(cty)) + geom_histogram()</code></li>
</ol></li>
</ol>
<p>Answer:</p>
<ol type="1">
<li><code>ggplot(mpg, aes(cty, hwy)) + geom_point()</code> - scatterplot of city mpg against highway mpg</li>
<li><code>ggplot(diamonds, aes(carat, price)) + geom_point()</code> - scatterplot of diamond weight in carats against price</li>
<li><code>ggplot(economics, aes(date, unemploy)) + geom_line()</code> - a line plot showing the unemployment rate over time</li>
<li><code>ggplot(mpg, aes(cty)) + geom_histogram()</code> - a histogram of city mpg</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-13-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(economics, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, unemploy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-13-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-13-4.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>In general, my guesses are correct (given my existing experience with ggplot), except for the economics plot, which appears to show the number of unemployed people instead of an employment rate.</p>
<p>GG Solutions: (Rademaker, 2016)</p>
<ol type="1">
<li><code>ggplot(mpg, aes(cty, hwy)) + geom_point()</code></li>
</ol>
<ul>
<li><em>Data</em>: <code>mpg</code></li>
<li><em>Aesthetic</em>: highway miles per gallon is mapped to y position and city miles per gallon is mapped to x position.</li>
<li><em>Layer</em>: points</li>
</ul>
<ol start="2" type="1">
<li><code>ggplot(diamonds, aes(carat, price)) + geom_point()</code></li>
</ol>
<ul>
<li><em>Data</em>: <code>diamonds</code></li>
<li><em>Aesthetic</em>: price in US dollars is mapped to y position, weight of the diamond is mapped to x position.</li>
<li><em>Layer</em>: points</li>
</ul>
<ol start="3" type="1">
<li><code>ggplot(economics, aes(date, unemploy)) + geom_line()</code></li>
</ol>
<ul>
<li><em>Data</em>: <code>economics</code></li>
<li><em>Aesthetic</em>: median duration of unemployment, in weeks, is mapped to y position and month of data collection is mapped to x position.</li>
<li><em>Layer</em>: line</li>
</ul>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">2.4.1 Exercises</h2>
<ol type="1">
<li>Experiment with the colour, shape and size aesthetics. What happens when you map them to continuous values? What about categorical values? What happens when you use more than one aesthetic in a plot?</li>
</ol>
<p>Answer: observations based on the plots below:</p>
<ul>
<li>Using a continuous variable with shape generates an error</li>
<li>Using a categorical variable with shape for more than 6 values generates a warning</li>
<li>Using a continuous variable with size works well</li>
<li>Using a categorical variable with size generates a warning</li>
<li>Using a continuous variable with color creates a gradient</li>
<li>Using a categorical variable with color creates a discrete mapping</li>
<li>Multiple aesthetics can overload the plot</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># continuous</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># categorical</span></span>
<span id="cb28-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-14-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multiple</span></span>
<span id="cb29-2">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> cyl, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">shape =</span> year)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-14-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions offers a similar and less complete answer.</p>
<hr>
<ol start="2" type="1">
<li>What happens if you map a continuous variable to shape? Why? What happens if you map <code>trans</code> to shape? Why?</li>
</ol>
<p>Answer: As noted above, using a continuous variable with shape generates an error, because plots must have discrete shapes. Using a categorical variable with shape for more than 6 values (like <code>trans</code>) generates a warning, since (as the error notes) many different shapes can be hard to distinguish on a plot.</p>
<p>GG Solutions presents a similar answer.</p>
<hr>
<ol start="3" type="1">
<li>How is drive train related to fuel economy? How is drive train related to engine size and class?</li>
</ol>
<p>Answer: The plots below show that:</p>
<ul>
<li>Front wheel drive is correlated with higher fuel economy</li>
<li>Front wheel drive is correlated with smaller displacement, rear wheel drive is correlated with larger displacement, and four wheel drive is not correlated with displacement</li>
<li>Some classes only have a single drive train:
<ul>
<li>Two seaters only have rear wheel drive</li>
<li>Minivans only have front wheel drive</li>
<li>Pickups only have four wheel drive</li>
</ul></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(hwy, drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-15-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-15-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions presents a similar answer using bar charts, and compares engine size and class together in a single plot.</p>
<p>Note: GG Solutions does not explore the relationship between drive train and class.</p>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">2.5.1 Exercises</h2>
<ol type="1">
<li>What happens if you try to facet by a continuous variable like <code>hwy</code>? What about <code>cyl</code>? What’s the key difference?</li>
</ol>
<p>Answer: faceting on a continuous variable creates a facet for each unique value in the data frame, which holds true for both <code>hwy</code> and <code>cyl</code>. The key difference is that <code>cyl</code> has fewer unique values, making the plot more readable and useful.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(hwy))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb34-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cyl))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-16-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>The key difference is <code>hwy</code> is a continuous variable that has 27 unique values, so you get 27 different subsets. However, <code>cly</code> is a categorical variable and has 4 unique values, so <code>cyl</code> only has 4 different subsets. It is less cluttered when you try to facet.</li>
<li>(Rademaker, 2016) Faceting by a continuous variable works but becomes hard to read and interpret when the variable that we facet by has too many levels.</li>
</ul>
<hr>
<ol start="2" type="1">
<li>Use faceting to explore the 3-way relationship between fuel economy, engine size, and number of cylinders. How does faceting by number of cylinders change your assessment of the relationship between engine size and fuel economy?</li>
</ol>
<p>Answer: engines with fewer cylinders have a stronger relationship between displacement and fuel economy (where larger engines have poorer fuel economy), strongest with 4 cylinders, unclear with 5 (due to limited data), weaker with 6, and no apparent relationship with 8.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb35-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cyl))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>When I initially plot engine size and fuel economy, I see an overall decreasing linear relationship. Upon faceting, I see that the decreasing relationship is mostly seen in the 4 cylinder subset. In the other cylinder subsets, we see a flat relationship - as engine displacement increases, fuel economy remains constant.</li>
</ul>
<hr>
<ol start="3" type="1">
<li>Read the documentation for <code>facet_wrap()</code>. What arguments can you use to control how many rows and columns appear in the output?</li>
</ol>
<p>Answer: use <code>nrow</code> and <code>ncol</code>.</p>
<p>GG Solutions:</p>
<ul>
<li>I can use the arguments <code>nrow, ncol</code> to control how many rows and columns appear in the output.</li>
</ul>
<hr>
<ol start="4" type="1">
<li>What does the <code>scales</code> argument to <code>facet_wrap()</code> do? When might you use it?</li>
</ol>
<p>Answer: the <code>scales</code> argument determines whether scales are fixed (the default) or free on one or both dimensions. Using <code>scales = "free"</code> is helpful when comparing relationships when scale is less important, as shown in this reworked example of exercise 2, which focuses on the smoothed plot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb36-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_wrap</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(cyl), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>It allows users to decide whether scales should be fixed. I would use it whenever different subsets of the data are on vastly different scales.</li>
<li>(Rademaker, 2016) If we want to compare across facets, <code>scales = "fixed"</code> is more appropriate. If our focus is on individual patterns within each facet, setting <code>scales = "free"</code> might be more appropriate.</li>
</ul>
<hr>
</section>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">2.6.6 Exercises</h2>
<ol type="1">
<li>What’s the problem with the plot created by <code>ggplot(mpg, aes(cty, hwy)) + geom_point()</code>? Which of the geoms described above is most effective at remedying the problem?</li>
</ol>
<p>Answer: as noted in GG Solutions, the problem is overplotting, which <code>geom_jitter</code> fixes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cty, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb37-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_jitter</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>The problem is overplotting.</li>
</ul>
<p>Solution 1. Use <code>geom_jitter</code> to add random noise to the data and avoid overplotting.</p>
<p>Solution 2. (Rademaker, 2016) Set opacity with <code>alpha</code></p>
<hr>
<ol start="2" type="1">
<li><p>One challenge with <code>ggplot(mpg, aes(class, hwy)) + geom_boxplot()</code> is that the ordering of <code>class</code> is alphabetical, which is not terribly useful. How could you change the factor levels to be more informative?</p>
<p>Rather than reordering the factor by hand, you can do it automatically based on the data: <code>ggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot()</code>. What does <code>reorder()</code> do? Read the documentation.</p></li>
</ol>
<p>Answer: as noted in the exercise, ordering of <code>class</code> by <code>hwy</code> is more informative. <code>reorder()</code> reorders levels based on the second, numeric value, by default using the mean.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class, hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb38-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reorder</span>(class, hwy), hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb39-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-20-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions takes a similar approach but instead uses <code>mutate(class = factor(class), class = fct_reorder(class, hwy))</code>.</p>
<hr>
<ol start="3" type="1">
<li>Explore the distribution of the carat variable in the <code>diamonds</code> dataset. What <code>binwidth</code> reveals the most interesting patterns?</li>
</ol>
<p>Answer: using trial and error, <code>binwidth = 0.01</code> reveals that carat weight is skewed towards round numbers (1, 1.25, 1.5, 2, etc.). Using the smaller <code>binwidth = 0.005</code> doesn’t improve the pattern, and makes it harder to see.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb40-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-21-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb41-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-21-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb42-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-21-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>This is a subjective answer, but <code>binwidth</code> of 0.2 or 0.3 reveals that the distribution of carat is heavily skewed to the right. This means that most diamonds carats are between 0 and 1.</li>
</ul>
<hr>
<ol start="4" type="1">
<li>Explore the distribution of the price variable in the <code>diamonds</code> data. How does the distribution vary by cut?</li>
</ol>
<p>Answer: a boxplot of price by cut shows that better cuts aren’t necessarily more expensive.</p>
<p>However, as noted in my <a href="r-training-log.html">R Training Log</a>:</p>
<blockquote class="blockquote">
<p><a href="https://r4ds.had.co.nz/exploratory-data-analysis.html#patterns-and-models">7.6 Patterns and models</a> covers models and residuals, here showing how to reveal the expected relationship between cut and price:</p>
</blockquote>
<p>We can remove the relationship between carats and price, and redo the boxplot:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cut, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb43-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-22-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove carat weight as a confounding variable</span></span>
<span id="cb44-2">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(price) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(carat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds)</span>
<span id="cb44-3"></span>
<span id="cb44-4">diamonds2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_residuals</span>(mod) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb44-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(resid))</span>
<span id="cb44-7"></span>
<span id="cb44-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb44-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> resid))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-22-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions uses both a boxplot and a frequency polygon to compare cuts, and concludes:</p>
<ul>
<li>(Rademaker, 2016) Fair quality diamonds are more expensive then others. Possible reason is they are bigger.</li>
</ul>
<hr>
<ol start="5" type="1">
<li>You now know (at least) three ways to compare the distributions of subgroups: <code>geom_violin()</code>, <code>geom_freqpoly()</code> and the colour aesthetic, or <code>geom_histogram()</code> and faceting. What are the strengths and weaknesses of each approach? What other approaches could you try?</li>
</ol>
<p>Answer: Violin plots convey the most information but require an understanding of probability density. Frequency polygons allow for direct comparison on the same plot - in contrast, faceted histograms provide a better visualization of each variable, but make comparison more difficult. Other approaches include comparing boxplots, multiple density plots, or side-by-side histograms - a bar plot showing multiple variables for each bin.</p>
<p>GG Solutions:</p>
<ul>
<li>According to the book, <code>geom_violin()</code> shows a compact representation of the “density” of the distribution, highlighting the areas where more points are found. Its weakness is that violin plots rely on the calculation of a density estimate, which is hard to interpret.</li>
<li>According to the book, <code>geom_freqploy()</code> bins the data, then counts the number of observations in each bin using lines. One possible weakness is that you have to select the width of the bins yourself by experimentation.</li>
<li>According to the book, <code>geom_histogram()</code> and faceting makes it easier to see the distribution of each group, but makes comparisons between groups a little harder.</li>
</ul>
<hr>
<ol start="6" type="1">
<li>Read the documentation for <code>geom_bar()</code>. What does the <code>weight</code> aesthetic do?</li>
</ol>
<p>Answer: for <code>geom_bar()</code>, the <code>weight</code> aesthetic changes the height of the bar from the number of cases in each group to the sum of the weights.</p>
<p>GG Solutions:</p>
<ul>
<li>The <code>weight</code> aesthetic converts the number of cases to a weight and makes the height of the bar proportional to the sum of the weights. See below:</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(class))</span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of cars in each class:</span></span>
<span id="cb45-3">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-23-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total engine displacement of each class</span></span>
<span id="cb46-2">g <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">weight =</span> displ))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-23-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="7" type="1">
<li>Using the techniques already discussed in this chapter, come up with three ways to visualise a 2d categorical distribution. Try them out by visualising the distribution of <code>model</code> and <code>manufacturer</code>, <code>trans</code> and <code>class</code>, and <code>cyl</code> and <code>trans</code>.</li>
</ol>
<p>Answer: three ways to visualize categorical distributions:</p>
<ul>
<li>Bar charts</li>
<li>A scatterplot using alpha</li>
<li>A scatterplot using size</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb47-1">mpg[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manufacturer"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>)] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb47-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(manufacturer)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_flip</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> rev) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"models"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb47-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb48-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(trans, class)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> rev) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb48-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-24-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb49-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(trans, cyl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb49-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cyl, trans, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_discrete</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> rev) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cylinders"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"count"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb49-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minor.x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1_files/figure-html/unnamed-chunk-24-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions does not provide an answer.</p>
<hr>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>ggplot2</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-1.html</guid>
  <pubDate>Sun, 20 Nov 2022 06:00:00 GMT</pubDate>
</item>
<item>
  <title>ggplot2 (Layers)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Layers” chapters of <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a>, third edition, with comparisons to solutions from <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(babynames)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jbplot)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(modelr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(maps) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: unused_import_linter. maps is required by map_data().</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sf)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(USAboundaries)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(USAboundariesData) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: unused_import_linter. Needed by USAboundaries.</span></span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggraph)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidygraph)</span>
<span id="cb1-12"></span>
<span id="cb1-13">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-16">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://ggplot2-book.org/index.html">ggplot2: Elegant Graphics for Data Analysis</a> and <a href="https://ggplot2-book-solutions-3ed.netlify.app">Solutions to ggplot2: Elegant Graphics for Data Analysis</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read the ggplot2 book and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="individual-geoms" class="level1">
<h1>3 Individual geoms</h1>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">3.1.1 Exercises</h2>
<ol type="1">
<li><p>What geoms would you use to draw each of the following named plots?</p>
<ol type="1">
<li>Scatterplot</li>
<li>Line chart</li>
<li>Histogram</li>
<li>Bar chart</li>
<li>Pie chart</li>
</ol></li>
</ol>
<p>Answer:</p>
<ol type="1">
<li>Scatterplot: <code>geom_point()</code></li>
<li>Line chart: <code>geom_line()</code></li>
<li>Histogram: <code>geom_histogram()</code></li>
<li>Bar chart: <code>geom_bar()</code></li>
<li>Pie chart: there is no native geom for a pie chart, but, as the <a href="https://r-graph-gallery.com/piechart-ggplot2.html">R Graph Gallery</a> demonstrates, it is possible to create a pie chart using <code>geom_bar()</code> and <code>coord_polar()</code></li>
</ol>
<p>GG Solutions:</p>
<ul>
<li>Scatterplot: <code>geom_point()</code></li>
<li>Line chart: <code>geom_line()</code></li>
<li>Histogram: <code>geom_histogram()</code></li>
<li>Bar chart: <code>geom_bar()</code></li>
<li>Pie chart: ggplot2 does not have a geom to draw pie charts. One workaround, according to the <a href="https://r-graph-gallery.com/piechart-ggplot2.html">R Graph Gallery</a> is to build a stacked bar chart with one bar only using the <code>geom_bar()</code> function and then make it circular with <code>coord_polar()</code></li>
</ul>
<hr>
<ol start="2" type="1">
<li>What’s the difference between <code>geom_path()</code> and <code>geom_polygon()</code>? What’s the difference between <code>geom_path()</code> and <code>geom_line()</code>?</li>
</ol>
<p>Answer: <code>geom_path()</code> connects observations with a line in the order they appear in the data, <code>geom_line()</code> connects them in order along the x axis, and <code>geom_polygon()</code> connects the start and end points of <code>geom_path()</code> and fills in the plot.</p>
<p>GG Solutions:</p>
<ul>
<li><code>geom_polygon</code> draws the same graph (lines) as <code>geom_path</code>, but it fills these lines with color</li>
<li><code>geom_line()</code> connects points from left to right, whereas <code>geom_path()</code> connects points in the order they appear in the data</li>
</ul>
<hr>
<ol start="3" type="1">
<li>What low-level geoms are used to draw <code>geom_smooth()</code>? What about <code>geom_boxplot()</code> and <code>geom_violin()</code>?</li>
</ol>
<p>Answer: reviewing the source code:</p>
<p><a href="https://github.com/tidyverse/ggplot2/blob/main/R/geom-smooth.R"><code>geom_smooth()</code></a> uses:</p>
<ul>
<li><code>geom_path()</code> by way of <code>geom_line()</code></li>
<li><code>geom_area()</code> by way of <code>geom_ribbon()</code></li>
</ul>
<p><a href="https://github.com/tidyverse/ggplot2/blob/main/R/geom-boxplot.R"><code>geom_boxplot()</code></a> uses:</p>
<ul>
<li><code>geom_point()</code></li>
<li><code>geom_path()</code> by way of <code>geom_segment()</code> and <code>geom_crossbar()</code></li>
<li><code>geom_polygon()</code> by way of <code>geom_crossbar()</code></li>
</ul>
<p><a href="https://github.com/tidyverse/ggplot2/blob/main/R/geom-violin.R"><code>geom_violin()</code></a> uses:</p>
<ul>
<li><code>geom_path()</code></li>
<li><code>geom_polygon()</code></li>
</ul>
<p>GG Solutions:</p>
<p>(kangnade)</p>
<ul>
<li><code>geom_point()</code>, <code>geom_path()</code>, and <code>geom_area()</code> are used to draw <code>geom_smooth()</code></li>
<li><code>geom_rect()</code>, <code>geom_line()</code>, <code>geom_point()</code> are used for <code>geom_boxplot()</code></li>
<li><code>geom_area()</code> and <code>geom_path()</code> are used for <code>geom_violin()</code></li>
</ul>
<p>Note: GG Solutions answers appear to be incorrect guesses.</p>
<hr>
</section>
</section>
<section id="collective-geoms" class="level1">
<h1>4 Collective geoms</h1>
<p>Geoms can be roughly divided into individual and collective geoms. An <strong>individual</strong> geom draws a distinct graphical object for each observation (row). For example, the point geom draws one point per row. A <strong>collective</strong> geom displays multiple observations with one geometric object. This may be a result of a statistical summary, like a boxplot, or may be fundamental to the display of the geom, like a polygon. Lines and paths fall somewhere in between: each line is composed of a set of straight segments, but each segment represents two points. How do we control the assignment of observations to graphical elements? This is the job of the <code>group</code> aesthetic.</p>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">4.5 Exercises</h2>
<p>GG Solutions offers no answers for this section.</p>
<ol type="1">
<li>Draw a boxplot of <code>hwy</code> for each value of <code>cyl</code>, without turning <code>cyl</code> into a factor. What extra aesthetic do you need to set?</li>
</ol>
<p>Answer: the <code>group</code> aesthetic is required.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(cyl, hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> cyl)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Modify the following plot so that you get one boxplot per integer value of <code>displ</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, cty)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
</div>
<p>Answer: grouping by the floor of displacement works, but is arranged strangely. Mutating displacement first is a better solution:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, cty, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(displ))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">displ =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">floor</span>(displ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(displ, cty, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> displ)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-3-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>When illustrating the difference between mapping continuous and discrete colours to a line, the discrete example needed <code>aes(group = 1)</code>. Why? What happens if that is omitted? What’s the difference between <code>aes(group = 1)</code> and <code>aes(group = 2)</code>? Why?</li>
</ol>
<p>Answer: using the example from the book, omitting the group aesthetic generates an error:</p>
<pre><code>`geom_line()`: Each group consists of only one observation.
ℹ Do you need to adjust the group aesthetic?</code></pre>
<p>There is no difference between <code>aes(group = 1)</code> and <code>aes(group = 2)</code>, presumably because both methods put all observations into a single group.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(colour))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(colour))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">linewidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>How many bars are in each of the following plots? (Hint: try adding an outline around each bar with <code>colour = "white"</code>)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span>
<span id="cb9-5"></span>
<span id="cb9-6">mpg2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(hwy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(hwy))</span>
<span id="cb9-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg2, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>()</span></code></pre></div>
</div>
<p>Answer: in the first plot, there are three bars. In the second, there is one bar for each unique value for <code>hwy</code> in each column. In the third, there is one bar for each observation of <code>hwy</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mpg, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-6-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(hwy) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">id =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(hwy)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(drv, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> hwy, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> id)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_bar</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-6-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="5" type="1">
<li>Install the babynames package. It contains data about the popularity of babynames in the US. Run the following code and fix the resulting graph. Why does this graph make me unhappy?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">hadley <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(babynames, name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hadley"</span>)</span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(hadley, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, n)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
</div>
<p>Answer: the popularity of “Hadley” is sadly declining.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">babynames <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hadley"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb14-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> sex)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb14-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<p>Bonus: a comparison of the popularity of my name (John) and Hadley:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">babynames <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(name <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hadley"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb15-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(year, prop, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interaction</span>(name, sex, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lex.order =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_log10</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_viridis_d</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name, Sex"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Relative popularity of the names Hadley and John"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb15-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Note: <code>group</code> is redundant for <code>geom_line()</code> when using <code>color</code>.</p>
<hr>
</section>
</section>
<section id="statistical-summaries" class="level1">
<h1>5 Statistical summaries</h1>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">5.4.1 Exercises</h2>
<ol type="1">
<li>What <code>binwidth</code> tells you the most interesting story about the distribution of <code>carat</code>?</li>
</ol>
<p>Answer: as answered in <a href="ggplot2-1.html#266_Exercises">2.6.6 Exercises</a>:</p>
<p>Answer: using trial and error, <code>binwidth = 0.01</code> reveals that carat weight is skewed towards round numbers (1, 1.25, 1.5, 2, etc.). Using the smaller <code>binwidth = 0.005</code> doesn’t improve the pattern, and makes it harder to see.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(carat)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-10-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>Highly subjective answer, but I would go with 0.2 since it gives you the right amount of information about the distribution of <code>carat</code>: right-skewed.</li>
</ul>
<hr>
<ol start="2" type="1">
<li>Draw a histogram of <code>price</code>. What interesting patterns do you see?</li>
</ol>
<p>Answer: price has a multi-modal distribution with a gap. Looking at the underlying data, there are no prices between $1454 and $1546</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb17-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1454</span>, price <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1546</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 24 × 10
#&gt;    carat cut       color clarity depth table price     x     y     z
#&gt;    &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
#&gt;  1  0.5  Very Good D     SI1      61.6    56  1454  5.09  5.11  3.14
#&gt;  2  0.52 Ideal     I     VVS1     60.1    56  1454  5.24  5.27  3.16
#&gt;  3  0.54 Ideal     H     VS1      61.2    55  1454  5.25  5.31  3.23
#&gt;  4  0.51 Premium   G     VS2      61.2    60  1546  5.17  5.12  3.15
#&gt;  5  0.51 Ideal     G     VS2      62.9    54  1546  5.12  5.08  3.21
#&gt;  6  0.51 Premium   G     VS2      62.4    57  1546  5.11  5.09  3.18
#&gt;  7  0.51 Premium   G     VS2      62.7    58  1546  5.12  5.09  3.2 
#&gt;  8  0.51 Premium   G     VS2      62.2    57  1546  5.15  5.1   3.19
#&gt;  9  0.51 Ideal     G     VS2      62.7    57  1546  5.12  5.05  3.19
#&gt; 10  0.51 Premium   G     VS2      62.9    58  1546  5.11  5.06  3.2 
#&gt; # ℹ 14 more rows</code></pre>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>It’s skewed to the right and has a long tail. Also, there is a small peak around 5000 and a huge peak around 0.</li>
</ul>
<hr>
<ol start="3" type="1">
<li>How does the distribution of <code>price</code> vary with <code>clarity</code>?</li>
</ol>
<p>Answer: a boxplot of price by clarity shows that diamonds with better clarity aren’t necessarily more expensive.</p>
<p>However, as noted in my <a href="r-training-log.html">R Training Log</a> and as answered in <a href="ggplot2-1.html#266_Exercises">2.6.6 Exercises</a>:</p>
<blockquote class="blockquote">
<p><a href="https://r4ds.had.co.nz/exploratory-data-analysis.html#patterns-and-models">7.6 Patterns and models</a> covers models and residuals, here showing how to reveal the expected relationship between cut and price:</p>
</blockquote>
<p>We can remove the relationship between carats and price, and redo the boxplot, which shows the expected relationship:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(clarity, price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb20-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove carat weight as a confounding variable</span></span>
<span id="cb21-2">diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_residuals</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(price) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(carat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(resid)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb21-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(clarity, resid)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb21-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-12-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>GG Solutions:</p>
<ul>
<li>The range of prices is similar across clarity and the median and IQR vary greatly with clarity.</li>
</ul>
<hr>
<ol start="4" type="1">
<li>Overlay a frequency polygon and density plot of <code>depth</code>. What computed variable do you need to map to <code>y</code> to make the two plots comparable? (You can either modify <code>geom_freqpoly()</code> or <code>geom_density()</code>.)</li>
</ol>
<p>Answer: you need to either divide or multiply <code>y</code> by the total number of observations, <code>nrow(diamonds)</code> using <code>after_stat()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(depth)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_freqpoly</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(count) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(diamonds)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb22-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-13-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(depth)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_freqpoly</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(diamonds))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb23-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-13-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Notes: from the documentation for <code>after_stat()</code>:</p>
<blockquote class="blockquote">
<p>Most aesthetics are mapped from variables found in the data. Sometimes, however, you want to delay the mapping until later in the rendering process. ggplot2 has three stages of the data that you can map aesthetics from. The default is to map at the beginning, using the layer data provided by the user. The second stage is after the data has been transformed by the layer stat. The third and last stage is after the data has been transformed and mapped by the plot scales. The most common example of mapping from stat transformed data is the height of bars in <code>geom_histogram()</code>: the height does not come from a variable in the underlying data, but is instead mapped to the count computed by <code>stat_bin()</code>. An example of mapping from scaled data could be to use a desaturated version of the stroke colour for fill. If you want to map directly from the layer data you should not do anything special. In order to map from stat transformed data you should use the <code>after_stat()</code> function to flag that evaluation of the aesthetic mapping should be postponed until after stat transformation. Similarly, you should use <code>after_scale()</code> to flag evaluation of mapping for after data has been scaled. If you want to map the same aesthetic multiple times, e.g.&nbsp;map x to a data column for the stat, but remap it for the geom, you can use the <code>stage()</code> function to collect multiple mappings.</p>
</blockquote>
<p>GG Solutions answer not included here.</p>
<p>Note: after reading the <a href="https://ggplot2-book.org/layers.html#generated-variables">Generated Variables</a> section, there is an easier solution:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(depth)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_freqpoly</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb24-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-14-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<p>Bonus: overlay a PDF and ECDF on a histogram.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(ncount)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_ecdf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb25-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-15-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint next: line_length_linter.</span></span>
<span id="cb26-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://stackoverflow.com/questions/27611438/density-curve-overlay-on-histogram-where-vertical-axis-is-frequency-aka-count</span></span>
<span id="cb26-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(density <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(diamonds) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb26-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-15-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(diamonds, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(price)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(ncount)), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: the factor of 0.62 was determined by trial and error, find underlying formula</span></span>
<span id="cb27-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       the maximum density / the maximum count of the previous plot = 930.57 / 1503 = 0.62</span></span>
<span id="cb27-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       but that doesn't work here</span></span>
<span id="cb27-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_density</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">after_stat</span>(ndensity <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.62</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stat_ecdf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb27-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-15-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="maps" class="level1">
<h1>6 Maps</h1>
<p>Plotting geospatial data is a common visualisation task, and one that requires specialised tools. Typically the problem can be decomposed into two problems: using one data source to draw a map, and adding metadata from another information source to the map. This chapter will help you tackle both problems.</p>
<section id="bonus" class="level2">
<h2 class="anchored" data-anchor-id="bonus">Bonus</h2>
<p>There are no exercises, so let’s draw a map of Minnesota using polygon maps!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_data</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"county"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minnesota"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lon =</span> long, lat, group) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb28-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(lon, lat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">group =</span> group)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_polygon</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_quickmap</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb28-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-16-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Polygon maps are superseded by simple features maps, so let’s draw it again, adding Minneapolis, in red:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">us_counties</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resolution =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"high"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">states =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MN"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb29-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_sf</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">us_cities</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">states =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MN"</span>), city <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Minneapolis"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_sf</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-17-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Side note: although it creates files in <code>/usr/local</code>, which causes <a href="https://brew.sh">Homebrew</a> to complain, <a href="https://github.com/r-lib/rig/"><code>rig</code></a>, <em>The R Installation Manager</em>, supports multiple versions of R, and supports installation of binary packages, which is substantially faster and requires fewer local dependencies.</p>
</section>
</section>
<section id="networks" class="level1">
<h1>7 Networks</h1>
<p>Like maps and spatial data, networks and graphs occupy a special part of the visualization landscape, but whereas spatial data mostly differ from regular plotting in their use of projections, networks bring their own data structure as well as their own visualization paradigms to the table. Because of these complications networks are not directly supported in ggplot2. Several efforts over the years have tried to add this missing piece and in this chapter we will see how to use <a href="https://ggraph.data-imaginist.com"><code>ggraph</code></a> for network visualization. Other packages that offer some of the same functionality includes <a href="http://sctyner.github.io/geomnet/"><code>geomnet</code></a>, <a href="https://briatte.github.io/ggnetwork/"><code>ggnetwork</code></a>, and <a href="https://ggobi.github.io/ggally/"><code>GGally</code></a> for regular network plots, and <a href="https://github.com/YuLab-SMU/ggtree"><code>ggtree</code></a> and <a href="https://andrie.github.io/ggdendro/"><code>ggdendro</code></a> for tree visualization specifically.</p>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<p>While ggplot2 has limited support for maps, it has no direct support for networks and graphs. <code>ggraph</code> offers some interesting visualizations that are useful for understanding social networks, especially this one, which shows how friendships among high school boys changed from 1957 to 1958:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">highschool <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tbl_graph</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">directed =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb30-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggraph</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">layout =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stress"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_edge_link</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_node_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb30-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_edges</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>year)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-18-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="annotations" class="level1">
<h1>8 Annotations</h1>
<p>When constructing a data visualisation, it is often necessary to make annotations to the data displayed. Conceptually, an annotation supplies <em>metadata</em> for the plot: that is, it provides additional information about the data being displayed. From a practical standpoint, however, metadata is just another form of data. Because of this, the annotation tools in ggplot2 reuse the same geoms that are used to create other plots. However, to meet the specific needs that users often have when annotating plots, there are some helper functions in ggplot2 itself, and a number of other packages have extended ggplot2 in ways you may find helpful.</p>
<section id="notes-1" class="level2">
<h2 class="anchored" data-anchor-id="notes-1">Notes</h2>
<p>An important distinction on axis labels:</p>
<blockquote class="blockquote">
<p>There are two ways to remove the axis label. Setting <code>labs(x = "")</code> omits the label but still allocates space; setting <code>labs(x = NULL)</code> removes the label and its space.</p>
</blockquote>
<p>Consider adopting <a href="https://github.com/yixuan/showtext"><code>showtext</code></a> for non-standard fonts, with caveats for using it in <a href="https://statr.me/2014/07/showtext-with-knitr/">R Markdown</a>.</p>
<p>One of the most useful alignments is “inward”. It aligns text towards the middle of the plot, which ensures that labels remain within the plot limits:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb31-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">text =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb31-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom-left"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top-left"</span>,</span>
<span id="cb31-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bottom-right"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top-right"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb31-7">  ), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb31-8">)</span>
<span id="cb31-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb31-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> text))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-19-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(df, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(x, y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb32-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> text), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inward"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inward"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-19-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>The font size is controlled by the <code>size</code> aesthetic. Unlike most tools, ggplot2 specifies the size in millimeters (mm), rather than the usual points (pts). The reason for this choice is that it makes it the units for font sizes consistent with how other sizes are specified in ggplot2. (There are 72.27 pts in a inch, so to convert from points to mm, just multiply by 72.27 / 25.4).</li>
</ul>
<p>Let’s assign blame to unemployment!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1">presidential <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset</span>(presidential, start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> economics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(economics<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>date))</span>
<span id="cb33-2"></span>
<span id="cb33-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(economics) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_rect</span>(</span>
<span id="cb33-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmin =</span> start, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xmax =</span> end, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> party),</span>
<span id="cb33-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymin =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ymax =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">Inf</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>,</span>
<span id="cb33-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> presidential</span>
<span id="cb33-8">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_vline</span>(</span>
<span id="cb33-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xintercept =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(start)),</span>
<span id="cb33-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> presidential,</span>
<span id="cb33-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">colour =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"grey50"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb33-13">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_text</span>(</span>
<span id="cb33-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># themes only affect the non-data components of the plot, see:</span></span>
<span id="cb33-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   https://github.com/tidyverse/ggplot2/issues/1859</span></span>
<span id="cb33-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> start, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0005</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lato"</span>),</span>
<span id="cb33-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> presidential,</span>
<span id="cb33-19">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">hjust =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nudge_x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span></span>
<span id="cb33-20">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_line</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(date, unemploy <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pop)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-22">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_manual</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_y_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>percent, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">limits =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_date</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> presidential<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>start, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date_labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">guides</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-26">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">title =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployment rate by presidential term"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb33-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">minor.y =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2_files/figure-html/unnamed-chunk-20-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="arranging-plots" class="level1">
<h1>9 Arranging plots</h1>
<p>The grammar presented in ggplot2 is concerned with creating single plots. While the faceting system provides the means to produce several subplots all of these are part of the same main visualization, sharing layers, data, and scales. However, it is often necessary to use multiple disparate plots to tell a story or make an argument. These can of course be created individually and assembled in a layout program, but it is beneficial to do this in code to avoid time consuming and non-reproducible manual labor. A range of packages have risen to the occasion and provide different approaches to arranging separate plots. While this chapter will focus on the <code>patchwork</code> package you may also find some of the same functionalities in the <code>cowplot</code>, <code>gridExtra</code> and <code>ggpubr</code> packages.</p>


</section>

 ]]></description>
  <category>exercises</category>
  <category>ggplot2</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/ggplot2-2.html</guid>
  <pubDate>Sun, 20 Nov 2022 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Advanced R (Object-oriented programming)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-3.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Object-oriented programming” chapters of <a href="https://adv-r.hadley.nz/index.html">Advanced R</a>, second edition, with comparisons to solutions from <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(sloop)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(R6)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(methods)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://github.com/hadley/adv-r/blob/master/common.R</span></span>
<span id="cb1-8">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-11">)</span>
<span id="cb1-12"></span>
<span id="cb1-13">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_mar =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options, envir) {</span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb1-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-17">    }</span>
<span id="cb1-18">  }</span>
<span id="cb1-19">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://adv-r.hadley.nz/index.html">Advanced R</a> and <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read Advanced R and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="base-types" class="level1">
<h1>12 Base types</h1>
<p>To talk about objects and OOP in R we first need to clear up a fundamental confusion about two uses of the word “object”. So far in this book, we’ve used the word in the general sense captured by John Chambers’ pithy quote: “Everything that exists in R is an object”. However, while everything <em>is</em> an object, not everything is object-oriented. This confusion arises because the base objects come from S, and were developed before anyone thought that S might need an OOP system. The tools and nomenclature evolved organically over many years without a single guiding principle.</p>
<p>Most of the time, the distinction between objects and object-oriented objects is not important. But here we need to get into the nitty gritty details so we’ll use the terms <strong>base objects</strong> and <strong>OO objects</strong> to distinguish them.</p>
</section>
<section id="s3" class="level1">
<h1>13 S3</h1>
<p>S3 is R’s first and simplest OO system. S3 is informal and ad hoc, but there is a certain elegance in its minimalism: you can’t take away any part of it and still have a useful OO system. For these reasons, you should use it, unless you have a compelling reason to do otherwise. S3 is the only OO system used in the base and stats packages, and it’s the most commonly used system in CRAN packages.</p>
<p>S3 is very flexible, which means it allows you to do things that are quite ill-advised. If you’re coming from a strict environment like Java this will seem pretty frightening, but it gives R programmers a tremendous amount of freedom. It may be very difficult to prevent people from doing something you don’t want them to do, but your users will never be held back because there is something you haven’t implemented yet. Since S3 has few built-in constraints, the key to its successful use is applying the constraints yourself. This chapter will therefore teach you the conventions you should (almost) always follow.</p>
<p>The goal of this chapter is to show you how the S3 system works, not how to use it effectively to create new classes and generics. I’d recommend coupling the theoretical knowledge from this chapter with the practical knowledge encoded in the <a href="https://vctrs.r-lib.org">vctrs package</a>.</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">13.2.1 Exercises</h2>
<ol type="1">
<li>Describe the difference between <code>t.test()</code> and <code>t.data.frame()</code>. When is each function called?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(t.test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "S3"      "generic"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(t.data.frame)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "S3"     "method"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formula</span>()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; t.test.formula
#&gt;  * t.test.default</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; t.data.frame
#&gt; -&gt; t.default</code></pre>
</div>
</div>
<p>Answer: As noted by <code>sloop::ftype()</code> and the docs, <code>t.test()</code> is a S3 generic, and <code>t.data.frame()</code> is an S3 method for <code>t()</code> (transpose). <code>t.data.frame()</code> is called as a method when calling <code>t(x)</code> when <code>x</code> is a <code>data.frame</code>. <code>t.test()</code> calls either <code>t.test.default</code> or <code>t.test.formula</code>.</p>
<p>AR Solutions: Because of S3’s <code>generic.class()</code> naming scheme, both functions may initially look similar, while they are in fact unrelated.</p>
<ul>
<li><code>t.test()</code> is a <em>generic</em> function that performs a t-test.</li>
<li><code>t.data.frame()</code> is a <em>method</em> that gets called by the generic <code>t()</code> to transpose data frame input.</li>
</ul>
<p>Due to R’s S3 dispatch rules, <code>t.test()</code> would also get called when <code>t()</code> is applied to an object of class <code>test</code></p>
<hr>
<ol start="2" type="1">
<li>Make a list of commonly used base R functions that contain <code>.</code> in their name but are not S3 methods.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(as.character)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "primitive" "generic"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(as.data.frame)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "S3"      "generic"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(data.frame)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(eval.parent)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(file.path)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "internal"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(file.copy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "internal"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(is.null)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "primitive"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(is.data.frame)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(Sys.localeconv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "internal"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(Sys.time)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "internal"</code></pre>
</div>
</div>
<p>Answer:</p>
<ul>
<li>All of the <code>as.</code> functions</li>
<li><code>data.frame</code></li>
<li>All of the <code>file.</code> functions</li>
<li>All of the <code>is.</code> functions</li>
<li>All of the <code>Sys.</code> functions</li>
</ul>
<p>AR Solutions: In recent years “snake_case”-style has become increasingly common when naming functions and variables in R. But many functions in base R will continue to be “point.separated”, which is why some inconsistency in your R code most likely cannot be avoided. (<code>install.packages(), read.csv(), list.files(), download.file(), data.frame(), as.character(), Sys.Date(), all.equal(), do.call(), on.exit()</code>)</p>
<hr>
<ol start="3" type="1">
<li>What does the <code>as.data.frame.data.frame()</code> method do? Why is it confusing? How could you avoid this confusion in your own code?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; as.data.frame.data.frame
#&gt;  * as.data.frame.default</code></pre>
</div>
</div>
<p>Answer: <code>as.data.frame.data.frame()</code> is the method used to coerce a <code>data.frame</code> to a <code>data.frame</code>. This is confusing because the class contains a period (as does the function call); avoiding periods improves readability: <code>as_dataframe.dataframe</code> makes the generic and method clear.</p>
<p>AR Solutions: The function <code>as.data.frame.data.frame()</code> implements the <code>data.frame()</code> <em>method</em> for the <code>as.data.frame()</code> <em>generic</em>, which coerces objects to data frames.</p>
<p>The name is confusing, because it does not clearly communicate the type of the function, which could be a regular function, a generic or a method. Even if we assume a method, the amount of <code>.</code>’s makes it difficult to separate the generic- and the class-part of the name. Is it the <code>data.frame.data.frame()</code> method for the <code>as()</code> generic? Is it the <code>frame.data.frame()</code> method for the <code>as.data()</code> generic?</p>
<p>We could avoid this confusion by applying a different naming convention (e.g.&nbsp;“snake_case”) for our class and function names.</p>
<hr>
<ol start="4" type="1">
<li>Describe the difference in behaviour in these two calls.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1014</span>)</span>
<span id="cb32-2">some_days <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2017-01-31"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb32-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(some_days)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "2017-02-06"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(some_days))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 17203.4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(some_days))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; mean.Date
#&gt;  * mean.default</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(some_days)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    mean.double
#&gt;    mean.numeric
#&gt; =&gt; mean.default</code></pre>
</div>
</div>
<p>Answer: the first call calculates the mean using <code>mean.Date()</code>, and so returns a date. using <code>unclass()</code> changes the date to its underlying value (double) which calculates the mean using <code>mean.default()</code>.</p>
<p>AR Solutions: <code>mean()</code> is a generic function, which will select the appropriate method based on the class of the input. <code>some_days</code> has the class <code>Date</code> and <code>mean.Date(some_days)</code> will be used to calculate the mean date of <code>some_days</code>.</p>
<p>After <code>unclass()</code> has removed the class attribute from <code>some_date</code>, the default method is chosen. <code>mean.default(unclass(some_days))</code> then calculates the mean of the underlying double.</p>
<hr>
<ol start="5" type="1">
<li>What class of object does the following code return? What base type is it built on? What attributes does it use?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb40-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Empirical CDF 
#&gt; Call: ecdf(rpois(100, 10))
#&gt;  x[1:18] =      2,      3,      4,  ...,     18,     19</code></pre>
</div>
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (v)  
#&gt;  - attr(*, "class")= chr [1:3] "ecdf" "stepfun" "function"
#&gt;  - attr(*, "call")= language ecdf(rpois(100, 10))</code></pre>
</div>
</div>
<p>Answer: the code returns an object of class <code>ecdf</code>, which is build on the <code>stepfun</code> object, and the <code>function</code> base type. It additionally includes the <code>call</code> attribute.</p>
<p>AR Solutions: It returns an object of the class <code>ecdf</code> (empirical cumulative distribution function) with the superclasses <code>stepfun</code> and <code>function</code>. The <code>ecdf</code> object is built on the base type <code>closure</code> (a function). The expression, which was used to create it (<code>rpois(100, 10)</code>), is stored in the <code>call</code> attribute.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "closure"</code></pre>
</div>
</div>
<hr>
<ol start="6" type="1">
<li>What class of object does the following code return? What base type is it built on? What attributes does it use?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb46-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt;  1  2  3  4  5  6  7  8  9 10 
#&gt;  7  5 18 14 15 15 14  4  5  3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  'table' int [1:10(1d)] 7 5 18 14 15 15 14 4 5 3
#&gt;  - attr(*, "dimnames")=List of 1
#&gt;   ..$ : chr [1:10] "1" "2" "3" "4" ...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  int [1:10(1d)] 7 5 18 14 15 15 14 4 5 3
#&gt;  - attr(*, "dimnames")=List of 1
#&gt;   ..$ : chr [1:10] "1" "2" "3" "4" ...</code></pre>
</div>
</div>
<p>Answer: per the docs, the code returns an object of class <code>table</code>, which is built on <code>array</code>, which uses the <code>dimnames</code> attribute in combination with a vector.</p>
<p>AR Solutions: This code returns a <code>table</code> object, which is built upon the <code>integer</code> type. The attribute <code>dimnames</code> is used to name the elements of the integer vector.</p>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">13.3.4 Exercises</h2>
<ol type="1">
<li>Write a constructor for <code>data.frame</code> objects. What base type is a data frame built on? What attributes does it use? What are the restrictions placed on the individual elements? What about the names?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; structure(list(), names = character(0), row.names = integer(0), class = "data.frame")</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; structure(list(a = 1:2, b = 3:4), class = "data.frame", row.names = c(NA, 
#&gt; -2L))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $a
#&gt; [1] 1 2
#&gt; 
#&gt; $b
#&gt; [1] 3 4
#&gt; 
#&gt; attr(,"row.names")
#&gt; [1] 1 2</code></pre>
</div>
</div>
<p>Answer: code below. The data frame is built on the list base type, and includes the names, row.names, and class attributes. This implementation requires values to be a list, names to be a character, and row.names to be an integer.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">new_data.frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb58-2">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(values)),</span>
<span id="cb58-3">                           <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(values))) {</span>
<span id="cb58-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb58-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(values),</span>
<span id="cb58-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(names),</span>
<span id="cb58-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(row.names)</span>
<span id="cb58-8">  )</span>
<span id="cb58-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> row.names, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>)</span>
<span id="cb58-10">}</span>
<span id="cb58-11"></span>
<span id="cb58-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; data frame with 0 columns and 0 rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;        
#&gt; 0 1 4 7
#&gt; 0 2 5 8
#&gt; 0 3 6 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   a b c
#&gt; 1 1 4 7
#&gt; 2 2 5 8
#&gt; 3 3 6 9</code></pre>
</div>
</div>
<p>AR Solutions: Data frames are built on named lists of vectors, which all have the same length. Besides the <code>class</code> and the column names (<code>names</code>), the <code>row.names</code> are their only further attribute. This must be a character vector with the same length as the other vectors.</p>
<p>We need to provide the number of rows as an input to make it possible to create data frames with 0 columns but multiple rows.</p>
<p>This leads to the following constructor:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1">new_data.frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, n, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb64-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the underlying object is a list</span></span>
<span id="cb64-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(x))</span>
<span id="cb64-4"></span>
<span id="cb64-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check all inputs are the same length</span></span>
<span id="cb64-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (This check also allows that x has length 0)</span></span>
<span id="cb64-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lengths</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> n))</span>
<span id="cb64-8"></span>
<span id="cb64-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(row.names)) {</span>
<span id="cb64-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use special row names helper from base R</span></span>
<span id="cb64-11">    row.names <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.set_row_names</span>(n)</span>
<span id="cb64-12">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb64-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Otherwise check that they're a character vector with the</span></span>
<span id="cb64-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correct length</span></span>
<span id="cb64-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(row.names), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(row.names) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> n)</span>
<span id="cb64-16">  }</span>
<span id="cb64-17"></span>
<span id="cb64-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb64-19">    x,</span>
<span id="cb64-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.frame"</span>,</span>
<span id="cb64-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> row.names</span>
<span id="cb64-22">  )</span>
<span id="cb64-23">}</span>
<span id="cb64-24"></span>
<span id="cb64-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb64-26">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb64-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   a b
#&gt; 1 1 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    a b
#&gt; l1 1 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a data frame with 0 columns and 2 rows</span></span>
<span id="cb68-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; data frame with 0 columns and 2 rows</code></pre>
</div>
</div>
<p>Note: AR Solutions approach also validates that all inputs are same length, and supports creation of dataframes with 0 columns but multiple rows.</p>
<hr>
<ol start="2" type="1">
<li>Enhance my <code>factor()</code> helper to have better behaviour when one or more <code>values</code> is not found in <code>levels</code>. What does <code>base::factor()</code> do in this situation?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb70-1">new_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>()) {</span>
<span id="cb70-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb70-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x),</span>
<span id="cb70-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(levels)</span>
<span id="cb70-5">  )</span>
<span id="cb70-6"></span>
<span id="cb70-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb70-8">    x,</span>
<span id="cb70-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> levels,</span>
<span id="cb70-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span></span>
<span id="cb70-11">  )</span>
<span id="cb70-12">}</span></code></pre></div>
</div>
<p>Answer: the fix is to update <code>validate_factor()</code> to allow <code>NA</code> values, since the helper already fills in <code>NA</code> when <code>values</code> is not found in <code>levels</code>. This matches the behavior of <code>base::factor()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">validate_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb71-2">  values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(x)</span>
<span id="cb71-3">  levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"levels"</span>)</span>
<span id="cb71-4"></span>
<span id="cb71-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(values) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)) {</span>
<span id="cb71-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb71-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"All non-missing `x` values must be greater than zero"</span>,</span>
<span id="cb71-8">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb71-9">    )</span>
<span id="cb71-10">  }</span>
<span id="cb71-11"></span>
<span id="cb71-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(levels) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(values, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb71-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb71-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There must be at least as many `levels` as possible values in `x`"</span>,</span>
<span id="cb71-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb71-16">    )</span>
<span id="cb71-17">  }</span>
<span id="cb71-18"></span>
<span id="cb71-19">  x</span>
<span id="cb71-20">}</span>
<span id="cb71-21"></span>
<span id="cb71-22">my_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) {</span>
<span id="cb71-23">  ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(x, levels)</span>
<span id="cb71-24">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_factor</span>(ind, levels))</span>
<span id="cb71-25">}</span>
<span id="cb71-26"></span>
<span id="cb71-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] a    a    &lt;NA&gt;
#&gt; Levels: a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] a    a    &lt;NA&gt;
#&gt; Levels: a</code></pre>
</div>
</div>
<p>AR Solutions: <code>base::factor()</code> converts these values (silently) into <code>NA</code>s.</p>
<p>The <code>factor()</code> helper including the constructor (<code>new_factor()</code>) and its validator (<code>validate_factor()</code>) were given in <em>Advanced R</em>. However, as the goal of this question is to throw an early error within the helper, we only repeat the code for the helper:</p>
<p>To improve the <code>factor()</code> helper we choose to return an informative error message instead.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">factor2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x)) {</span>
<span id="cb75-2">  new_levels <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match</span>(x, levels)</span>
<span id="cb75-3"></span>
<span id="cb75-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Error if levels don't include all values</span></span>
<span id="cb75-5">  missing <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(x, levels))</span>
<span id="cb75-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(missing) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb75-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb75-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The following values do not occur in the levels of x: "</span>,</span>
<span id="cb75-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>, missing, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>,</span>
<span id="cb75-10">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb75-11">    )</span>
<span id="cb75-12">  }</span>
<span id="cb75-13"></span>
<span id="cb75-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_factor</span>(new_levels, levels))</span>
<span id="cb75-15">}</span>
<span id="cb75-16"></span>
<span id="cb75-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb75-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : The following values do not occur in the levels of x: 'c'.</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Carefully read the source code of <code>factor()</code>. What does it do that my constructor does not?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"alpha"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] alpha alpha beta  beta 
#&gt; Levels: alpha beta</code></pre>
</div>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "ordered" "factor"</code></pre>
</div>
</div>
<p>Answer: the base implementation:</p>
<ul>
<li>sets the value to <code>character(0)</code> if the value is null</li>
<li>retains value names</li>
<li>allows an upper bound on the number of levels, <code>nmax</code></li>
<li>coerces the value to character</li>
<li>provides a method for excluding values from levels, <code>exclude</code></li>
<li>provides <code>labels</code> for remapping factors</li>
<li>adds an “ordered” class if the value is ordered (<code>ordered = TRUE</code>)</li>
</ul>
<p>Note: labels are an interesting and unexpected feature of <code>factor()</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1">factor</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x = character(), levels, labels = levels, exclude = NA, 
#&gt;     ordered = is.ordered(x), nmax = NA) 
#&gt; {
#&gt;     if (is.null(x)) 
#&gt;         x &lt;- character()
#&gt;     nx &lt;- names(x)
#&gt;     if (missing(levels)) {
#&gt;         y &lt;- unique(x, nmax = nmax)
#&gt;         ind &lt;- order(y)
#&gt;         levels &lt;- unique(as.character(y)[ind])
#&gt;     }
#&gt;     force(ordered)
#&gt;     if (!is.character(x)) 
#&gt;         x &lt;- as.character(x)
#&gt;     levels &lt;- levels[is.na(match(levels, exclude))]
#&gt;     f &lt;- match(x, levels)
#&gt;     if (!is.null(nx)) 
#&gt;         names(f) &lt;- nx
#&gt;     if (missing(labels)) {
#&gt;         levels(f) &lt;- as.character(levels)
#&gt;     }
#&gt;     else {
#&gt;         nlab &lt;- length(labels)
#&gt;         if (nlab == length(levels)) {
#&gt;             nlevs &lt;- unique(xlevs &lt;- as.character(labels))
#&gt;             at &lt;- attributes(f)
#&gt;             at$levels &lt;- nlevs
#&gt;             f &lt;- match(xlevs, nlevs)[f]
#&gt;             attributes(f) &lt;- at
#&gt;         }
#&gt;         else if (nlab == 1L) 
#&gt;             levels(f) &lt;- paste0(labels, seq_along(levels))
#&gt;         else stop(gettextf("invalid 'labels'; length %d should be 1 or %d", 
#&gt;             nlab, length(levels)), domain = NA)
#&gt;     }
#&gt;     class(f) &lt;- c(if (ordered) "ordered", "factor")
#&gt;     f
#&gt; }
#&gt; &lt;bytecode: 0x157406908&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>AR Solutions: The original implementation (<code>base::factor()</code>) allows more flexible input for <code>x</code>. It coerces <code>x</code> to character or replaces it with <code>character(0)</code> (in case of <code>NULL</code>). It also ensures that the <code>levels</code> are unique. This is achieved by setting them via <code>base::levels&lt;-</code>, which fails when duplicate values are supplied.</p>
<p>Note: I missed the fact that <code>base::levels&lt;-</code> fails when duplicate values are supplied.</p>
<hr>
<ol start="4" type="1">
<li>Factors have an optional “contrasts” attribute. Read the help for <code>C()</code>, and briefly describe the purpose of the attribute. What type should it have? Rewrite the <code>new_factor()</code> constructor to include this attribute.</li>
</ol>
<p>Answer: per the “contrast {stats}” documentation, contrast matrices are used in fitting analysis of variance and regression models, so the attribute should be a matrix.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">new_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contr =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>()) {</span>
<span id="cb83-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(levels), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(contr))</span>
<span id="cb83-3"></span>
<span id="cb83-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb83-5">    x,</span>
<span id="cb83-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> levels,</span>
<span id="cb83-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>,</span>
<span id="cb83-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrasts =</span> contr</span>
<span id="cb83-9">  )</span>
<span id="cb83-10">}</span></code></pre></div>
</div>
<p>AR Solutions: When factor variables (representing nominal or ordinal information) are used in statistical models, they are typically encoded as dummy variables and by default each level is compared with the first factor level. However, many different encodings (“contrasts”) are possible, see <a href="https://en.wikipedia.org/wiki/Contrast_(statistics)">Contrast</a>.</p>
<p>Within R’s formula interface you can wrap a factor in <code>stats::C()</code> and specify the contrast of your choice. Alternatively, you can set the <code>contrasts</code> attribute of your factor variable, which accepts matrix input. (See <code>?contr.helmert</code> or similar for details.)</p>
<p>Our updated <code>new_factor()</code> constructor gets a <code>contrasts</code> argument, which accepts a numeric matrix or <code>NULL</code> (default).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb84-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Updated new_factor() constructor</span></span>
<span id="cb84-2">new_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb84-3">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb84-4">                       <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrasts =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>) {</span>
<span id="cb84-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span>
<span id="cb84-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(levels))</span>
<span id="cb84-7"></span>
<span id="cb84-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(constrasts)) {</span>
<span id="cb84-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(contrasts) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.numeric</span>(contrasts)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: conjunct_test_linter.</span></span>
<span id="cb84-10">  }</span>
<span id="cb84-11"></span>
<span id="cb84-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb84-13">    x,</span>
<span id="cb84-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> levels,</span>
<span id="cb84-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>,</span>
<span id="cb84-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contrasts =</span> contrasts</span>
<span id="cb84-17">  )</span>
<span id="cb84-18">}</span></code></pre></div>
</div>
<hr>
<ol start="5" type="1">
<li>Read the documentation for <code>utils::as.roman()</code>. How would you write a constructor for this class? Does it need a validator? What might a helper do?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.roman</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3899</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; structure(3899L, class = "roman")</code></pre>
</div>
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">new_roman <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>()) {</span>
<span id="cb87-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span>
<span id="cb87-3"></span>
<span id="cb87-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb87-5">    x,</span>
<span id="cb87-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"roman"</span></span>
<span id="cb87-7">  )</span>
<span id="cb87-8">}</span>
<span id="cb87-9"></span>
<span id="cb87-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_roman</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] MMXXII</code></pre>
</div>
</div>
<p>Answer: the structure of the class “roman” is simple, an integer with a defined class. A simple constructor would take an integer and return an object of class “roman” as above. A validator is probably not needed, but could validate that the integer is within the supported range of integers (1-3899). A helper might coerce the number to be an integer using <code>as.integer()</code>.</p>
<p>AR Solutions: This function transforms numeric input into Roman numbers. It is built on the integer type, which results in the following constructor.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">new_roman <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>()) {</span>
<span id="cb89-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(x))</span>
<span id="cb89-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"roman"</span>)</span>
<span id="cb89-4">}</span></code></pre></div>
</div>
<p>The documentation tells us, that only values between 1 and 3899 are uniquely represented, which we then include in our validation function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1">validate_roman <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb90-2">  values <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(x)</span>
<span id="cb90-3"></span>
<span id="cb90-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3899</span>)) {</span>
<span id="cb90-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb90-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Roman numbers must fall between 1 and 3899."</span>,</span>
<span id="cb90-7">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb90-8">    )</span>
<span id="cb90-9">  }</span>
<span id="cb90-10"></span>
<span id="cb90-11">  x</span>
<span id="cb90-12">}</span></code></pre></div>
</div>
<p>For convenience, we allow the user to also pass real values to a helper function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1">roman <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>()) {</span>
<span id="cb91-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(x)</span>
<span id="cb91-3"></span>
<span id="cb91-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_roman</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_roman</span>(x))</span>
<span id="cb91-5">}</span>
<span id="cb91-6"></span>
<span id="cb91-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb91-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roman</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">753</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] I       DCCLIII MMXIX</code></pre>
</div>
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">roman</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Roman numbers must fall between 1 and 3899.</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">13.4.4 Exercises</h2>
<ol type="1">
<li>Read the source code for <code>t()</code> and <code>t.test()</code> and confirm that <code>t.test()</code> is an S3 generic and not an S3 method. What happens if you create an object with class <code>test</code> and call <code>t()</code> with it? Why?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>)</span>
<span id="cb95-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
#&gt; [1,]    1    2    3    4    5    6    7    8    9    10
#&gt; attr(,"class")
#&gt; [1] "test"</code></pre>
</div>
</div>
<p>Answer: both <code>t()</code> and <code>t.test()</code> simply call <code>UseMethod()</code>, and are S3 generics.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1">t</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; UseMethod("t")
#&gt; &lt;bytecode: 0x132ecb330&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1">t.test</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; UseMethod("t.test")
#&gt; &lt;bytecode: 0x1271e5f78&gt;
#&gt; &lt;environment: namespace:stats&gt;</code></pre>
</div>
</div>
<p>Creating an object with class <code>test</code> and calling <code>t()</code> uses the default method since <code>t.test()</code> is not a registered method for <code>t()</code>, as this code shows:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">methods</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"t"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] t.data.frame  t.default     t.ts*         t.vctrs_sclr* t.vctrs_vctr*
#&gt; see '?methods' for accessing help and source code</code></pre>
</div>
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; t.test
#&gt;  * t.default</code></pre>
</div>
</div>
<p>AR Solutions: We can see that <code>t.test()</code> is a generic because it calls <code>UseMethod()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># or simply call</span></span>
<span id="cb105-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(t.test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "S3"      "generic"</code></pre>
</div>
</div>
<p>Interestingly, R also provides helpers, which list functions that look like methods, but in fact are not:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb107-1">tools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nonS3methods</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stats"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "anova.lmlist"        "expand.model.frame"  "fitted.values"      
#&gt; [4] "influence.measures"  "lag.plot"            "t.test"             
#&gt; [7] "plot.spec.phase"     "plot.spec.coherency"</code></pre>
</div>
</div>
<p>When we create an object with class <code>test</code>, <code>t()</code> dispatches to the <code>t.default()</code> method. This happens, because <code>UseMethod()</code> simply searches for functions named <code>paste0("generic", ".", c(class(x), "default"))</code>.</p>
<p>However, in older versions of R (pre R 4.0.0; when <em>Advanced R</em> was written) this behaviour was slightly different. Instead of dispatching to the <code>t.default()</code> method, the <code>t.test()</code> generic was erroneously treated as a method of <code>t()</code> which then dispatched to <code>t.test.default()</code> or (when defined) to <code>t.test.test()</code>.</p>
<hr>
<ol start="2" type="1">
<li>What generics does the <code>table</code> class have methods for?</li>
</ol>
<p>Answer: <code>s3_methods_class()</code> answers this question:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb109-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 11 × 4
#&gt;    generic       class visible source             
#&gt;    &lt;chr&gt;         &lt;chr&gt; &lt;lgl&gt;   &lt;chr&gt;              
#&gt;  1 [             table TRUE    base               
#&gt;  2 aperm         table TRUE    base               
#&gt;  3 as_tibble     table FALSE   registered S3method
#&gt;  4 as.data.frame table TRUE    base               
#&gt;  5 Axis          table FALSE   registered S3method
#&gt;  6 lines         table FALSE   registered S3method
#&gt;  7 plot          table FALSE   registered S3method
#&gt;  8 points        table FALSE   registered S3method
#&gt;  9 print         table TRUE    base               
#&gt; 10 summary       table TRUE    base               
#&gt; 11 tail          table FALSE   registered S3method</code></pre>
</div>
</div>
<p>AR Solutions: This is a simple application of <code>sloop::s3_methods_class()</code>.</p>
<p>Interestingly, the <code>table</code> class has a number of methods designed to help plotting with base graphics.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb111-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb111-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(x))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-3_files/figure-html/unnamed-chunk-28-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>What generics does the <code>ecdf</code> class have methods for?</li>
</ol>
<p>Answer:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ecdf"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 4 × 4
#&gt;   generic  class visible source             
#&gt;   &lt;chr&gt;    &lt;chr&gt; &lt;lgl&gt;   &lt;chr&gt;              
#&gt; 1 plot     ecdf  TRUE    stats              
#&gt; 2 print    ecdf  FALSE   registered S3method
#&gt; 3 quantile ecdf  FALSE   registered S3method
#&gt; 4 summary  ecdf  FALSE   registered S3method</code></pre>
</div>
</div>
<p>AR Solutions: We use the same approach as above.</p>
<p>The methods are primarily designed for display (<code>plot()</code>, <code>print()</code>, <code>summary()</code>), but you can also extract quantiles with <code>quantile()</code>.</p>
<hr>
<ol start="4" type="1">
<li>Which base generic has the greatest number of defined methods?</li>
</ol>
<p>Answer: using code from 6.2.5, identify generics and count defined methods:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from 6.2.5 exercises, this code makes a list of all functions in the base package</span></span>
<span id="cb114-2">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(is.function, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mget</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:base"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb114-3"></span>
<span id="cb114-4">get_method_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fname) {</span>
<span id="cb114-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb114-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> fname,</span>
<span id="cb114-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this code should work but doesn't:</span></span>
<span id="cb114-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># method_count = nrow(s3_methods_generic(fname))</span></span>
<span id="cb114-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method_count =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">methods</span>(fname))</span>
<span id="cb114-10">  )</span>
<span id="cb114-11">}</span>
<span id="cb114-12"></span>
<span id="cb114-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dfr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(funs), get_method_count) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb114-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrange</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">desc</span>(method_count))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                                    name method_count
#&gt; 1                                 print          276
#&gt; 2                                format          124
#&gt; 3                                     [           49
#&gt; 4                               summary           39
#&gt; 5                          as.character           32
#&gt; 6                         as.data.frame           32
#&gt; 7                                  plot           30
#&gt; 8                                    [[           22
#&gt; 9                                   [&lt;-           18
#&gt; 10                                  $&lt;-           18
#&gt; 11                                    $           17
#&gt; 12                                 file           17
#&gt; 13                                 [[&lt;-           15
#&gt; 14                              as.list           15
#&gt; 15                                    c           15
#&gt; 16                            all.equal           12
#&gt; 17                                xtfrm           11
#&gt; 18                                  rep           10
#&gt; 19                               unique           10
#&gt; 20                           duplicated            9
#&gt; 21                              as.Date            8
#&gt; 22                            as.matrix            8
#&gt; 23                           as.POSIXlt            7
#&gt; 24                             length&lt;-            7
#&gt; 25                                 mean            7
#&gt; 26                              names&lt;-            7
#&gt; 27                                  row            7
#&gt; 28                        anyDuplicated            6
#&gt; 29                           as.POSIXct            6
#&gt; 30                                 diff            6
#&gt; 31                               length            6
#&gt; 32                                write            6
#&gt; 33                                anyNA            5
#&gt; 34                     conditionMessage            5
#&gt; 35                                is.na            5
#&gt; 36                              is.na&lt;-            5
#&gt; 37                               labels            5
#&gt; 38                                names            5
#&gt; 39                                    t            5
#&gt; 40                                    -            4
#&gt; 41                                    +            4
#&gt; 42                            as.double            4
#&gt; 43                            as.vector            4
#&gt; 44                                close            4
#&gt; 45                                  cut            4
#&gt; 46                                 open            4
#&gt; 47                                split            4
#&gt; 48                               subset            4
#&gt; 49                                    !            3
#&gt; 50                                    &amp;            3
#&gt; 51                                    |            3
#&gt; 52                           as.logical            3
#&gt; 53                                cbind            3
#&gt; 54                           dimnames&lt;-            3
#&gt; 55                           is.numeric            3
#&gt; 56                                kappa            3
#&gt; 57                               levels            3
#&gt; 58                             levels&lt;-            3
#&gt; 59                                   ls            3
#&gt; 60                                match            3
#&gt; 61                                merge            3
#&gt; 62                               pretty            3
#&gt; 63                          row.names&lt;-            3
#&gt; 64                                  seq            3
#&gt; 65                                 sort            3
#&gt; 66                            transform            3
#&gt; 67                                    *            2
#&gt; 68                                    /            2
#&gt; 69                                aperm            2
#&gt; 70                           as.integer            2
#&gt; 71                             as.table            2
#&gt; 72                               body&lt;-            2
#&gt; 73                                   by            2
#&gt; 74                                dim&lt;-            2
#&gt; 75                             dimnames            2
#&gt; 76                                  dir            2
#&gt; 77                                 drop            2
#&gt; 78                           droplevels            2
#&gt; 79             getDLLRegisteredRoutines            2
#&gt; 80                            intersect            2
#&gt; 81                            is.finite            2
#&gt; 82                          is.infinite            2
#&gt; 83                               is.nan            2
#&gt; 84                               julian            2
#&gt; 85                              library            2
#&gt; 86                                 list            2
#&gt; 87                                  max            2
#&gt; 88                                  min            2
#&gt; 89                               months            2
#&gt; 90                                   qr            2
#&gt; 91                             quarters            2
#&gt; 92                                range            2
#&gt; 93                                rbind            2
#&gt; 94                                  rev            2
#&gt; 95                                round            2
#&gt; 96                            row.names            2
#&gt; 97                               rowsum            2
#&gt; 98                              setdiff            2
#&gt; 99                             setequal            2
#&gt; 100                               solve            2
#&gt; 101                             split&lt;-            2
#&gt; 102                              system            2
#&gt; 103                               trunc            2
#&gt; 104                               union            2
#&gt; 105                              unlist            2
#&gt; 106                            weekdays            2
#&gt; 107                               which            2
#&gt; 108                              within            2
#&gt; 109                                  !=            1
#&gt; 110                                 %/%            1
#&gt; 111                                  %%            1
#&gt; 112                                   ^            1
#&gt; 113                                   &lt;            1
#&gt; 114                                  &lt;=            1
#&gt; 115                                  ==            1
#&gt; 116                                   &gt;            1
#&gt; 117                                  &gt;=            1
#&gt; 118                            as.array            1
#&gt; 119                      as.environment            1
#&gt; 120                       as.expression            1
#&gt; 121                         as.function            1
#&gt; 122                             as.null            1
#&gt; 123                           as.single            1
#&gt; 124                                attr            1
#&gt; 125                                chol            1
#&gt; 126                     chooseOpsMethod            1
#&gt; 127                       conditionCall            1
#&gt; 128                         determinant            1
#&gt; 129                                 dim            1
#&gt; 130                                dump            1
#&gt; 131                                eval            1
#&gt; 132                              factor            1
#&gt; 133                               flush            1
#&gt; 134                                  gc            1
#&gt; 135                         interaction            1
#&gt; 136                         isSymmetric            1
#&gt; 137                           kronecker            1
#&gt; 138                             lengths            1
#&gt; 139                       library.dynam            1
#&gt; 140                               mtfrm            1
#&gt; 141                         nameOfClass            1
#&gt; 142                               order            1
#&gt; 143                                pmax            1
#&gt; 144                                pmin            1
#&gt; 145                              remove            1
#&gt; 146                              sample            1
#&gt; 147                                save            1
#&gt; 148                               scale            1
#&gt; 149                                seek            1
#&gt; 150                            sequence            1
#&gt; 151                                sink            1
#&gt; 152                                 sum            1
#&gt; 153                            toString            1
#&gt; 154                            truncate            1
#&gt; 155                               units            1
#&gt; 156                             units&lt;-            1
#&gt; 157                                 url            1
#&gt; 158                                with            1
#&gt; 159                              -.Date            0
#&gt; 160                            -.POSIXt            0
#&gt; 161                                   :            0
#&gt; 162                                  ::            0
#&gt; 163                                 :::            0
#&gt; 164                           !.hexmode            0
#&gt; 165                           !.octmode            0
#&gt; 166                        .__H__.cbind            0
#&gt; 167                        .__H__.rbind            0
#&gt; 168                              ...elt            0
#&gt; 169                           ...length            0
#&gt; 170                            ...names            0
#&gt; 171                      ..getNamespace            0
#&gt; 172                      .amatch_bounds            0
#&gt; 173                       .amatch_costs            0
#&gt; 174                            .bincode            0
#&gt; 175                                  .C            0
#&gt; 176                        .cache_class            0
#&gt; 177                               .Call            0
#&gt; 178                      .Call.graphics            0
#&gt; 179                       .check_tzones            0
#&gt; 180                             .class2            0
#&gt; 181                                .col            0
#&gt; 182                           .colMeans            0
#&gt; 183                            .colSums            0
#&gt; 184                               .Date            0
#&gt; 185             .decode_numeric_version            0
#&gt; 186                            .Defunct            0
#&gt; 187                        .deparseOpts            0
#&gt; 188                         .Deprecated            0
#&gt; 189                             .detach            0
#&gt; 190                           .difftime            0
#&gt; 191                         .doSortWrap            0
#&gt; 192                            .doTrace            0
#&gt; 193                             .doWrap            0
#&gt; 194                            .dynLibs            0
#&gt; 195             .encode_numeric_version            0
#&gt; 196              .expand_R_libs_env_var            0
#&gt; 197                           .External            0
#&gt; 198                  .External.graphics            0
#&gt; 199                          .External2            0
#&gt; 200                          .First.sys            0
#&gt; 201                       .format.zeros            0
#&gt; 202                    .formula2varlist            0
#&gt; 203                            .Fortran            0
#&gt; 204                       .getNamespace            0
#&gt; 205                   .getNamespaceInfo            0
#&gt; 206                .getRequiredPackages            0
#&gt; 207               .getRequiredPackages2            0
#&gt; 208                                 .gt            0
#&gt; 209                                .gtn            0
#&gt; 210                  .handleSimpleError            0
#&gt; 211                           .Internal            0
#&gt; 212                .isMethodsDispatchOn            0
#&gt; 213                             .isOpen            0
#&gt; 214                          .kappa_tri            0
#&gt; 215                          .kronecker            0
#&gt; 216                           .libPaths            0
#&gt; 217               .make_numeric_version            0
#&gt; 218                        .makeMessage            0
#&gt; 219                             .mapply            0
#&gt; 220                          .maskedMsg            0
#&gt; 221                 .mergeExportMethods            0
#&gt; 222                 .mergeImportMethods            0
#&gt; 223                  .NotYetImplemented            0
#&gt; 224                         .NotYetUsed            0
#&gt; 225                  .OptRequireMethods            0
#&gt; 226                           .packages            0
#&gt; 227              .packageStartupMessage            0
#&gt; 228                            .POSIXct            0
#&gt; 229                            .POSIXlt            0
#&gt; 230                             .pretty            0
#&gt; 231                          .Primitive            0
#&gt; 232                          .primTrace            0
#&gt; 233                        .primUntrace            0
#&gt; 234                              .rmpkg            0
#&gt; 235                                .row            0
#&gt; 236                     .row_names_info            0
#&gt; 237                           .rowMeans            0
#&gt; 238                       .rowNamesDF&lt;-            0
#&gt; 239                            .rowSums            0
#&gt; 240                           .S3method            0
#&gt; 241                             .Script            0
#&gt; 242                      .set_row_names            0
#&gt; 243                .signalSimpleWarning            0
#&gt; 244                   .standard_regexps            0
#&gt; 245                             .subset            0
#&gt; 246                            .subset2            0
#&gt; 247                      .TAOCP1997init            0
#&gt; 248                          .traceback            0
#&gt; 249                 .tryResumeInterrupt            0
#&gt; 250                       .valid.factor            0
#&gt; 251                                   (            0
#&gt; 252                              [.AsIs            0
#&gt; 253                        [.data.frame            0
#&gt; 254                              [.Date            0
#&gt; 255                          [.difftime            0
#&gt; 256                             [.Dlist            0
#&gt; 257                       [.DLLInfoList            0
#&gt; 258                            [.factor            0
#&gt; 259                           [.hexmode            0
#&gt; 260                            [.listof            0
#&gt; 261                           [.noquote            0
#&gt; 262                   [.numeric_version            0
#&gt; 263                           [.octmode            0
#&gt; 264                           [.POSIXct            0
#&gt; 265                           [.POSIXlt            0
#&gt; 266                       [.simple.list            0
#&gt; 267                             [.table            0
#&gt; 268                          [.warnings            0
#&gt; 269                       [[.data.frame            0
#&gt; 270                             [[.Date            0
#&gt; 271                           [[.factor            0
#&gt; 272                  [[.numeric_version            0
#&gt; 273                          [[.POSIXct            0
#&gt; 274                          [[.POSIXlt            0
#&gt; 275                     [[&lt;-.data.frame            0
#&gt; 276                         [[&lt;-.factor            0
#&gt; 277                [[&lt;-.numeric_version            0
#&gt; 278                        [[&lt;-.POSIXlt            0
#&gt; 279                      [&lt;-.data.frame            0
#&gt; 280                            [&lt;-.Date            0
#&gt; 281                        [&lt;-.difftime            0
#&gt; 282                          [&lt;-.factor            0
#&gt; 283                 [&lt;-.numeric_version            0
#&gt; 284                         [&lt;-.POSIXct            0
#&gt; 285                         [&lt;-.POSIXlt            0
#&gt; 286                                   {            0
#&gt; 287                                   @            0
#&gt; 288                                 @&lt;-            0
#&gt; 289                          *.difftime            0
#&gt; 290                          /.difftime            0
#&gt; 291                           &amp;.hexmode            0
#&gt; 292                           &amp;.octmode            0
#&gt; 293                                  &amp;&amp;            0
#&gt; 294                                 %*%            0
#&gt; 295                                %in%            0
#&gt; 296                                 %o%            0
#&gt; 297                                 %x%            0
#&gt; 298                              +.Date            0
#&gt; 299                            +.POSIXt            0
#&gt; 300                                  &lt;-            0
#&gt; 301                                 &lt;&lt;-            0
#&gt; 302                                   =            0
#&gt; 303                           |.hexmode            0
#&gt; 304                           |.octmode            0
#&gt; 305                                  ||            0
#&gt; 306                                   ~            0
#&gt; 307                           $.DLLInfo            0
#&gt; 308                   $.package_version            0
#&gt; 309                      $&lt;-.data.frame            0
#&gt; 310                         $&lt;-.POSIXlt            0
#&gt; 311                          abbreviate            0
#&gt; 312                                 abs            0
#&gt; 313                                acos            0
#&gt; 314                               acosh            0
#&gt; 315               activeBindingFunction            0
#&gt; 316                               addNA            0
#&gt; 317                     addTaskCallback            0
#&gt; 318                               agrep            0
#&gt; 319                              agrepl            0
#&gt; 320                               alist            0
#&gt; 321                                 all            0
#&gt; 322                 all.equal.character            0
#&gt; 323                   all.equal.default            0
#&gt; 324               all.equal.environment            0
#&gt; 325               all.equal.envRefClass            0
#&gt; 326                    all.equal.factor            0
#&gt; 327                   all.equal.formula            0
#&gt; 328                  all.equal.function            0
#&gt; 329                  all.equal.language            0
#&gt; 330                      all.equal.list            0
#&gt; 331                   all.equal.numeric            0
#&gt; 332                    all.equal.POSIXt            0
#&gt; 333                       all.equal.raw            0
#&gt; 334                           all.names            0
#&gt; 335                            all.vars            0
#&gt; 336                     allowInterrupts            0
#&gt; 337                                 any            0
#&gt; 338                 anyDuplicated.array            0
#&gt; 339            anyDuplicated.data.frame            0
#&gt; 340               anyDuplicated.default            0
#&gt; 341                anyDuplicated.matrix            0
#&gt; 342                    anyNA.data.frame            0
#&gt; 343               anyNA.numeric_version            0
#&gt; 344                       anyNA.POSIXlt            0
#&gt; 345                       aperm.default            0
#&gt; 346                         aperm.table            0
#&gt; 347                              append            0
#&gt; 348                               apply            0
#&gt; 349                                 Arg            0
#&gt; 350                                args            0
#&gt; 351                               array            0
#&gt; 352                            array2DF            0
#&gt; 353                            arrayInd            0
#&gt; 354                    as.array.default            0
#&gt; 355                             as.call            0
#&gt; 356              as.character.condition            0
#&gt; 357                   as.character.Date            0
#&gt; 358                as.character.default            0
#&gt; 359                  as.character.error            0
#&gt; 360                 as.character.factor            0
#&gt; 361                as.character.hexmode            0
#&gt; 362        as.character.numeric_version            0
#&gt; 363                as.character.octmode            0
#&gt; 364                 as.character.POSIXt            0
#&gt; 365                 as.character.srcref            0
#&gt; 366                          as.complex            0
#&gt; 367                 as.data.frame.array            0
#&gt; 368                  as.data.frame.AsIs            0
#&gt; 369             as.data.frame.character            0
#&gt; 370               as.data.frame.complex            0
#&gt; 371            as.data.frame.data.frame            0
#&gt; 372                  as.data.frame.Date            0
#&gt; 373               as.data.frame.default            0
#&gt; 374              as.data.frame.difftime            0
#&gt; 375                as.data.frame.factor            0
#&gt; 376               as.data.frame.integer            0
#&gt; 377                  as.data.frame.list            0
#&gt; 378               as.data.frame.logical            0
#&gt; 379                as.data.frame.matrix            0
#&gt; 380          as.data.frame.model.matrix            0
#&gt; 381               as.data.frame.noquote            0
#&gt; 382               as.data.frame.numeric            0
#&gt; 383       as.data.frame.numeric_version            0
#&gt; 384               as.data.frame.ordered            0
#&gt; 385               as.data.frame.POSIXct            0
#&gt; 386               as.data.frame.POSIXlt            0
#&gt; 387                   as.data.frame.raw            0
#&gt; 388                 as.data.frame.table            0
#&gt; 389                    as.data.frame.ts            0
#&gt; 390                as.data.frame.vector            0
#&gt; 391                   as.Date.character            0
#&gt; 392                     as.Date.default            0
#&gt; 393                      as.Date.factor            0
#&gt; 394                     as.Date.numeric            0
#&gt; 395                     as.Date.POSIXct            0
#&gt; 396                     as.Date.POSIXlt            0
#&gt; 397                         as.difftime            0
#&gt; 398                  as.double.difftime            0
#&gt; 399                   as.double.POSIXlt            0
#&gt; 400               as.expression.default            0
#&gt; 401                           as.factor            0
#&gt; 402                 as.function.default            0
#&gt; 403                          as.hexmode            0
#&gt; 404                  as.list.data.frame            0
#&gt; 405                        as.list.Date            0
#&gt; 406                     as.list.default            0
#&gt; 407                    as.list.difftime            0
#&gt; 408                 as.list.environment            0
#&gt; 409                      as.list.factor            0
#&gt; 410                    as.list.function            0
#&gt; 411             as.list.numeric_version            0
#&gt; 412                     as.list.POSIXct            0
#&gt; 413                     as.list.POSIXlt            0
#&gt; 414                   as.logical.factor            0
#&gt; 415                as.matrix.data.frame            0
#&gt; 416                   as.matrix.default            0
#&gt; 417                   as.matrix.noquote            0
#&gt; 418                   as.matrix.POSIXlt            0
#&gt; 419                             as.name            0
#&gt; 420                     as.null.default            0
#&gt; 421                          as.numeric            0
#&gt; 422                  as.numeric_version            0
#&gt; 423                          as.octmode            0
#&gt; 424                          as.ordered            0
#&gt; 425                  as.package_version            0
#&gt; 426                         as.pairlist            0
#&gt; 427                     as.POSIXct.Date            0
#&gt; 428                  as.POSIXct.default            0
#&gt; 429                  as.POSIXct.numeric            0
#&gt; 430                  as.POSIXct.POSIXlt            0
#&gt; 431                as.POSIXlt.character            0
#&gt; 432                     as.POSIXlt.Date            0
#&gt; 433                  as.POSIXlt.default            0
#&gt; 434                   as.POSIXlt.factor            0
#&gt; 435                  as.POSIXlt.numeric            0
#&gt; 436                  as.POSIXlt.POSIXct            0
#&gt; 437                               as.qr            0
#&gt; 438                              as.raw            0
#&gt; 439                   as.single.default            0
#&gt; 440                           as.symbol            0
#&gt; 441                    as.table.default            0
#&gt; 442                as.vector.data.frame            0
#&gt; 443                    as.vector.factor            0
#&gt; 444                   as.vector.POSIXlt            0
#&gt; 445                                asin            0
#&gt; 446                               asinh            0
#&gt; 447                         asNamespace            0
#&gt; 448                              asplit            0
#&gt; 449                                asS3            0
#&gt; 450                                asS4            0
#&gt; 451                              assign            0
#&gt; 452                                atan            0
#&gt; 453                               atan2            0
#&gt; 454                               atanh            0
#&gt; 455                              attach            0
#&gt; 456                     attachNamespace            0
#&gt; 457                      attr.all.equal            0
#&gt; 458                              attr&lt;-            0
#&gt; 459                          attributes            0
#&gt; 460                        attributes&lt;-            0
#&gt; 461                            autoload            0
#&gt; 462                          autoloader            0
#&gt; 463                           backsolve            0
#&gt; 464                      balancePOSIXlt            0
#&gt; 465                             baseenv            0
#&gt; 466                            basename            0
#&gt; 467                             besselI            0
#&gt; 468                             besselJ            0
#&gt; 469                             besselK            0
#&gt; 470                             besselY            0
#&gt; 471                                beta            0
#&gt; 472                     bindingIsActive            0
#&gt; 473                     bindingIsLocked            0
#&gt; 474                      bindtextdomain            0
#&gt; 475                             bitwAnd            0
#&gt; 476                             bitwNot            0
#&gt; 477                              bitwOr            0
#&gt; 478                          bitwShiftL            0
#&gt; 479                          bitwShiftR            0
#&gt; 480                             bitwXor            0
#&gt; 481                                body            0
#&gt; 482                              bquote            0
#&gt; 483                               break            0
#&gt; 484                             browser            0
#&gt; 485                    browserCondition            0
#&gt; 486                     browserSetDebug            0
#&gt; 487                         browserText            0
#&gt; 488                            builtins            0
#&gt; 489                       by.data.frame            0
#&gt; 490                          by.default            0
#&gt; 491                              bzfile            0
#&gt; 492                              c.Date            0
#&gt; 493                          c.difftime            0
#&gt; 494                            c.factor            0
#&gt; 495                           c.noquote            0
#&gt; 496                   c.numeric_version            0
#&gt; 497                           c.POSIXct            0
#&gt; 498                           c.POSIXlt            0
#&gt; 499                          c.warnings            0
#&gt; 500                                call            0
#&gt; 501                              callCC            0
#&gt; 502                        capabilities            0
#&gt; 503                            casefold            0
#&gt; 504                                 cat            0
#&gt; 505                    cbind.data.frame            0
#&gt; 506                             ceiling            0
#&gt; 507                         char.expand            0
#&gt; 508                           character            0
#&gt; 509                           charmatch            0
#&gt; 510                           charToRaw            0
#&gt; 511                              chartr            0
#&gt; 512                             chkDots            0
#&gt; 513                        chol.default            0
#&gt; 514                            chol2inv            0
#&gt; 515                              choose            0
#&gt; 516             chooseOpsMethod.default            0
#&gt; 517                               class            0
#&gt; 518                             class&lt;-            0
#&gt; 519                       clearPushBack            0
#&gt; 520                    close.connection            0
#&gt; 521                       close.srcfile            0
#&gt; 522                  close.srcfilealias            0
#&gt; 523                 closeAllConnections            0
#&gt; 524                                 col            0
#&gt; 525                            colMeans            0
#&gt; 526                            colnames            0
#&gt; 527                          colnames&lt;-            0
#&gt; 528                             colSums            0
#&gt; 529                         commandArgs            0
#&gt; 530                             comment            0
#&gt; 531                           comment&lt;-            0
#&gt; 532                             complex            0
#&gt; 533                     computeRestarts            0
#&gt; 534             conditionCall.condition            0
#&gt; 535          conditionMessage.condition            0
#&gt; 536                       conflictRules            0
#&gt; 537                           conflicts            0
#&gt; 538                                Conj            0
#&gt; 539                        contributors            0
#&gt; 540                                 cos            0
#&gt; 541                                cosh            0
#&gt; 542                               cospi            0
#&gt; 543                           crossprod            0
#&gt; 544                         Cstack_info            0
#&gt; 545                              cummax            0
#&gt; 546                              cummin            0
#&gt; 547                             cumprod            0
#&gt; 548                              cumsum            0
#&gt; 549                      curlGetHeaders            0
#&gt; 550                            cut.Date            0
#&gt; 551                         cut.default            0
#&gt; 552                          cut.POSIXt            0
#&gt; 553                          data.class            0
#&gt; 554                          data.frame            0
#&gt; 555                         data.matrix            0
#&gt; 556                                date            0
#&gt; 557                               debug            0
#&gt; 558                      debuggingState            0
#&gt; 559                           debugonce            0
#&gt; 560            default.stringsAsFactors            0
#&gt; 561                       delayedAssign            0
#&gt; 562                             deparse            0
#&gt; 563                            deparse1            0
#&gt; 564                                 det            0
#&gt; 565                              detach            0
#&gt; 566                  determinant.matrix            0
#&gt; 567                                dget            0
#&gt; 568                                diag            0
#&gt; 569                              diag&lt;-            0
#&gt; 570                           diff.Date            0
#&gt; 571                        diff.default            0
#&gt; 572                       diff.difftime            0
#&gt; 573                         diff.POSIXt            0
#&gt; 574                            difftime            0
#&gt; 575                             digamma            0
#&gt; 576                      dim.data.frame            0
#&gt; 577                 dimnames.data.frame            0
#&gt; 578               dimnames&lt;-.data.frame            0
#&gt; 579                          dir.create            0
#&gt; 580                          dir.exists            0
#&gt; 581                             dirname            0
#&gt; 582                             do.call            0
#&gt; 583                           dontCheck            0
#&gt; 584                              double            0
#&gt; 585                                dput            0
#&gt; 586                              dQuote            0
#&gt; 587               droplevels.data.frame            0
#&gt; 588                   droplevels.factor            0
#&gt; 589                    duplicated.array            0
#&gt; 590               duplicated.data.frame            0
#&gt; 591                  duplicated.default            0
#&gt; 592                   duplicated.matrix            0
#&gt; 593          duplicated.numeric_version            0
#&gt; 594                  duplicated.POSIXlt            0
#&gt; 595                 duplicated.warnings            0
#&gt; 596                            dyn.load            0
#&gt; 597                          dyn.unload            0
#&gt; 598                              dynGet            0
#&gt; 599                              eapply            0
#&gt; 600                               eigen            0
#&gt; 601                            emptyenv            0
#&gt; 602                          enc2native            0
#&gt; 603                            enc2utf8            0
#&gt; 604                        encodeString            0
#&gt; 605                            Encoding            0
#&gt; 606                          Encoding&lt;-            0
#&gt; 607                            endsWith            0
#&gt; 608                             enquote            0
#&gt; 609                         env.profile            0
#&gt; 610                         environment            0
#&gt; 611                       environment&lt;-            0
#&gt; 612                 environmentIsLocked            0
#&gt; 613                     environmentName            0
#&gt; 614                      errorCondition            0
#&gt; 615                         eval.parent            0
#&gt; 616                               evalq            0
#&gt; 617                              exists            0
#&gt; 618                                 exp            0
#&gt; 619                         expand.grid            0
#&gt; 620                               expm1            0
#&gt; 621                          expression            0
#&gt; 622                      extSoftVersion            0
#&gt; 623                           factorial            0
#&gt; 624                                fifo            0
#&gt; 625                         file.access            0
#&gt; 626                         file.append            0
#&gt; 627                         file.choose            0
#&gt; 628                           file.copy            0
#&gt; 629                         file.create            0
#&gt; 630                         file.exists            0
#&gt; 631                           file.info            0
#&gt; 632                           file.link            0
#&gt; 633                           file.mode            0
#&gt; 634                          file.mtime            0
#&gt; 635                           file.path            0
#&gt; 636                         file.remove            0
#&gt; 637                         file.rename            0
#&gt; 638                           file.show            0
#&gt; 639                           file.size            0
#&gt; 640                        file.symlink            0
#&gt; 641                              Filter            0
#&gt; 642                                Find            0
#&gt; 643                        find.package            0
#&gt; 644                        findInterval            0
#&gt; 645                      findPackageEnv            0
#&gt; 646                         findRestart            0
#&gt; 647                               floor            0
#&gt; 648                    flush.connection            0
#&gt; 649                                 for            0
#&gt; 650                               force            0
#&gt; 651                        forceAndCall            0
#&gt; 652                             formals            0
#&gt; 653                           formals&lt;-            0
#&gt; 654                         format.AsIs            0
#&gt; 655                   format.data.frame            0
#&gt; 656                         format.Date            0
#&gt; 657                      format.default            0
#&gt; 658                     format.difftime            0
#&gt; 659                       format.factor            0
#&gt; 660                      format.hexmode            0
#&gt; 661                         format.info            0
#&gt; 662                   format.libraryIQR            0
#&gt; 663              format.numeric_version            0
#&gt; 664                      format.octmode            0
#&gt; 665                  format.packageInfo            0
#&gt; 666                      format.POSIXct            0
#&gt; 667                      format.POSIXlt            0
#&gt; 668                         format.pval            0
#&gt; 669               format.summaryDefault            0
#&gt; 670                             formatC            0
#&gt; 671                            formatDL            0
#&gt; 672                        forwardsolve            0
#&gt; 673                            function            0
#&gt; 674                               gamma            0
#&gt; 675                             gc.time            0
#&gt; 676                              gcinfo            0
#&gt; 677                           gctorture            0
#&gt; 678                          gctorture2            0
#&gt; 679                                 get            0
#&gt; 680                                get0            0
#&gt; 681                   getAllConnections            0
#&gt; 682                       getCallingDLL            0
#&gt; 683                      getCallingDLLe            0
#&gt; 684                       getConnection            0
#&gt; 685  getDLLRegisteredRoutines.character            0
#&gt; 686    getDLLRegisteredRoutines.DLLInfo            0
#&gt; 687                          getElement            0
#&gt; 688                       geterrmessage            0
#&gt; 689                    getExportedValue            0
#&gt; 690                             getHook            0
#&gt; 691                       getLoadedDLLs            0
#&gt; 692                        getNamespace            0
#&gt; 693                 getNamespaceExports            0
#&gt; 694                 getNamespaceImports            0
#&gt; 695                    getNamespaceInfo            0
#&gt; 696                    getNamespaceName            0
#&gt; 697                   getNamespaceUsers            0
#&gt; 698                 getNamespaceVersion            0
#&gt; 699                 getNativeSymbolInfo            0
#&gt; 700                           getOption            0
#&gt; 701                         getRversion            0
#&gt; 702                         getSrcLines            0
#&gt; 703                getTaskCallbackNames            0
#&gt; 704                             gettext            0
#&gt; 705                            gettextf            0
#&gt; 706                               getwd            0
#&gt; 707                                  gl            0
#&gt; 708               globalCallingHandlers            0
#&gt; 709                           globalenv            0
#&gt; 710                            gregexec            0
#&gt; 711                            gregexpr            0
#&gt; 712                                grep            0
#&gt; 713                               grepl            0
#&gt; 714                             grepRaw            0
#&gt; 715                            grouping            0
#&gt; 716                                gsub            0
#&gt; 717                               gzcon            0
#&gt; 718                              gzfile            0
#&gt; 719                                   I            0
#&gt; 720                               iconv            0
#&gt; 721                           iconvlist            0
#&gt; 722                       icuGetCollate            0
#&gt; 723                       icuSetCollate            0
#&gt; 724                           identical            0
#&gt; 725                            identity            0
#&gt; 726                                  if            0
#&gt; 727                              ifelse            0
#&gt; 728                                  Im            0
#&gt; 729                       importIntoEnv            0
#&gt; 730                             infoRDS            0
#&gt; 731                            inherits            0
#&gt; 732                             integer            0
#&gt; 733                         interactive            0
#&gt; 734                           intToBits            0
#&gt; 735                           intToUtf8            0
#&gt; 736                         inverse.rle            0
#&gt; 737                           invisible            0
#&gt; 738                       invokeRestart            0
#&gt; 739          invokeRestartInteractively            0
#&gt; 740                            is.array            0
#&gt; 741                           is.atomic            0
#&gt; 742                             is.call            0
#&gt; 743                        is.character            0
#&gt; 744                          is.complex            0
#&gt; 745                       is.data.frame            0
#&gt; 746                           is.double            0
#&gt; 747                          is.element            0
#&gt; 748                      is.environment            0
#&gt; 749                       is.expression            0
#&gt; 750                           is.factor            0
#&gt; 751                   is.finite.POSIXlt            0
#&gt; 752                         is.function            0
#&gt; 753                 is.infinite.POSIXlt            0
#&gt; 754                          is.integer            0
#&gt; 755                         is.language            0
#&gt; 756                             is.list            0
#&gt; 757                           is.loaded            0
#&gt; 758                          is.logical            0
#&gt; 759                           is.matrix            0
#&gt; 760                    is.na.data.frame            0
#&gt; 761               is.na.numeric_version            0
#&gt; 762                       is.na.POSIXlt            0
#&gt; 763                     is.na&lt;-.default            0
#&gt; 764                      is.na&lt;-.factor            0
#&gt; 765             is.na&lt;-.numeric_version            0
#&gt; 766                             is.name            0
#&gt; 767                      is.nan.POSIXlt            0
#&gt; 768                             is.null            0
#&gt; 769                  is.numeric_version            0
#&gt; 770                     is.numeric.Date            0
#&gt; 771                 is.numeric.difftime            0
#&gt; 772                   is.numeric.POSIXt            0
#&gt; 773                           is.object            0
#&gt; 774                          is.ordered            0
#&gt; 775                  is.package_version            0
#&gt; 776                         is.pairlist            0
#&gt; 777                        is.primitive            0
#&gt; 778                               is.qr            0
#&gt; 779                                is.R            0
#&gt; 780                              is.raw            0
#&gt; 781                        is.recursive            0
#&gt; 782                           is.single            0
#&gt; 783                           is.symbol            0
#&gt; 784                            is.table            0
#&gt; 785                         is.unsorted            0
#&gt; 786                           is.vector            0
#&gt; 787                                 isa            0
#&gt; 788                              isatty            0
#&gt; 789                     isBaseNamespace            0
#&gt; 790                          isdebugged            0
#&gt; 791                             isFALSE            0
#&gt; 792                        isIncomplete            0
#&gt; 793                         isNamespace            0
#&gt; 794                   isNamespaceLoaded            0
#&gt; 795                             ISOdate            0
#&gt; 796                         ISOdatetime            0
#&gt; 797                              isOpen            0
#&gt; 798                           isRestart            0
#&gt; 799                                isS4            0
#&gt; 800                          isSeekable            0
#&gt; 801                  isSymmetric.matrix            0
#&gt; 802                              isTRUE            0
#&gt; 803                              jitter            0
#&gt; 804                         julian.Date            0
#&gt; 805                       julian.POSIXt            0
#&gt; 806                       kappa.default            0
#&gt; 807                            kappa.lm            0
#&gt; 808                            kappa.qr            0
#&gt; 809                           l10n_info            0
#&gt; 810                          La_library            0
#&gt; 811                          La_version            0
#&gt; 812                              La.svd            0
#&gt; 813                      labels.default            0
#&gt; 814                              lapply            0
#&gt; 815                            lazyLoad            0
#&gt; 816                      lazyLoadDBexec            0
#&gt; 817                     lazyLoadDBfetch            0
#&gt; 818                               lbeta            0
#&gt; 819                             lchoose            0
#&gt; 820                      length.POSIXlt            0
#&gt; 821                       length&lt;-.Date            0
#&gt; 822                   length&lt;-.difftime            0
#&gt; 823                     length&lt;-.factor            0
#&gt; 824                    length&lt;-.POSIXct            0
#&gt; 825                    length&lt;-.POSIXlt            0
#&gt; 826                      levels.default            0
#&gt; 827                     levels&lt;-.factor            0
#&gt; 828                          lfactorial            0
#&gt; 829                              lgamma            0
#&gt; 830                      libcurlVersion            0
#&gt; 831                library.dynam.unload            0
#&gt; 832                             licence            0
#&gt; 833                             license            0
#&gt; 834                           list.dirs            0
#&gt; 835                          list.files            0
#&gt; 836                             list2DF            0
#&gt; 837                            list2env            0
#&gt; 838                                load            0
#&gt; 839                    loadedNamespaces            0
#&gt; 840                loadingNamespaceInfo            0
#&gt; 841                       loadNamespace            0
#&gt; 842                               local            0
#&gt; 843                         lockBinding            0
#&gt; 844                     lockEnvironment            0
#&gt; 845                                 log            0
#&gt; 846                               log10            0
#&gt; 847                               log1p            0
#&gt; 848                                log2            0
#&gt; 849                                logb            0
#&gt; 850                             logical            0
#&gt; 851                           lower.tri            0
#&gt; 852                          make.names            0
#&gt; 853                         make.unique            0
#&gt; 854                   makeActiveBinding            0
#&gt; 855                                 Map            0
#&gt; 856                              mapply            0
#&gt; 857                        margin.table            0
#&gt; 858                          marginSums            0
#&gt; 859                          mat.or.vec            0
#&gt; 860                           match.arg            0
#&gt; 861                          match.call            0
#&gt; 862                           match.fun            0
#&gt; 863                     Math.data.frame            0
#&gt; 864                           Math.Date            0
#&gt; 865                       Math.difftime            0
#&gt; 866                         Math.factor            0
#&gt; 867                         Math.POSIXt            0
#&gt; 868                              matrix            0
#&gt; 869                             max.col            0
#&gt; 870                           mean.Date            0
#&gt; 871                        mean.default            0
#&gt; 872                       mean.difftime            0
#&gt; 873                        mean.POSIXct            0
#&gt; 874                        mean.POSIXlt            0
#&gt; 875                        mem.maxNSize            0
#&gt; 876                        mem.maxVSize            0
#&gt; 877                         memCompress            0
#&gt; 878                       memDecompress            0
#&gt; 879                      memory.profile            0
#&gt; 880                    merge.data.frame            0
#&gt; 881                       merge.default            0
#&gt; 882                             message            0
#&gt; 883                                mget            0
#&gt; 884                             missing            0
#&gt; 885                                 Mod            0
#&gt; 886                                mode            0
#&gt; 887                              mode&lt;-            0
#&gt; 888                         months.Date            0
#&gt; 889                       months.POSIXt            0
#&gt; 890                    mostattributes&lt;-            0
#&gt; 891                       mtfrm.default            0
#&gt; 892                 nameOfClass.default            0
#&gt; 893                       names.POSIXlt            0
#&gt; 894                     names&lt;-.POSIXlt            0
#&gt; 895                     namespaceExport            0
#&gt; 896                     namespaceImport            0
#&gt; 897              namespaceImportClasses            0
#&gt; 898                 namespaceImportFrom            0
#&gt; 899              namespaceImportMethods            0
#&gt; 900                               nargs            0
#&gt; 901                               nchar            0
#&gt; 902                                ncol            0
#&gt; 903                                NCOL            0
#&gt; 904                              Negate            0
#&gt; 905                             new.env            0
#&gt; 906                                next            0
#&gt; 907                          NextMethod            0
#&gt; 908                            ngettext            0
#&gt; 909                             nlevels            0
#&gt; 910                             noquote            0
#&gt; 911                                norm            0
#&gt; 912                       normalizePath            0
#&gt; 913                                nrow            0
#&gt; 914                                NROW            0
#&gt; 915                            nullfile            0
#&gt; 916                             numeric            0
#&gt; 917                     numeric_version            0
#&gt; 918                           numToBits            0
#&gt; 919                           numToInts            0
#&gt; 920                              nzchar            0
#&gt; 921                             objects            0
#&gt; 922                            oldClass            0
#&gt; 923                          oldClass&lt;-            0
#&gt; 924                          OlsonNames            0
#&gt; 925                             on.exit            0
#&gt; 926                     open.connection            0
#&gt; 927                        open.srcfile            0
#&gt; 928                   open.srcfilealias            0
#&gt; 929                    open.srcfilecopy            0
#&gt; 930                      Ops.data.frame            0
#&gt; 931                            Ops.Date            0
#&gt; 932                        Ops.difftime            0
#&gt; 933                          Ops.factor            0
#&gt; 934                 Ops.numeric_version            0
#&gt; 935                         Ops.ordered            0
#&gt; 936                          Ops.POSIXt            0
#&gt; 937                             options            0
#&gt; 938                             ordered            0
#&gt; 939                               outer            0
#&gt; 940                     package_version            0
#&gt; 941                        packageEvent            0
#&gt; 942                 packageHasNamespace            0
#&gt; 943                packageNotFoundError            0
#&gt; 944               packageStartupMessage            0
#&gt; 945                            packBits            0
#&gt; 946                            pairlist            0
#&gt; 947                          parent.env            0
#&gt; 948                        parent.env&lt;-            0
#&gt; 949                        parent.frame            0
#&gt; 950                               parse            0
#&gt; 951                  parseNamespaceFile            0
#&gt; 952                               paste            0
#&gt; 953                              paste0            0
#&gt; 954                         path.expand            0
#&gt; 955                        path.package            0
#&gt; 956                         pcre_config            0
#&gt; 957                                pipe            0
#&gt; 958                              pmatch            0
#&gt; 959                            pmax.int            0
#&gt; 960                            pmin.int            0
#&gt; 961                            polyroot            0
#&gt; 962                          pos.to.env            0
#&gt; 963                            Position            0
#&gt; 964                      pretty.default            0
#&gt; 965                           prettyNum            0
#&gt; 966                          print.AsIs            0
#&gt; 967                            print.by            0
#&gt; 968                     print.condition            0
#&gt; 969                    print.connection            0
#&gt; 970                    print.data.frame            0
#&gt; 971                          print.Date            0
#&gt; 972                       print.default            0
#&gt; 973                      print.difftime            0
#&gt; 974                         print.Dlist            0
#&gt; 975                       print.DLLInfo            0
#&gt; 976                   print.DLLInfoList            0
#&gt; 977         print.DLLRegisteredRoutines            0
#&gt; 978                         print.eigen            0
#&gt; 979                        print.factor            0
#&gt; 980                      print.function            0
#&gt; 981                       print.hexmode            0
#&gt; 982                    print.libraryIQR            0
#&gt; 983                        print.listof            0
#&gt; 984             print.NativeRoutineList            0
#&gt; 985                       print.noquote            0
#&gt; 986               print.numeric_version            0
#&gt; 987                       print.octmode            0
#&gt; 988                   print.packageInfo            0
#&gt; 989                       print.POSIXct            0
#&gt; 990                       print.POSIXlt            0
#&gt; 991                     print.proc_time            0
#&gt; 992                       print.restart            0
#&gt; 993                           print.rle            0
#&gt; 994                   print.simple.list            0
#&gt; 995                       print.srcfile            0
#&gt; 996                        print.srcref            0
#&gt; 997                 print.summary.table            0
#&gt; 998              print.summary.warnings            0
#&gt; 999                print.summaryDefault            0
#&gt; 1000                        print.table            0
#&gt; 1001                     print.warnings            0
#&gt; 1002                           prmatrix            0
#&gt; 1003                          proc.time            0
#&gt; 1004                               prod            0
#&gt; 1005                         prop.table            0
#&gt; 1006                        proportions            0
#&gt; 1007                    provideDimnames            0
#&gt; 1008                           psigamma            0
#&gt; 1009                           pushBack            0
#&gt; 1010                     pushBackLength            0
#&gt; 1011                                  q            0
#&gt; 1012                            qr.coef            0
#&gt; 1013                         qr.default            0
#&gt; 1014                          qr.fitted            0
#&gt; 1015                               qr.Q            0
#&gt; 1016                             qr.qty            0
#&gt; 1017                              qr.qy            0
#&gt; 1018                               qr.R            0
#&gt; 1019                           qr.resid            0
#&gt; 1020                           qr.solve            0
#&gt; 1021                               qr.X            0
#&gt; 1022                      quarters.Date            0
#&gt; 1023                    quarters.POSIXt            0
#&gt; 1024                               quit            0
#&gt; 1025                              quote            0
#&gt; 1026                      R_compiled_by            0
#&gt; 1027                   R_system_version            0
#&gt; 1028                             R.home            0
#&gt; 1029                          R.Version            0
#&gt; 1030                      range.default            0
#&gt; 1031                               rank            0
#&gt; 1032                             rapply            0
#&gt; 1033                                raw            0
#&gt; 1034                      rawConnection            0
#&gt; 1035                 rawConnectionValue            0
#&gt; 1036                           rawShift            0
#&gt; 1037                          rawToBits            0
#&gt; 1038                          rawToChar            0
#&gt; 1039                   rbind.data.frame            0
#&gt; 1040                              rcond            0
#&gt; 1041                                 Re            0
#&gt; 1042                           read.dcf            0
#&gt; 1043                            readBin            0
#&gt; 1044                           readChar            0
#&gt; 1045                           readline            0
#&gt; 1046                          readLines            0
#&gt; 1047                            readRDS            0
#&gt; 1048                       readRenviron            0
#&gt; 1049                             Recall            0
#&gt; 1050                             Reduce            0
#&gt; 1051                      reg.finalizer            0
#&gt; 1052                            regexec            0
#&gt; 1053                            regexpr            0
#&gt; 1054                   registerS3method            0
#&gt; 1055                  registerS3methods            0
#&gt; 1056                         regmatches            0
#&gt; 1057                       regmatches&lt;-            0
#&gt; 1058                 removeTaskCallback            0
#&gt; 1059                            rep_len            0
#&gt; 1060                           rep.Date            0
#&gt; 1061                       rep.difftime            0
#&gt; 1062                         rep.factor            0
#&gt; 1063                            rep.int            0
#&gt; 1064                rep.numeric_version            0
#&gt; 1065                        rep.POSIXct            0
#&gt; 1066                        rep.POSIXlt            0
#&gt; 1067                             repeat            0
#&gt; 1068                            replace            0
#&gt; 1069                          replicate            0
#&gt; 1070                            require            0
#&gt; 1071                   requireNamespace            0
#&gt; 1072                 restartDescription            0
#&gt; 1073                     restartFormals            0
#&gt; 1074                         retracemem            0
#&gt; 1075                             return            0
#&gt; 1076                        returnValue            0
#&gt; 1077                        rev.default            0
#&gt; 1078                                rle            0
#&gt; 1079                                 rm            0
#&gt; 1080                            RNGkind            0
#&gt; 1081                         RNGversion            0
#&gt; 1082                         round.Date            0
#&gt; 1083                       round.POSIXt            0
#&gt; 1084               row.names.data.frame            0
#&gt; 1085                  row.names.default            0
#&gt; 1086             row.names&lt;-.data.frame            0
#&gt; 1087                row.names&lt;-.default            0
#&gt; 1088                           rowMeans            0
#&gt; 1089                           rownames            0
#&gt; 1090                         rownames&lt;-            0
#&gt; 1091                  rowsum.data.frame            0
#&gt; 1092                     rowsum.default            0
#&gt; 1093                            rowSums            0
#&gt; 1094                         sample.int            0
#&gt; 1095                             sapply            0
#&gt; 1096                         save.image            0
#&gt; 1097                            saveRDS            0
#&gt; 1098                      scale.default            0
#&gt; 1099                               scan            0
#&gt; 1100                             search            0
#&gt; 1101                        searchpaths            0
#&gt; 1102                    seek.connection            0
#&gt; 1103                          seq_along            0
#&gt; 1104                            seq_len            0
#&gt; 1105                           seq.Date            0
#&gt; 1106                        seq.default            0
#&gt; 1107                            seq.int            0
#&gt; 1108                         seq.POSIXt            0
#&gt; 1109                   sequence.default            0
#&gt; 1110                          serialize            0
#&gt; 1111                       serverSocket            0
#&gt; 1112                           set.seed            0
#&gt; 1113                            setHook            0
#&gt; 1114                   setNamespaceInfo            0
#&gt; 1115                setSessionTimeLimit            0
#&gt; 1116                       setTimeLimit            0
#&gt; 1117                              setwd            0
#&gt; 1118                    showConnections            0
#&gt; 1119                            shQuote            0
#&gt; 1120                               sign            0
#&gt; 1121                    signalCondition            0
#&gt; 1122                             signif            0
#&gt; 1123                    simpleCondition            0
#&gt; 1124                        simpleError            0
#&gt; 1125                      simpleMessage            0
#&gt; 1126                      simpleWarning            0
#&gt; 1127                     simplify2array            0
#&gt; 1128                                sin            0
#&gt; 1129                             single            0
#&gt; 1130                               sinh            0
#&gt; 1131                        sink.number            0
#&gt; 1132                              sinpi            0
#&gt; 1133                        slice.index            0
#&gt; 1134                       socketAccept            0
#&gt; 1135                   socketConnection            0
#&gt; 1136                       socketSelect            0
#&gt; 1137                      socketTimeout            0
#&gt; 1138                      solve.default            0
#&gt; 1139                           solve.qr            0
#&gt; 1140                       sort.default            0
#&gt; 1141                           sort.int            0
#&gt; 1142                          sort.list            0
#&gt; 1143                       sort.POSIXlt            0
#&gt; 1144                             source            0
#&gt; 1145                   split.data.frame            0
#&gt; 1146                         split.Date            0
#&gt; 1147                      split.default            0
#&gt; 1148                      split.POSIXct            0
#&gt; 1149                 split&lt;-.data.frame            0
#&gt; 1150                    split&lt;-.default            0
#&gt; 1151                            sprintf            0
#&gt; 1152                               sqrt            0
#&gt; 1153                             sQuote            0
#&gt; 1154                            srcfile            0
#&gt; 1155                       srcfilealias            0
#&gt; 1156                        srcfilecopy            0
#&gt; 1157                             srcref            0
#&gt; 1158                    standardGeneric            0
#&gt; 1159                         startsWith            0
#&gt; 1160                             stderr            0
#&gt; 1161                              stdin            0
#&gt; 1162                             stdout            0
#&gt; 1163                               stop            0
#&gt; 1164                          stopifnot            0
#&gt; 1165                       storage.mode            0
#&gt; 1166                     storage.mode&lt;-            0
#&gt; 1167                     str2expression            0
#&gt; 1168                           str2lang            0
#&gt; 1169                           strftime            0
#&gt; 1170                           strptime            0
#&gt; 1171                             strrep            0
#&gt; 1172                           strsplit            0
#&gt; 1173                             strtoi            0
#&gt; 1174                            strtrim            0
#&gt; 1175                          structure            0
#&gt; 1176                            strwrap            0
#&gt; 1177                                sub            0
#&gt; 1178                  subset.data.frame            0
#&gt; 1179                     subset.default            0
#&gt; 1180                      subset.matrix            0
#&gt; 1181                         substitute            0
#&gt; 1182                             substr            0
#&gt; 1183                           substr&lt;-            0
#&gt; 1184                          substring            0
#&gt; 1185                        substring&lt;-            0
#&gt; 1186                 summary.connection            0
#&gt; 1187                 summary.data.frame            0
#&gt; 1188                 Summary.data.frame            0
#&gt; 1189                       summary.Date            0
#&gt; 1190                       Summary.Date            0
#&gt; 1191                    summary.default            0
#&gt; 1192                   Summary.difftime            0
#&gt; 1193                     summary.factor            0
#&gt; 1194                     Summary.factor            0
#&gt; 1195                     summary.matrix            0
#&gt; 1196            Summary.numeric_version            0
#&gt; 1197                    Summary.ordered            0
#&gt; 1198                    summary.POSIXct            0
#&gt; 1199                    Summary.POSIXct            0
#&gt; 1200                    summary.POSIXlt            0
#&gt; 1201                    Summary.POSIXlt            0
#&gt; 1202                  summary.proc_time            0
#&gt; 1203                    summary.srcfile            0
#&gt; 1204                     summary.srcref            0
#&gt; 1205                      summary.table            0
#&gt; 1206                   summary.warnings            0
#&gt; 1207                   suppressMessages            0
#&gt; 1208     suppressPackageStartupMessages            0
#&gt; 1209                   suppressWarnings            0
#&gt; 1210                  suspendInterrupts            0
#&gt; 1211                                svd            0
#&gt; 1212                              sweep            0
#&gt; 1213                             switch            0
#&gt; 1214                           sys.call            0
#&gt; 1215                          sys.calls            0
#&gt; 1216                          Sys.chmod            0
#&gt; 1217                           Sys.Date            0
#&gt; 1218                          sys.frame            0
#&gt; 1219                         sys.frames            0
#&gt; 1220                       sys.function            0
#&gt; 1221                         Sys.getenv            0
#&gt; 1222                      Sys.getlocale            0
#&gt; 1223                         Sys.getpid            0
#&gt; 1224                           Sys.glob            0
#&gt; 1225                           Sys.info            0
#&gt; 1226                     sys.load.image            0
#&gt; 1227                     Sys.localeconv            0
#&gt; 1228                         sys.nframe            0
#&gt; 1229                        sys.on.exit            0
#&gt; 1230                         sys.parent            0
#&gt; 1231                        sys.parents            0
#&gt; 1232                       Sys.readlink            0
#&gt; 1233                     sys.save.image            0
#&gt; 1234                         Sys.setenv            0
#&gt; 1235                    Sys.setFileTime            0
#&gt; 1236                    Sys.setLanguage            0
#&gt; 1237                      Sys.setlocale            0
#&gt; 1238                          Sys.sleep            0
#&gt; 1239                         sys.source            0
#&gt; 1240                         sys.status            0
#&gt; 1241                           Sys.time            0
#&gt; 1242                       Sys.timezone            0
#&gt; 1243                          Sys.umask            0
#&gt; 1244                       Sys.unsetenv            0
#&gt; 1245                          Sys.which            0
#&gt; 1246                        system.file            0
#&gt; 1247                        system.time            0
#&gt; 1248                            system2            0
#&gt; 1249                       t.data.frame            0
#&gt; 1250                          t.default            0
#&gt; 1251                              table            0
#&gt; 1252                           tabulate            0
#&gt; 1253                                tan            0
#&gt; 1254                               tanh            0
#&gt; 1255                              tanpi            0
#&gt; 1256                             tapply            0
#&gt; 1257                taskCallbackManager            0
#&gt; 1258                         tcrossprod            0
#&gt; 1259                            tempdir            0
#&gt; 1260                           tempfile            0
#&gt; 1261                     textConnection            0
#&gt; 1262                textConnectionValue            0
#&gt; 1263                            tolower            0
#&gt; 1264                             topenv            0
#&gt; 1265                   toString.default            0
#&gt; 1266                            toupper            0
#&gt; 1267                              trace            0
#&gt; 1268                          traceback            0
#&gt; 1269                           tracemem            0
#&gt; 1270                       tracingState            0
#&gt; 1271               transform.data.frame            0
#&gt; 1272                  transform.default            0
#&gt; 1273                           trigamma            0
#&gt; 1274                             trimws            0
#&gt; 1275                         trunc.Date            0
#&gt; 1276                       trunc.POSIXt            0
#&gt; 1277                truncate.connection            0
#&gt; 1278                                try            0
#&gt; 1279                           tryCatch            0
#&gt; 1280                   tryInvokeRestart            0
#&gt; 1281                             typeof            0
#&gt; 1282                     unCfillPOSIXlt            0
#&gt; 1283                            unclass            0
#&gt; 1284                            undebug            0
#&gt; 1285                       unique.array            0
#&gt; 1286                  unique.data.frame            0
#&gt; 1287                     unique.default            0
#&gt; 1288                      unique.matrix            0
#&gt; 1289             unique.numeric_version            0
#&gt; 1290                     unique.POSIXlt            0
#&gt; 1291                    unique.warnings            0
#&gt; 1292                     units.difftime            0
#&gt; 1293                   units&lt;-.difftime            0
#&gt; 1294                          unix.time            0
#&gt; 1295                             unlink            0
#&gt; 1296                    unloadNamespace            0
#&gt; 1297                      unlockBinding            0
#&gt; 1298                             unname            0
#&gt; 1299                        unserialize            0
#&gt; 1300                            unsplit            0
#&gt; 1301                            untrace            0
#&gt; 1302                         untracemem            0
#&gt; 1303                                unz            0
#&gt; 1304                          upper.tri            0
#&gt; 1305                          UseMethod            0
#&gt; 1306                          utf8ToInt            0
#&gt; 1307                           validEnc            0
#&gt; 1308                          validUTF8            0
#&gt; 1309                             vapply            0
#&gt; 1310                             vector            0
#&gt; 1311                          Vectorize            0
#&gt; 1312                            warning            0
#&gt; 1313                   warningCondition            0
#&gt; 1314                           warnings            0
#&gt; 1315                      weekdays.Date            0
#&gt; 1316                    weekdays.POSIXt            0
#&gt; 1317                          which.max            0
#&gt; 1318                          which.min            0
#&gt; 1319                              while            0
#&gt; 1320                       with.default            0
#&gt; 1321                      withAutoprint            0
#&gt; 1322                withCallingHandlers            0
#&gt; 1323                  within.data.frame            0
#&gt; 1324                        within.list            0
#&gt; 1325                       withRestarts            0
#&gt; 1326                        withVisible            0
#&gt; 1327                          write.dcf            0
#&gt; 1328                           writeBin            0
#&gt; 1329                          writeChar            0
#&gt; 1330                         writeLines            0
#&gt; 1331                                xor            0
#&gt; 1332                 xpdrows.data.frame            0
#&gt; 1333                         xtfrm.AsIs            0
#&gt; 1334                   xtfrm.data.frame            0
#&gt; 1335                         xtfrm.Date            0
#&gt; 1336                      xtfrm.default            0
#&gt; 1337                     xtfrm.difftime            0
#&gt; 1338                       xtfrm.factor            0
#&gt; 1339              xtfrm.numeric_version            0
#&gt; 1340                      xtfrm.POSIXct            0
#&gt; 1341                      xtfrm.POSIXlt            0
#&gt; 1342                             xzfile            0
#&gt; 1343                           zapsmall            0</code></pre>
</div>
</div>
<p>This brute-force code unsurprisingly identifies <code>print()</code> as having the greatest number of methods. A bug in <code>s3_methods_generic()</code> prevents its use (error below).</p>
<pre><code>Error in gsub(paste0("^", generic_esc, "[.,]"), "", info$method) : 
invalid regular expression '^([.,]', reason 'Missing ')''</code></pre>
<p>AR Solutions: A little experimentation (and thinking about the most popular functions) suggests that the <code>print()</code> generic has the most defined methods.</p>
<p>Let’s verify this programmatically with the tools we have learned in this and the previous chapters.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb117-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">baseenv</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mget</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">baseenv</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keep</span>(is_function) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keep</span>(is_s3_generic) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_generic</span>(.x)), .x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten_int</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb117-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;         print        format             [       summary  as.character 
#&gt;           276           124            48            39            32 
#&gt; as.data.frame 
#&gt;            32</code></pre>
</div>
</div>
<hr>
<ol start="5" type="1">
<li>Carefully read the documentation for <code>UseMethod()</code> and explain why the following code returns the results that it does. What two usual rules of function evaluation does <code>UseMethod()</code> violate?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb119-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb119-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb119-3">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb119-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>)</span>
<span id="cb119-5">}</span>
<span id="cb119-6">g.default <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y)</span>
<span id="cb119-7">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb119-8">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb119-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  x  y 
#&gt;  1 10</code></pre>
</div>
</div>
<p>Answer: the documentation states in <strong>Technical Details</strong>:</p>
<blockquote class="blockquote">
<p><code>UseMethod</code> creates a new function call with arguments matched as they came in to the generic. Any local variables defined before the call to <code>UseMethod</code> are retained (unlike S).</p>
</blockquote>
<p>So, <code>UseMethod()</code> creates a new function call where <code>x</code> matches <code>x &lt;- 1</code> and the local variable <code>y &lt;- 10</code> is retained. This is passed to <code>g.default()</code>. This violates both lazy evaluation and lexical scoping.</p>
<p>AR Solutions: Let’s take this step by step. If you call <code>g.default(x)</code> directly you get <code>c(1, 1)</code> as you might expect.</p>
<p>The value bound to <code>x</code> comes from the argument, the value from <code>y</code> comes from the global environment.</p>
<p>But when we call <code>g(x)</code> we get <code>c(1, 10)</code>.</p>
<p>This is seemingly inconsistent: why does <code>x</code> come from the value defined inside of <code>g()</code>, and <code>y</code> still come from the global environment? It’s because <code>UseMethod()</code> calls <code>g.default()</code> in a special way so that variables defined inside the generic are available to methods. The exception are arguments supplied to the function: they are passed on as is and cannot be affected by code inside the generic.</p>
<hr>
<ol start="6" type="1">
<li>What are the arguments to <code>[</code>? Why is this a hard question to answer?</li>
</ol>
<p>Answer: the possible arguments include the <code>x</code>, the object being extracted (or replaced), indices (<code>i</code>, <code>j</code>, <code>...</code>), <code>name</code>, <code>drop</code>, <code>exact</code>, and <code>value</code>.</p>
<p>This is a hard question to answer since <code>[</code> is an irregular primitive function that can be called in multiple ways, none of which support using all possible arguments.</p>
<p>AR Solutions: The subsetting operator <code>[</code> is a primitive and a generic function, which can be confirmed via <code>ftype()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb121-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftype</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "primitive" "generic"</code></pre>
</div>
</div>
<p>For primitive functions <code>formals([)</code> returns <code>NULL</code> so we need to find another way to determine the functions arguments. One possible way to figure out <code>[</code>’s arguments would be to inspect the underlying C source code, which can be searched for via <code>pryr::show_c_source(.Primitive("["))</code>. When we inspect the arguments of some of <code>[</code>’s methods, we see that the arguments vary with the class of <code>x</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb123-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.data.frame</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x"    "i"    "j"    "drop"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb125-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.table</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x"    "i"    "j"    "..."  "drop"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb127-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.Date</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x"    "..."  "drop"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb129-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.AsIs</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "x"   "i"   "..."</code></pre>
</div>
</div>
<p>To finally get a better overview, we have to put in a little more effort and also use <code>s3_methods_generic()</code> again.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb131-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_generic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb131-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(visible) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb131-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb131-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"[."</span>, class),</span>
<span id="cb131-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">argnames =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(method, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(.x))),</span>
<span id="cb131-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(method, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(.x)),</span>
<span id="cb131-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(</span>
<span id="cb131-8">      argnames, args,</span>
<span id="cb131-9">      <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(.x, .y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" = "</span>)</span>
<span id="cb131-10">    ),</span>
<span id="cb131-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(args, method)</span>
<span id="cb131-12">  ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb131-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(args) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb131-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $`[.AsIs`
#&gt; [1] "x = "   "i = "   "... = "
#&gt; 
#&gt; $`[.data.frame`
#&gt; [1] "x = "                                              
#&gt; [2] "i = "                                              
#&gt; [3] "j = "                                              
#&gt; [4] "drop = if (missing(i)) TRUE else length(cols) == 1"
#&gt; 
#&gt; $`[.Date`
#&gt; [1] "x = "        "... = "      "drop = TRUE"
#&gt; 
#&gt; $`[.difftime`
#&gt; [1] "x = "        "... = "      "drop = TRUE"
#&gt; 
#&gt; $`[.Dlist`
#&gt; [1] "x = "   "i = "   "... = "
#&gt; 
#&gt; $`[.DLLInfoList`
#&gt; [1] "x = "   "... = "</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">13.5.1 Exercises</h2>
<ol type="1">
<li>Categorise the objects returned by <code>lm()</code>, <code>factor()</code>, <code>table()</code>, <code>as.Date()</code>, <code>as.POSIXct()</code>, <code>ecdf()</code>, <code>ordered()</code>, <code>I()</code> into the styles described above.</li>
</ol>
<p>Answer:</p>
<ul>
<li><code>lm()</code>, <code>ecdf()</code>: scalar</li>
<li><code>factor()</code>, <code>as.Date()</code>, <code>as.POSIXct()</code>, <code>ordered</code>: vector</li>
<li><code>table()</code>: data frame</li>
<li><code>I()</code>: same as the source object</li>
</ul>
<p>AR Solutions: We can categorise the return values into the various object styles by observing how the <a href="https://vctrs.r-lib.org/articles/type-size.html#size">number of observations</a> is calculated: For vector style classes, <code>length(x)</code> represents the number of observations. Record style objects use a list of equal length elements to represent individual components. For data frames and matrices, the observations are represented by the rows. Scalar style objects use a list to represent a single thing.</p>
<p>This leads us to:</p>
<ul>
<li>Vector object-style: <code>factor()</code>, <code>table()</code>, <code>as.Date()</code>, <code>as.POSIXct()</code>, <code>ordered()</code></li>
<li>Record object-style: not observed</li>
<li>Data frame object-style: not observed</li>
<li>Scalar object-style: <code>lm()</code>, <code>ecdf()</code></li>
</ul>
<p>The object style of <code>I()</code> depends on the input since this function returns a “copy of the object with class <code>AsIs</code> prepended to the class(es)”.</p>
<hr>
<ol start="2" type="1">
<li>What would a constructor function for <code>lm</code> objects, <code>new_lm()</code>, look like? Use <code>?lm</code> and experimentation to figure out the required fields and their types.</li>
</ol>
<p>Answer: the only required field is <code>formula</code>, provided that the variables listed in the formula exist (and are both vectors). <code>formula</code> must be of type “<code>formula</code>”.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb133-1">mpg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(mtcars, mpg)</span>
<span id="cb133-2">wt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pull</span>(mtcars, wt)</span>
<span id="cb133-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; Call:
#&gt; lm(formula = mpg ~ wt)
#&gt; 
#&gt; Coefficients:
#&gt; (Intercept)           wt  
#&gt;      37.285       -5.344</code></pre>
</div>
</div>
<p>AR Solutions: The constructor needs to populate the attributes of an <code>lm</code> object and check their types for correctness. Let’s start by creating a simple <code>lm</code> object and explore its underlying base type and attributes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb135-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb135-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "list"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb137-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(mod)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $names
#&gt;  [1] "coefficients"  "residuals"     "effects"       "rank"         
#&gt;  [5] "fitted.values" "assign"        "qr"            "df.residual"  
#&gt;  [9] "xlevels"       "call"          "terms"         "model"        
#&gt; 
#&gt; $class
#&gt; [1] "lm"</code></pre>
</div>
</div>
<p>As <code>mod</code> is built upon a list, we can simply use <code>map(mod, typeof)</code> to find out the base types of its elements. (Additionally, we inspect <code>?lm</code>, to learn more about the individual attributes.)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb139-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(mod, typeof)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  coefficients     residuals       effects          rank fitted.values 
#&gt;      "double"      "double"      "double"     "integer"      "double" 
#&gt;        assign            qr   df.residual       xlevels          call 
#&gt;     "integer"        "list"     "integer"        "list"    "language" 
#&gt;         terms         model 
#&gt;    "language"        "list"</code></pre>
</div>
</div>
<p>Now we should have enough information to write a constructor for new <code>lm</code> objects.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb141-1">new_lm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coefficients, residuals, effects, rank, fitted.values, assign,</span>
<span id="cb141-2">                   qr, df.residual, xlevels, call, terms, model) {</span>
<span id="cb141-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb141-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(coefficients), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(residuals),</span>
<span id="cb141-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(effects), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(rank), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.double</span>(fitted.values),</span>
<span id="cb141-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(assign), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(qr), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(df.residual),</span>
<span id="cb141-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(xlevels), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.language</span>(call), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.language</span>(terms),</span>
<span id="cb141-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.list</span>(model)</span>
<span id="cb141-9">  )</span>
<span id="cb141-10"></span>
<span id="cb141-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb141-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb141-13">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">coefficients =</span> coefficients,</span>
<span id="cb141-14">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">residuals =</span> residuals,</span>
<span id="cb141-15">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">effects =</span> effects,</span>
<span id="cb141-16">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">rank =</span> rank,</span>
<span id="cb141-17">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fitted.values =</span> fitted.values,</span>
<span id="cb141-18">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">assign =</span> assign,</span>
<span id="cb141-19">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">qr =</span> qr,</span>
<span id="cb141-20">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">df.residual =</span> df.residual,</span>
<span id="cb141-21">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlevels =</span> xlevels,</span>
<span id="cb141-22">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call =</span> call,</span>
<span id="cb141-23">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">terms =</span> terms,</span>
<span id="cb141-24">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">model =</span> model</span>
<span id="cb141-25">    ),</span>
<span id="cb141-26">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span></span>
<span id="cb141-27">  )</span>
<span id="cb141-28">}</span></code></pre></div>
</div>
<hr>
</section>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">13.6.3 Exercises</h2>
<ol type="1">
<li>How does <code>[.Date</code> support subclasses? How does it fail to support subclasses?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.Date</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ..., drop = TRUE) 
#&gt; {
#&gt;     .Date(NextMethod("["), oldClass(x))
#&gt; }
#&gt; &lt;bytecode: 0x1577c97e0&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.Date</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (xx, cl = "Date") 
#&gt; `class&lt;-`(xx, cl)
#&gt; &lt;bytecode: 0x1607e8ac8&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>Answer: by passing the object’s class to <code>.Date</code>, <code>[.Date</code> avoids the problem of <code>[.secret</code> and can return subclasses of <code>Date</code>. However, the <code>.Date</code> method can return objects that don’t contain the class <code>Date</code>.</p>
<p>AR Solutions: <code>[.Date</code> calls <code>.Date</code> with the result of calling <code>[</code> on the parent class, along with <code>oldClass()</code>:</p>
<p><code>.Date</code> is kind of like a constructor for date classes, although it doesn’t check the input is the correct type:</p>
<p><code>oldClass()</code> is basically the same as <code>class()</code>, except that it doesn’t return implicit classes, i.e.&nbsp;it’s basically <code>attr(x, "class")</code> (looking at the C code that’s exactly what it does, except that it also handles S4 objects).</p>
<p>As <code>oldClass()</code> is “basically” <code>class()</code>, we can rewrite <code>[.Date</code> to make the implementation more clear:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[.Date</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">drop =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb146-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"["</span>)</span>
<span id="cb146-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(out) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x)</span>
<span id="cb146-4">  out</span>
<span id="cb146-5">}</span></code></pre></div>
</div>
<p>So, <code>[.Date</code> ensures that the output has the same class as in the input. But what about other attributes that a subclass might possess? They get lost:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb147-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myDate"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date"</span>))</span>
<span id="cb147-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $class
#&gt; [1] "myDate" "Date"</code></pre>
</div>
</div>
<p>Note: this is a better explanation of how it fails to support subclasses; it drops non-class attributes.</p>
<hr>
<ol start="2" type="1">
<li>R has two classes for representing date time data, <code>POSIXct</code> and <code>POSIXlt</code>, which both inherit from <code>POSIXt</code>. Which generics have different behaviours for the two classes? Which generics share the same behaviour?</li>
</ol>
<p>Answer: if a generic is defined for either class, it must have different behaviors. Generics that aren’t defined for either class must have the same behavior. We can get the list of generics defined for either class using <code>sloop::s3_methods_class()</code>. These generics have different behaviors for the two classes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb149-1">ct_generics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POSIXct"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>generic</span>
<span id="cb149-2">lt_generics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POSIXlt"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>generic</span>
<span id="cb149-3">defined_generics <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(ct_generics, lt_generics)</span>
<span id="cb149-4">defined_generics</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "["             "[["            "[&lt;-"           "as.data.frame"
#&gt;  [5] "as.Date"       "as.list"       "as.POSIXlt"    "c"            
#&gt;  [9] "format"        "length&lt;-"      "mean"          "print"        
#&gt; [13] "rep"           "split"         "summary"       "Summary"      
#&gt; [17] "weighted.mean" "xtfrm"         "[[&lt;-"          "$&lt;-"          
#&gt; [21] "anyNA"         "as.double"     "as.matrix"     "as.POSIXct"   
#&gt; [25] "as.vector"     "duplicated"    "is.finite"     "is.infinite"  
#&gt; [29] "is.na"         "is.nan"        "length"        "names"        
#&gt; [33] "names&lt;-"       "sort"          "unique"</code></pre>
</div>
</div>
<p>We adapt work from previous exercises to get the list of all generics, and identify S3 generics that aren’t defined for either class, which must have the same behavior:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb151-1">s3_generic_funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(is_s3_generic, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(funs))</span>
<span id="cb151-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(defined_generics, s3_generic_funs), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(s3_generic_funs, defined_generics))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   [1] "Summary"                  "weighted.mean"           
#&gt;   [3] "-"                        "!="                      
#&gt;   [5] "*"                        "/"                       
#&gt;   [7] "&amp;"                        "%/%"                     
#&gt;   [9] "%%"                       "^"                       
#&gt;  [11] "+"                        "&lt;"                       
#&gt;  [13] "&lt;="                       "=="                      
#&gt;  [15] "&gt;"                        "&gt;="                      
#&gt;  [17] "|"                        "$"                       
#&gt;  [19] "abs"                      "acos"                    
#&gt;  [21] "acosh"                    "all"                     
#&gt;  [23] "all.equal"                "any"                     
#&gt;  [25] "anyDuplicated"            "aperm"                   
#&gt;  [27] "Arg"                      "as.array"                
#&gt;  [29] "as.call"                  "as.character"            
#&gt;  [31] "as.complex"               "as.environment"          
#&gt;  [33] "as.expression"            "as.function"             
#&gt;  [35] "as.integer"               "as.logical"              
#&gt;  [37] "as.null"                  "as.numeric"              
#&gt;  [39] "as.raw"                   "as.single"               
#&gt;  [41] "as.table"                 "asin"                    
#&gt;  [43] "asinh"                    "atan"                    
#&gt;  [45] "atanh"                    "by"                      
#&gt;  [47] "cbind"                    "ceiling"                 
#&gt;  [49] "chol"                     "chooseOpsMethod"         
#&gt;  [51] "close"                    "conditionCall"           
#&gt;  [53] "conditionMessage"         "Conj"                    
#&gt;  [55] "cos"                      "cosh"                    
#&gt;  [57] "cospi"                    "cummax"                  
#&gt;  [59] "cummin"                   "cumprod"                 
#&gt;  [61] "cumsum"                   "cut"                     
#&gt;  [63] "determinant"              "diff"                    
#&gt;  [65] "digamma"                  "dim"                     
#&gt;  [67] "dim&lt;-"                    "dimnames"                
#&gt;  [69] "dimnames&lt;-"               "droplevels"              
#&gt;  [71] "exp"                      "expm1"                   
#&gt;  [73] "floor"                    "flush"                   
#&gt;  [75] "gamma"                    "getDLLRegisteredRoutines"
#&gt;  [77] "Im"                       "is.array"                
#&gt;  [79] "is.matrix"                "is.na&lt;-"                 
#&gt;  [81] "is.numeric"               "isSymmetric"             
#&gt;  [83] "julian"                   "kappa"                   
#&gt;  [85] "labels"                   "levels"                  
#&gt;  [87] "levels&lt;-"                 "lgamma"                  
#&gt;  [89] "log"                      "log10"                   
#&gt;  [91] "log1p"                    "log2"                    
#&gt;  [93] "max"                      "merge"                   
#&gt;  [95] "min"                      "Mod"                     
#&gt;  [97] "months"                   "mtfrm"                   
#&gt;  [99] "nameOfClass"              "open"                    
#&gt; [101] "plot"                     "pretty"                  
#&gt; [103] "prod"                     "qr"                      
#&gt; [105] "quarters"                 "range"                   
#&gt; [107] "rbind"                    "Re"                      
#&gt; [109] "rev"                      "round"                   
#&gt; [111] "row.names"                "row.names&lt;-"             
#&gt; [113] "rowsum"                   "scale"                   
#&gt; [115] "seek"                     "seq"                     
#&gt; [117] "seq.int"                  "sequence"                
#&gt; [119] "sign"                     "signif"                  
#&gt; [121] "sin"                      "sinh"                    
#&gt; [123] "sinpi"                    "solve"                   
#&gt; [125] "split&lt;-"                  "sqrt"                    
#&gt; [127] "subset"                   "sum"                     
#&gt; [129] "t"                        "tan"                     
#&gt; [131] "tanh"                     "tanpi"                   
#&gt; [133] "toString"                 "transform"               
#&gt; [135] "trigamma"                 "trunc"                   
#&gt; [137] "truncate"                 "units"                   
#&gt; [139] "units&lt;-"                  "unlist"                  
#&gt; [141] "weekdays"                 "with"                    
#&gt; [143] "within"</code></pre>
</div>
</div>
<p>Note: this code doesn’t quite work, since <code>Summary</code> is a generic according to <code>isGeneric</code> and is not according to <code>is_s3_generic</code>, and <code>weighted.mean</code> is a non-base S3 generic.</p>
<p>AR Solutions: To answer this question, we have to get the respective generics</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb153-1">generics_t <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POSIXt"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>generic</span>
<span id="cb153-2">generics_ct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POSIXct"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>generic</span>
<span id="cb153-3">generics_lt <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"POSIXlt"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>generic</span></code></pre></div>
</div>
<p>The generics in <code>generics_t</code> with a method for the superclass <code>POSIXt</code> potentially share the same behaviour for both subclasses. However, if a generic has a specific method for one of the subclasses, it has to be subtracted:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These generics provide subclass-specific methods</span></span>
<span id="cb154-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(generics_ct, generics_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "["             "[["            "[&lt;-"           "as.data.frame"
#&gt;  [5] "as.Date"       "as.list"       "as.POSIXlt"    "c"            
#&gt;  [9] "format"        "length&lt;-"      "mean"          "print"        
#&gt; [13] "rep"           "split"         "summary"       "Summary"      
#&gt; [17] "weighted.mean" "xtfrm"         "[[&lt;-"          "$&lt;-"          
#&gt; [21] "anyNA"         "as.double"     "as.matrix"     "as.POSIXct"   
#&gt; [25] "as.vector"     "duplicated"    "is.finite"     "is.infinite"  
#&gt; [29] "is.na"         "is.nan"        "length"        "names"        
#&gt; [33] "names&lt;-"       "sort"          "unique"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These generics share (inherited) methods for both subclasses</span></span>
<span id="cb156-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(generics_t, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(generics_ct, generics_lt))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "-"            "+"            "all.equal"    "as.character" "Axis"        
#&gt;  [6] "cut"          "diff"         "hist"         "is.numeric"   "julian"      
#&gt; [11] "Math"         "months"       "Ops"          "pretty"       "quantile"    
#&gt; [16] "quarters"     "round"        "seq"          "str"          "trunc"       
#&gt; [21] "weekdays"</code></pre>
</div>
</div>
<p>Note: again, advanced R gives a better answer to this question, by comparing to the generics supported by the parent class.</p>
<hr>
<ol start="3" type="1">
<li>What do you expect this code to return? What does it actually return? Why?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1">generic2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UseMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generic2"</span>)</span>
<span id="cb158-2">generic2.a1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a1"</span></span>
<span id="cb158-3">generic2.a2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span></span>
<span id="cb158-4">generic2.b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb158-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a1"</span></span>
<span id="cb158-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb158-7">}</span>
<span id="cb158-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generic2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a2"</code></pre>
</div>
</div>
<p>Answer: I’d expect this code to return <code>"a2"</code> with a class of <code>c("a1", "a2")</code>. It actually returns “a2” with a class of <code>character</code>. This is because when <code>generic2.b</code> calls <code>NextMethod()</code>, <code>generic2.a2</code> is called which returns a bare <code>"a2"</code>, dropping the class assigned by <code>generic2.b</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb160-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generic2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span>))))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "character"</code></pre>
</div>
</div>
<p>AR Solutions: When we execute the code above, this is what is happening:</p>
<ul>
<li><p>we pass an object of classes <code>b</code> and <code>a2</code> to <code>generic2()</code>, which prompts R to look for a method<code>generic2.b()</code></p></li>
<li><p>the method <code>generic2.b()</code> then changes the class to <code>a1</code> and calls <code>NextMethod()</code></p></li>
<li><p>One would think that this will lead R to call <code>generic2.a1()</code>, but in fact, as mentioned in <em>Advanced R</em>, <code>NextMethod()</code> &gt; doesn’t actually work with the class attribute of the object, but instead uses a special global variable (.Class) to keep track of which method to call next.</p>
<p>This is why <code>generic2.a2()</code> is called instead.</p></li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generic2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a2"</code></pre>
</div>
</div>
<p>Let’s just double check the statement above and evaluate <code>.Class</code> explicitly within the <code>generic2.b()</code> method.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb164-1">generic2.b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb164-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a1"</span></span>
<span id="cb164-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(.Class)</span>
<span id="cb164-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NextMethod</span>()</span>
<span id="cb164-5">}</span>
<span id="cb164-6"></span>
<span id="cb164-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">generic2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a2"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "b"  "a2"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a2"</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-5" class="level2">
<h2 class="anchored" data-anchor-id="exercises-5">13.7.5 Exercises</h2>
<ol type="1">
<li>Explain the differences in dispatch below:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb167-1">length.integer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb167-2"></span>
<span id="cb167-3">x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb167-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb169" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb169-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  * length.integer
#&gt;    length.numeric
#&gt;    length.default
#&gt; =&gt; length (internal)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb171-1">x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(x1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>)</span>
<span id="cb171-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(x2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb173-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_dispatch</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; =&gt; length.integer
#&gt;    length.default
#&gt;  * length (internal)</code></pre>
</div>
</div>
<p>Answer: <code>x1</code> dispatches using implicit class, which is <code>c("integer", "numeric")</code>. <code>x2</code> has an explicit class, so it is dispatched to <code>length.integer</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb175-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_class</span>(x1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer" "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb177-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_class</span>(x2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
</div>
<p>AR Solutions: <code>class()</code> returns <code>integer</code> in both cases. However, while the class of <code>x1</code> is created implicitly and inherits from the <code>numeric</code> class, the class of <code>x2</code> is set explicitly. This is important because <code>length()</code> is an internal generic and internal generics only dispatch to methods when the class attribute has been set, i.e.&nbsp;internal generics do not use implicit classes.</p>
<p>An object has no explicit class if <code>attr(x, "class")</code> returns <code>NULL</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb179-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb181-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
</div>
<p>To see the relevant classes for the S3 dispatch, one can use <code>sloop::s3_class()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb183-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_class</span>(x1) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># implicit</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer" "numeric"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb185-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_class</span>(x2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># explicit</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
</div>
<p>For a better understanding of <code>s3_dipatch()</code>’s output we quote from <code>?s3_dispatch</code>: - =&gt; method exists and is found by <code>UseMethod()</code>. - -&gt; method exists and is used by <code>NextMethod()</code>. - * method exists but is not used. - Nothing (and greyed out in console): method does not exist.</p>
<p>Note: AR Solutions includes an additional important detail, that “internal generics only dispatch to methods when the class attribute has been set”, which explains why the internal generic is used for <code>x1</code>.</p>
<hr>
<ol start="2" type="1">
<li>What classes have a method for the <code>Math</code> group generic in base R? Read the source code. How do the methods work?</li>
</ol>
<p>Answer: four base classes have a method for <code>Math</code>: <code>data.frame</code>, <code>Date</code>, <code>difftime</code>, <code>factor</code>, and <code>POSIXt</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb187-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_generic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb187-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(source <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"base"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 5 × 4
#&gt;   generic class      visible source
#&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;lgl&gt;   &lt;chr&gt; 
#&gt; 1 Math    data.frame TRUE    base  
#&gt; 2 Math    Date       TRUE    base  
#&gt; 3 Math    difftime   TRUE    base  
#&gt; 4 Math    factor     TRUE    base  
#&gt; 5 Math    POSIXt     TRUE    base</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb189-1">Math.data.frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; {
#&gt;     mode.ok &lt;- vapply(x, function(x) is.numeric(x) || is.logical(x) || 
#&gt;         is.complex(x), NA)
#&gt;     if (all(mode.ok)) {
#&gt;         x[] &lt;- lapply(X = x, FUN = .Generic, ...)
#&gt;         return(x)
#&gt;     }
#&gt;     else {
#&gt;         vnames &lt;- names(x)
#&gt;         if (is.null(vnames)) 
#&gt;             vnames &lt;- seq_along(x)
#&gt;         stop("non-numeric-alike variable(s) in data frame: ", 
#&gt;             paste(vnames[!mode.ok], collapse = ", "))
#&gt;     }
#&gt; }
#&gt; &lt;bytecode: 0x161599760&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb191-1">Math.Date</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; stop(gettextf("%s not defined for \"Date\" objects", .Generic), 
#&gt;     domain = NA)
#&gt; &lt;bytecode: 0x16159e8c0&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb193-1">Math.difftime</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; {
#&gt;     switch(.Generic, abs = , sign = , floor = , ceiling = , trunc = , 
#&gt;         round = , signif = {
#&gt;             units &lt;- attr(x, "units")
#&gt;             .difftime(NextMethod(), units)
#&gt;         }, stop(gettextf("'%s' not defined for \"difftime\" objects", 
#&gt;             .Generic), domain = NA))
#&gt; }
#&gt; &lt;bytecode: 0x16159de78&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb195-1">Math.factor</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; stop(gettextf("%s not meaningful for factors", sQuote(.Generic)))
#&gt; &lt;bytecode: 0x1615a3078&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb197-1">Math.POSIXt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; {
#&gt;     stop(gettextf("'%s' not defined for \"POSIXt\" objects", 
#&gt;         .Generic), domain = NA)
#&gt; }
#&gt; &lt;bytecode: 0x1615a2588&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<ul>
<li><code>Math.data.frame</code> performs math if all columns (variables) are either numeric, logical or complex, and errors if any are not</li>
<li><code>Math.difftime</code> performs only certain math functions: <code>abs</code>, <code>sign</code>, <code>floor</code>, <code>ceiling</code>, <code>trunc</code>, <code>round</code>, and <code>signif</code>, and errors for other functions</li>
<li><code>Math.Date</code>, <code>Math.factor</code>, and <code>Math.POSIXt</code> always error</li>
</ul>
<p>AR Solutions: : The following functions belong to this group (see ?<code>Math</code>):</p>
<ul>
<li><code>abs</code>, <code>sign</code>, <code>sqrt</code>, <code>floor</code>, <code>ceiling</code>, <code>trunc</code>, <code>round</code>, <code>signif</code></li>
<li><code>exp</code>, <code>log</code>, <code>expm1</code>, <code>log1p</code>, <code>cos</code>, <code>sin</code>, <code>tan</code>, <code>cospi</code>, <code>sinpi</code>, <code>tanpi</code>, <code>acos</code>, <code>asin</code>, <code>atan</code>, <code>cosh</code>, <code>sinh</code>, <code>tanh</code>, <code>acosh</code>, <code>asinh</code>, <code>atanh</code></li>
<li><code>lgamma</code>, <code>gamma</code>, <code>digamma</code>, <code>trigamma</code></li>
<li><code>cumsum</code>, <code>cumprod</code>, <code>cummax</code>, <code>cummin</code></li>
</ul>
<p>The following classes have a method for this group generic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb199-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">s3_methods_generic</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Math"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 8 × 4
#&gt;   generic class      visible source             
#&gt;   &lt;chr&gt;   &lt;chr&gt;      &lt;lgl&gt;   &lt;chr&gt;              
#&gt; 1 Math    data.frame TRUE    base               
#&gt; 2 Math    Date       TRUE    base               
#&gt; 3 Math    difftime   TRUE    base               
#&gt; 4 Math    factor     TRUE    base               
#&gt; 5 Math    POSIXt     TRUE    base               
#&gt; 6 Math    quosure    FALSE   registered S3method
#&gt; 7 Math    vctrs_sclr FALSE   registered S3method
#&gt; 8 Math    vctrs_vctr FALSE   registered S3method</code></pre>
</div>
</div>
<p>To explain the basic idea, we just overwrite the data frame method:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb201-1">Math.data.frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span></span></code></pre></div>
</div>
<p>Now all functions from the math generic group, will return <code>"hello"</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb202-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "hello"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb204" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb204-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "hello"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb206" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb206-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lgamma</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "hello"</code></pre>
</div>
</div>
<p>Of course, different functions should perform different calculations. Here <code>.Generic</code> comes into play, which provides us with the calling generic as a string</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb208" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb208-1">Math.data.frame <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb208-2">  .Generic</span>
<span id="cb208-3">}</span>
<span id="cb208-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "abs"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb210" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb210-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "exp"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb212" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb212-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lgamma</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "lgamma"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb214" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb214-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(Math.data.frame)</span></code></pre></div>
</div>
<p>The original source code of <code>Math.data.frame()</code> is a good example on how to invoke the string returned by <code>.Generic</code> into a specific method. <code>Math.factor()</code> is a good example of a method, which is simply defined for better error messages.</p>
<p>Note: I prefer my answer to the AR Solutions answer.</p>
<hr>
<ol start="3" type="1">
<li><code>Math.difftime()</code> is more complicated than I described. Why?</li>
</ol>
<p>Answer: the explanation in the text omits the fact that <code>Math.difftime()</code> first checks that the math function being called.</p>
<p>AR Solutions: <code>Math.difftime()</code> also excludes cases apart from <code>abs</code>, <code>sign</code>, <code>floor</code>, <code>ceiling</code>, <code>trunc</code>, <code>round</code> and <code>signif</code> and needs to return a fitting error message.</p>
<hr>
</section>
</section>
<section id="r6" class="level1">
<h1>14 R6</h1>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb215-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<p>This chapter describes the R6 OOP system. R6 has two special properties:</p>
<ul>
<li><p>It uses the encapsulated OOP paradigm, which means that methods belong to objects, not generics, and you call them like <code>object$method()</code>.</p></li>
<li><p>R6 objects are <strong>mutable</strong>, which means that they are modified in place, and hence have reference semantics.</p></li>
</ul>
<p>If you’ve learned OOP in another programming language, it’s likely that R6 will feel very natural, and you’ll be inclined to prefer it over S3. Resist the temptation to follow the path of least resistance: in most cases R6 will lead you to non-idiomatic R code. We’ll come back to this theme in Section 16.3.</p>
<p>R6 is very similar to a base OOP system called <strong>reference classes</strong>, or RC for short. I describe why I teach R6 and not RC in Section 14.5.</p>
<section id="exercises-6" class="level2">
<h2 class="anchored" data-anchor-id="exercises-6">14.2.6 Exercises</h2>
<ol type="1">
<li>Create a bank account R6 class that stores a balance and allows you to deposit and withdraw money. Create a subclass that throws an error if you attempt to go into overdraft. Create another subclass that allows you to go into overdraft, but charges you a fee.</li>
</ol>
<p>Answer: <code>Account</code> stores a balance as an integer value of cents, and prints in dollars (to avoid problems with floating point math).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb216" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb216-1">Account <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Account"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb216-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">balance =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L,</span>
<span id="cb216-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">balance =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L) {</span>
<span id="cb216-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(balance), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(balance) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb216-5">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> balance</span>
<span id="cb216-6">  },</span>
<span id="cb216-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">print =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb216-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Account: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb216-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Balance: $"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nsmall =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb216-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb216-11">  },</span>
<span id="cb216-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deposit =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb216-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(value), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb216-14">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> value</span>
<span id="cb216-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb216-16">  },</span>
<span id="cb216-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb216-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(value), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb216-19">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> value</span>
<span id="cb216-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb216-21">  }</span>
<span id="cb216-22">))</span>
<span id="cb216-23"></span>
<span id="cb216-24">AccountOverdraft <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AccountOverdraft"</span>,</span>
<span id="cb216-25">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> Account,</span>
<span id="cb216-26">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb216-27">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb216-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance)</span>
<span id="cb216-29">      super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(value)</span>
<span id="cb216-30">    }</span>
<span id="cb216-31">  )</span>
<span id="cb216-32">)</span>
<span id="cb216-33"></span>
<span id="cb216-34">AccountOverdraftFee <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AccountOverdraftFee"</span>,</span>
<span id="cb216-35">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> Account,</span>
<span id="cb216-36">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb216-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb216-38">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance) value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>L</span>
<span id="cb216-39">      super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(value)</span>
<span id="cb216-40">    }</span>
<span id="cb216-41">  )</span>
<span id="cb216-42">)</span>
<span id="cb216-43"></span>
<span id="cb216-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(Account<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in initialize(...) : is.integer(balance) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb218" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb218-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Account<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L)</span>
<span id="cb218-2">a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deposit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L)</span>
<span id="cb218-3">a<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>L)</span>
<span id="cb218-4">a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Account: 
#&gt;   Balance: $-0.50</code></pre>
</div>
<div class="sourceCode cell-code" id="cb220" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb220-1">a2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AccountOverdraft<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L)</span>
<span id="cb220-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(a2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>L))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in a2$withdraw(250L) : value &lt;= self$balance is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb222" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb222-1">a2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>L)</span>
<span id="cb222-2">a2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Account: 
#&gt;   Balance: $0.50</code></pre>
</div>
<div class="sourceCode cell-code" id="cb224" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb224-1">a3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> AccountOverdraftFee<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>L)</span>
<span id="cb224-2">a3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">250</span>L)</span>
<span id="cb224-3">a3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Account: 
#&gt;   Balance: $-5.50</code></pre>
</div>
</div>
<p>AR Solutions: <code>BankAccount</code> is a similar, simpler approach:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb226" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb226-1">BankAccount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb226-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BankAccount"</span>,</span>
<span id="cb226-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb226-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">balance =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb226-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deposit =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dep =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb226-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dep</span>
<span id="cb226-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb226-8">    },</span>
<span id="cb226-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(draw) {</span>
<span id="cb226-10">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> draw</span>
<span id="cb226-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb226-12">    }</span>
<span id="cb226-13">  )</span>
<span id="cb226-14">)</span>
<span id="cb226-15"></span>
<span id="cb226-16">BankAccountStrict <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb226-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BankAccountStrict"</span>,</span>
<span id="cb226-18">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> BankAccount,</span>
<span id="cb226-19">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb226-20">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb226-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> draw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb226-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your `withdraw` must be smaller "</span>,</span>
<span id="cb226-23">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"than your `balance`."</span>,</span>
<span id="cb226-24">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb226-25">        )</span>
<span id="cb226-26">      }</span>
<span id="cb226-27">      super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> draw)</span>
<span id="cb226-28">    }</span>
<span id="cb226-29">  )</span>
<span id="cb226-30">)</span>
<span id="cb226-31"></span>
<span id="cb226-32">BankAccountCharging <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb226-33">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BankAccountCharging"</span>,</span>
<span id="cb226-34">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> BankAccount,</span>
<span id="cb226-35">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb226-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb226-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> draw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb226-38">        draw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> draw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb226-39">      }</span>
<span id="cb226-40">      super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> draw)</span>
<span id="cb226-41">    }</span>
<span id="cb226-42">  )</span>
<span id="cb226-43">)</span></code></pre></div>
</div>
<p>Note: my object name, <code>AccountOverdraftFee</code> is misleading, since it is not a subclass of <code>AccountOverdraft</code> - the R Solutions naming convention is clearer.</p>
<hr>
<ol start="2" type="1">
<li>Create an R6 class that represents a shuffled deck of cards. You should be able to draw cards from the deck with <code>$draw(n)</code>, and return all cards to the deck and reshuffle with <code>$reshuffle()</code>. Use the following code to make a vector of cards.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb227-1">suit <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"♠"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"♥"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"♦"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"♣"</span>)</span>
<span id="cb227-2">value <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"J"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Q"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"K"</span>)</span>
<span id="cb227-3">cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), suit)</span></code></pre></div>
</div>
<p>Answer: <code>Cards</code> shuffles the deck using <code>sample()</code>. The <code>draw()</code> function prints the cards drawn and moves them into play.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb228" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb228-1">Cards <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cards"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb228-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deck =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>),</span>
<span id="cb228-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">play =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb228-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">print =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb228-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cards: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb228-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Deck:"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb228-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Play:"</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>play, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span>
<span id="cb228-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb228-9">  },</span>
<span id="cb228-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) {</span>
<span id="cb228-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(n), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(n) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck))</span>
<span id="cb228-12">    d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck, n)</span>
<span id="cb228-13">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>play <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>play, d)</span>
<span id="cb228-14">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n)</span>
<span id="cb228-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb228-16">  },</span>
<span id="cb228-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reshuffle =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb228-18">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span>
<span id="cb228-19">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>play <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb228-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb228-21">  }</span>
<span id="cb228-22">))</span>
<span id="cb228-23"></span>
<span id="cb228-24">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb228-25">d</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: 5♣ K♠ 2♣ 9♣ K♥ 2♥ 9♠ 3♥ Q♣ 6♥ 8♥ 8♦ 7♠ 4♠ A♠ J♥ A♣ 9♦ 3♣ 5♦ 7♥ K♣ 3♠ Q♦ A♥ 5♠ 8♣ 4♦ Q♥ 7♣ 10♥ 3♦ 5♥ 7♦ J♠ 9♥ K♦ 2♦ 2♠ A♦ Q♠ 6♠ 6♦ 10♣ 8♠ 4♣ 10♠ J♦ 10♦ 6♣ J♣ 4♥ 
#&gt;   Play:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb230" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb230-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in d$draw(1.5) : is.integer(n) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb232" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb232-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in d$draw(0L) : n &gt; 0 is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb234" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb234-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">53</span>L))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in d$draw(53L) : n &lt;= length(self$deck) is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb236" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb236-1">d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>L)</span>
<span id="cb236-2">d</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: 4♠ A♠ J♥ A♣ 9♦ 3♣ 5♦ 7♥ K♣ 3♠ Q♦ A♥ 5♠ 8♣ 4♦ Q♥ 7♣ 10♥ 3♦ 5♥ 7♦ J♠ 9♥ K♦ 2♦ 2♠ A♦ Q♠ 6♠ 6♦ 10♣ 8♠ 4♣ 10♠ J♦ 10♦ 6♣ J♣ 4♥ 
#&gt;   Play: 5♣ K♠ 2♣ 9♣ K♥ 2♥ 9♠ 3♥ Q♣ 6♥ 8♥ 8♦ 7♠</code></pre>
</div>
<div class="sourceCode cell-code" id="cb238" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb238-1">d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>L)</span>
<span id="cb238-2">d</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: 8♣ 4♦ Q♥ 7♣ 10♥ 3♦ 5♥ 7♦ J♠ 9♥ K♦ 2♦ 2♠ A♦ Q♠ 6♠ 6♦ 10♣ 8♠ 4♣ 10♠ J♦ 10♦ 6♣ J♣ 4♥ 
#&gt;   Play: 5♣ K♠ 2♣ 9♣ K♥ 2♥ 9♠ 3♥ Q♣ 6♥ 8♥ 8♦ 7♠ 4♠ A♠ J♥ A♣ 9♦ 3♣ 5♦ 7♥ K♣ 3♠ Q♦ A♥ 5♠</code></pre>
</div>
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb240-1">d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">reshuffle</span>()</span>
<span id="cb240-2">d</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: K♠ Q♠ 9♠ 4♠ 5♣ 7♥ 10♥ 6♠ A♥ K♣ 8♦ 5♠ 6♣ J♠ J♦ 7♦ 2♠ 6♥ 2♦ 2♣ 10♣ A♣ 4♦ A♠ 8♠ J♥ K♥ 4♣ Q♥ 9♣ 9♥ 3♦ 6♦ 3♠ 8♣ 5♦ A♦ Q♦ 7♠ 3♣ 3♥ 4♥ 7♣ 5♥ J♣ 9♦ 2♥ 10♦ Q♣ 8♥ K♦ 10♠ 
#&gt;   Play:</code></pre>
</div>
</div>
<p>AR Solutions: Our new <code>ShuffledDeck</code> class will use <code>sample()</code> and positive integer subsetting to implement the reshuffling and drawing functionality. We also add a check, so you cannot draw more cards than there are left in the deck.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb242" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb242-1">ShuffledDeck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb242-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ShuffledDeck"</span>,</span>
<span id="cb242-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb242-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deck =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb242-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deck =</span> cards) {</span>
<span id="cb242-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(deck)</span>
<span id="cb242-7">    },</span>
<span id="cb242-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reshuffle =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb242-9">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(cards)</span>
<span id="cb242-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb242-11">    },</span>
<span id="cb242-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb242-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck)</span>
<span id="cb242-14">    },</span>
<span id="cb242-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb242-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>()) {</span>
<span id="cb242-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Only "</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" cards remaining."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb242-18">      }</span>
<span id="cb242-19"></span>
<span id="cb242-20">      output <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n)]</span>
<span id="cb242-21">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>deck[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n)]</span>
<span id="cb242-22">      output</span>
<span id="cb242-23">    }</span>
<span id="cb242-24">  )</span>
<span id="cb242-25">)</span></code></pre></div>
</div>
<p>Notes: it seems simpler to set <code>deck</code> directly instead of using an <code>initialize</code> function, although <code>sample(cards)</code> is cleaner. <code>self$n()</code> is a useful function, and the choice of removing and returning cards with <code>draw()</code> is probably a better design. I prefer my approach using <code>head()</code> and <code>tail()</code> over R Solutions use of <code>seq_len()</code>.</p>
<p>Bug: per 14.4.3 setting fields directly fixes the order when the class is <em>defined</em>. This results in a bug: <code>Cards</code> has the same starting shuffle for each new object, but <code>ShuffledDeck</code> does not:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb243" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb243-1">Cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: 5♣ K♠ 2♣ 9♣ K♥ 2♥ 9♠ 3♥ Q♣ 6♥ 8♥ 8♦ 7♠ 4♠ A♠ J♥ A♣ 9♦ 3♣ 5♦ 7♥ K♣ 3♠ Q♦ A♥ 5♠ 8♣ 4♦ Q♥ 7♣ 10♥ 3♦ 5♥ 7♦ J♠ 9♥ K♦ 2♦ 2♠ A♦ Q♠ 6♠ 6♦ 10♣ 8♠ 4♣ 10♠ J♦ 10♦ 6♣ J♣ 4♥ 
#&gt;   Play:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb245" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb245-1">Cards<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Cards: 
#&gt;   Deck: 5♣ K♠ 2♣ 9♣ K♥ 2♥ 9♠ 3♥ Q♣ 6♥ 8♥ 8♦ 7♠ 4♠ A♠ J♥ A♣ 9♦ 3♣ 5♦ 7♥ K♣ 3♠ Q♦ A♥ 5♠ 8♣ 4♦ Q♥ 7♣ 10♥ 3♦ 5♥ 7♦ J♠ 9♥ K♦ 2♦ 2♠ A♦ Q♠ 6♠ 6♦ 10♣ 8♠ 4♣ 10♠ J♦ 10♦ 6♣ J♣ 4♥ 
#&gt;   Play:</code></pre>
</div>
<div class="sourceCode cell-code" id="cb247" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb247-1">ShuffledDeck<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "K♥"  "4♠"  "7♥"  "9♠"  "9♥"  "6♥"  "Q♦"  "4♦"  "9♦"  "J♦"  "A♠"  "10♠"
#&gt; [13] "4♥"  "K♣"  "8♥"  "3♠"  "8♣"  "3♣"  "A♦"  "6♣"  "K♠"  "J♠"  "3♥"  "2♥" 
#&gt; [25] "3♦"  "5♥"  "J♥"  "J♣"  "2♠"  "7♠"  "A♥"  "5♠"  "Q♥"  "Q♣"  "6♦"  "7♦" 
#&gt; [37] "10♥" "5♣"  "5♦"  "6♠"  "4♣"  "2♦"  "9♣"  "10♣" "2♣"  "7♣"  "K♦"  "A♣" 
#&gt; [49] "10♦" "8♠"  "8♦"  "Q♠"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb249" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb249-1">ShuffledDeck<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">draw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "8♣"  "6♠"  "3♠"  "4♥"  "J♥"  "Q♣"  "J♣"  "8♦"  "5♦"  "K♠"  "10♣" "K♣" 
#&gt; [13] "2♦"  "Q♥"  "A♦"  "9♠"  "7♦"  "3♥"  "7♣"  "9♦"  "A♥"  "J♠"  "8♥"  "A♣" 
#&gt; [25] "8♠"  "7♠"  "K♥"  "5♥"  "2♣"  "2♥"  "5♠"  "10♠" "3♦"  "4♣"  "A♠"  "Q♠" 
#&gt; [37] "9♥"  "9♣"  "6♥"  "10♥" "K♦"  "7♥"  "2♠"  "Q♦"  "3♣"  "10♦" "4♠"  "6♣" 
#&gt; [49] "4♦"  "5♣"  "6♦"  "J♦"</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Why can’t you model a bank account or a deck of cards with an S3 class?</li>
</ol>
<p>Answer: because S3 classes are copied-on-modify, they lack state. R6 classes are stateful since they are modified in-place. Both bank accounts and a deck of cards are stateful objects.</p>
<p>AR Solutions: Because S3 classes obey R’s usual semantics of copy-on-modify: every time you deposit money into your bank account or draw a card from the deck, you’d get a new copy of the object.</p>
<p>It is possible to combine S3 classes with an environment (which is how R6 works), but it is ill-advised to create an object that looks like a regular R object but has reference semantics.</p>
<hr>
<ol start="4" type="1">
<li>Create an R6 class that allows you to get and set the current time zone. You can access the current time zone with <code>Sys.timezone()</code> and set it with <code>Sys.setenv(TZ = "newtimezone")</code>. When setting the time zone, make sure the new time zone is in the list provided by <code>OlsonNames()</code>.</li>
</ol>
<p>Answer: <code>TimeZone</code> is initialized with the current time zone, stored as <code>tz</code> in the object.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb251" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb251-1">orig_tz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.timezone</span>()</span>
<span id="cb251-2"></span>
<span id="cb251-3">TimeZone <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TimeZone"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb251-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.timezone</span>(),</span>
<span id="cb251-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb251-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current time zone: "</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tz, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb251-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb251-8">  },</span>
<span id="cb251-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(tz) {</span>
<span id="cb251-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(tz <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OlsonNames</span>())</span>
<span id="cb251-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TZ =</span> tz)</span>
<span id="cb251-12">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tz</span>
<span id="cb251-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set time zone: "</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>tz, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb251-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb251-15">  }</span>
<span id="cb251-16">))</span>
<span id="cb251-17"></span>
<span id="cb251-18">tz <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> TimeZone<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb251-19">tz<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Current time zone: America/Chicago</code></pre>
</div>
<div class="sourceCode cell-code" id="cb253" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb253-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "Mon Dec  4 15:10:24 2023"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb255" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb255-1">tz<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"America/New_York"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Set time zone: America/New_York</code></pre>
</div>
<div class="sourceCode cell-code" id="cb257" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb257-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">date</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "Mon Dec  4 16:10:24 2023"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb259" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb259-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TZ =</span> orig_tz)</span></code></pre></div>
</div>
<p>Bug: like <code>Cards</code>, <code>TimeZone</code> should set <code>tz</code> in <code>initialize()</code>.</p>
<p>AR Solutions: To create an R6 class that allows us to get and set the time zone, we provide the respective functions as public methods to the R6 class.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb260" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb260-1">Timezone <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb260-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Timezone"</span>,</span>
<span id="cb260-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb260-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb260-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.timezone</span>()</span>
<span id="cb260-6">    },</span>
<span id="cb260-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb260-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OlsonNames</span>())</span>
<span id="cb260-9">      old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span>
<span id="cb260-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">TZ =</span> value)</span>
<span id="cb260-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(old)</span>
<span id="cb260-12">    }</span>
<span id="cb260-13">  )</span>
<span id="cb260-14">)</span></code></pre></div>
</div>
<p>(When setting, we return the old value invisibly because this makes it easy to restore the previous value.)</p>
<hr>
<ol start="5" type="1">
<li>Create an R6 class that manages the current working directory. It should have <code>$get()</code> and <code>$set()</code> methods.</li>
</ol>
<p>Answer: similar to <code>TimeZone</code>, <code>WorkingDirectory</code> initializes <code>wd</code> to <code>getwd()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb261" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb261-1">orig_wd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb261-2"></span>
<span id="cb261-3">WorkingDirectory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorkingDirectory"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb261-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wd =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>(),</span>
<span id="cb261-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb261-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Current directory: "</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wd, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb261-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb261-8">  },</span>
<span id="cb261-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dir) {</span>
<span id="cb261-10">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(dir)</span>
<span id="cb261-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Set directory: "</span>, self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wd, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb261-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb261-13">  }</span>
<span id="cb261-14">))</span>
<span id="cb261-15"></span>
<span id="cb261-16">wd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> WorkingDirectory<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb261-17">wd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Current directory: /Users/agamemnon/GitHub/rtraining/analysis</code></pre>
</div>
<div class="sourceCode cell-code" id="cb263" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb263-1">wd<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"assets"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Set directory: /Users/agamemnon/GitHub/rtraining/analysis</code></pre>
</div>
<div class="sourceCode cell-code" id="cb265" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb265-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "extra.css"       "recursive-1.png" "recursive-2.png"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb267" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb267-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(orig_wd)</span></code></pre></div>
</div>
<p>AR Solutions: Take a look at the following implementation, which is quite minimalistic:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb268" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb268-1">WorkingDirectory <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb268-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WorkingDirectory"</span>,</span>
<span id="cb268-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb268-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">get =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb268-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getwd</span>()</span>
<span id="cb268-6">    },</span>
<span id="cb268-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb268-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>(value)</span>
<span id="cb268-9">    }</span>
<span id="cb268-10">  )</span>
<span id="cb268-11">)</span></code></pre></div>
</div>
<p>Bug: like <code>Cards</code>, <code>WorkingDirectory</code> should set <code>wd</code> in <code>initialize()</code>. Also, as AR Solutions notes in a comment:</p>
<blockquote class="blockquote">
<p>You should never do <code>get = getwd()</code> etc because in packages, that inlines the function definition at package build time, creating a subtle dependency that will cause bugs that are extremely difficult to track down</p>
</blockquote>
<hr>
<ol start="6" type="1">
<li>Why can’t you model the time zone or current working directory with an S3 class?</li>
</ol>
<p>Answer: per exercise 3, time zone and current working directory are both stateful.</p>
<p>AR Solutions: Because S3 classes are not suitable for modelling a state that changes over time. S3 methods should (almost) always return the same result when called with the same inputs.</p>
<hr>
<ol start="7" type="1">
<li>What base type are R6 objects built on top of? What attributes do they have?</li>
</ol>
<p>Answer: R6n objects are built on environments, and have a class attribute with an S3 hierarchy including the base R6 class, per 14.2.5.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb269" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb269-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(tz)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "environment"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb271-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(tz)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $class
#&gt; [1] "TimeZone" "R6"</code></pre>
</div>
</div>
<p>AR Solutions: R6 objects are built on top of environments. They have a <code>class</code> attribute, which is a character vector containing the class name, the name of any super classes (if existent) and the string <code>"R6"</code> as the last element.</p>
<hr>
</section>
<section id="exercises-7" class="level2">
<h2 class="anchored" data-anchor-id="exercises-7">14.3.3 Exercises</h2>
<ol type="1">
<li>Create a bank account class that prevents you from directly setting the account balance, but you can still withdraw from and deposit to. Throw an error if you attempt to go into overdraft.</li>
</ol>
<p>Answer: <code>SecureAccount</code> uses a private internal balance exposed through an active function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb273-1">SecureAccount <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SecureAccount"</span>,</span>
<span id="cb273-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb273-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.balance =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L</span>
<span id="cb273-4">  ),</span>
<span id="cb273-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb273-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deposit =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb273-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(value), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb273-8">      private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> value</span>
<span id="cb273-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb273-10">    },</span>
<span id="cb273-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb273-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.integer</span>(value), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance)</span>
<span id="cb273-13">      private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> value</span>
<span id="cb273-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb273-15">    }</span>
<span id="cb273-16">  ),</span>
<span id="cb273-17">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb273-18">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">balance =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb273-19">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb273-20">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.balance</span>
<span id="cb273-21">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb273-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`$balance` is read only"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb273-23">      }</span>
<span id="cb273-24">    }</span>
<span id="cb273-25">  )</span>
<span id="cb273-26">)</span>
<span id="cb273-27"></span>
<span id="cb273-28">sa <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> SecureAccount<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb273-29">sa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deposit</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>L)</span>
<span id="cb273-30">sa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>L)</span>
<span id="cb273-31"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(sa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withdraw</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>L))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in sa$withdraw(20L) : value &lt;= private$.balance is not TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb275-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(sa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : `$balance` is read only</code></pre>
</div>
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb277-1">sa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 5</code></pre>
</div>
</div>
<p>AR Solutions: To fulfill this requirement, we make balance a private field. The user has to use the <code>$deposit()</code> and <code>$withdraw()</code> methods which have access to the balance field.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb279" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb279-1">BankAccountStrict2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb279-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BankAccountStrict2"</span>,</span>
<span id="cb279-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb279-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">deposit =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dep =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb279-5">      private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dep</span>
<span id="cb279-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb279-7">    },</span>
<span id="cb279-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">withdraw =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">draw =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb279-9">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> draw <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb279-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(</span>
<span id="cb279-11">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Your `withdraw` must be smaller "</span>,</span>
<span id="cb279-12">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"than your `balance`."</span>,</span>
<span id="cb279-13">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb279-14">        )</span>
<span id="cb279-15">      }</span>
<span id="cb279-16">      private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>balance <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> draw</span>
<span id="cb279-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb279-18">    }</span>
<span id="cb279-19">  ),</span>
<span id="cb279-20">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb279-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">balance =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb279-22">  )</span>
<span id="cb279-23">)</span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>Create a class with a write-only <code>$password</code> field. It should have <code>$check_password(password)</code> method that returns <code>TRUE</code> or <code>FALSE</code>, but there should be no way to view the complete password.</li>
</ol>
<p>Answer: <code>Login</code> implements a write-only <code>$password</code> field using an active function. <code>check_password()</code> will error if a password hasn’t been set. In real life, this should be implemented with a secure password hashing function, like <code>bcrypt</code> or <code>scrypt</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb280" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb280-1">Login <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Login"</span>,</span>
<span id="cb280-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb280-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.password =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb280-4">  ),</span>
<span id="cb280-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb280-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check_password =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(password) {</span>
<span id="cb280-7">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(password), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(password) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb280-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.password)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error: password not set"</span>)</span>
<span id="cb280-9">      password <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.password</span>
<span id="cb280-10">    }</span>
<span id="cb280-11">  ),</span>
<span id="cb280-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb280-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb280-14">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb280-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`$password` is write only"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb280-16">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb280-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(value), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb280-18">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb280-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb280-20">      }</span>
<span id="cb280-21">    }</span>
<span id="cb280-22">  )</span>
<span id="cb280-23">)</span>
<span id="cb280-24"></span>
<span id="cb280-25">l <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Login<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb280-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_password</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password1"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in l$check_password("Password1") : Error: password not set</code></pre>
</div>
<div class="sourceCode cell-code" id="cb282" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb282-1">l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password1"</span></span>
<span id="cb282-2">l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_password</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb284" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb284-1">l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_password</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password2"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb286" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb286-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(l<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : `$password` is write only</code></pre>
</div>
</div>
<p>AR Solutions: To protect the password from changes and direct access, the password will be a private field. Further, our <code>Password</code> will get its own print method which hides the password.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb288" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb288-1">Password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb288-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Password"</span>,</span>
<span id="cb288-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb288-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">print =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb288-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;Password&gt;: ********</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb288-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(self)</span>
<span id="cb288-7">    },</span>
<span id="cb288-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">set =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb288-9">      private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb288-10">    },</span>
<span id="cb288-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">check =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(password) {</span>
<span id="cb288-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(password, private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password)</span>
<span id="cb288-13">    }</span>
<span id="cb288-14">  ),</span>
<span id="cb288-15">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb288-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">password =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb288-17">  )</span>
<span id="cb288-18">)</span></code></pre></div>
</div>
<p>Let’s create one instance of our new class and confirm that the password is neither accessible nor visible, but still check-able.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb289" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb289-1">my_pw <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Password<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb289-2">my_pw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snuffles"</span>)</span>
<span id="cb289-3">my_pw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb291" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb291-1">my_pw</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;Password&gt;: ********</code></pre>
</div>
<div class="sourceCode cell-code" id="cb293" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb293-1">my_pw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snuggles"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb295" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb295-1">my_pw<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"snuffles"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<p>Note: the AR Solutions class properly masks the password when calling <code>print()</code>, but mine does not:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb297" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb297-1">l</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;Login&gt;
#&gt;   Public:
#&gt;     check_password: function (password) 
#&gt;     clone: function (deep = FALSE) 
#&gt;     password: active binding
#&gt;   Private:
#&gt;     .password: Password1</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Extend the <code>Rando</code> class with another active binding that allows you to access the previous random value. Ensure that active binding is the only way to access the value.</li>
</ol>
<p>Answer: the updated <code>Rando</code> class sets a private value when <code>random</code> is run that is accessible only through <code>previous</code>, initially set to <code>NA</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb299" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb299-1">Rando <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rando"</span>,</span>
<span id="cb299-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb299-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.previous =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb299-4">  ),</span>
<span id="cb299-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb299-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">random =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb299-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb299-8">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.previous <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb299-9">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.previous</span>
<span id="cb299-10">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb299-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't set `$random`"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb299-12">      }</span>
<span id="cb299-13">    },</span>
<span id="cb299-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">previous =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb299-15">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb299-16">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.previous</span>
<span id="cb299-17">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb299-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't set `$previous`"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb299-19">      }</span>
<span id="cb299-20">    }</span>
<span id="cb299-21">  )</span>
<span id="cb299-22">)</span>
<span id="cb299-23">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Rando<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb299-24"></span>
<span id="cb299-25">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>previous</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb301" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb301-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>random</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.9643438</code></pre>
</div>
<div class="sourceCode cell-code" id="cb303" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb303-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>previous</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.9643438</code></pre>
</div>
<div class="sourceCode cell-code" id="cb305" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb305-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>random</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.1186832</code></pre>
</div>
<div class="sourceCode cell-code" id="cb307" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb307-1">x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>previous</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.1186832</code></pre>
</div>
</div>
<p>AR Solutions: To access the previous random value from an instance, we add a private <code>$last_random</code> field to our class, and we modify <code>$random()</code> to write to this field, whenever it is called. To access the <code>$last_random</code> field we provide <code>$previous()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb309" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb309-1">Rando <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb309-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Rando"</span>,</span>
<span id="cb309-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb309-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">last_random =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb309-5">  ),</span>
<span id="cb309-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">active =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb309-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">random =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb309-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb309-9">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>last_random <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb309-10">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>last_random</span>
<span id="cb309-11">      } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb309-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't set `$random`."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb309-13">      }</span>
<span id="cb309-14">    },</span>
<span id="cb309-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">previous =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(value) {</span>
<span id="cb309-16">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">missing</span>(value)) {</span>
<span id="cb309-17">        private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>last_random</span>
<span id="cb309-18">      }</span>
<span id="cb309-19">    }</span>
<span id="cb309-20">  )</span>
<span id="cb309-21">)</span></code></pre></div>
</div>
<hr>
<ol start="4" type="1">
<li>Can subclasses access private fields/methods from their parent? Perform an experiment to find out.</li>
</ol>
<p>Answer: <code>LoginEvil</code> shows that subclasses <em>can</em> access private fields from their parent.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb310" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb310-1">LoginEvil <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LoginEvil"</span>,</span>
<span id="cb310-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> Login,</span>
<span id="cb310-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb310-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">steal_password =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb310-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The password is: "</span>, private<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>.password, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb310-6">    }</span>
<span id="cb310-7">  )</span>
<span id="cb310-8">)</span>
<span id="cb310-9"></span>
<span id="cb310-10">evil <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> LoginEvil<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()</span>
<span id="cb310-11">evil<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>password <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SuperSecretPassword"</span></span>
<span id="cb310-12">evil<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">steal_password</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; The password is: SuperSecretPassword</code></pre>
</div>
</div>
<p>AR Solutions: To find out if private fields/methods can be accessed from subclasses, we first create a class <code>A</code> with a private field <code>foo</code> and a private method <code>bar()</code>. Afterwards, an instance of a subclass <code>B</code> is created and calls the <code>foobar()</code> methods, which tries to access the <code>foo</code> field and the <code>bar()</code> method from its superclass <code>A</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb312" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb312-1">A <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb312-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>,</span>
<span id="cb312-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">private =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb312-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">field =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>,</span>
<span id="cb312-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb312-6">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span>
<span id="cb312-7">    }</span>
<span id="cb312-8">  )</span>
<span id="cb312-9">)</span>
<span id="cb312-10">B <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb312-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B"</span>,</span>
<span id="cb312-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherit =</span> A,</span>
<span id="cb312-13">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb312-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">test =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb312-15">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Field:  "</span>, super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>field, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb312-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method: "</span>, super<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">method</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb312-17">    }</span>
<span id="cb312-18">  )</span>
<span id="cb312-19">)</span>
<span id="cb312-20">B<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Field:  
#&gt; Method: bar</code></pre>
</div>
</div>
<p>We conclude that subclasses can access private methods from their superclasses, but not private fields.</p>
<p>Note: as I discovered, private fields are not accessible through <code>super$</code>, but <em>are</em> accessible through <code>private$</code>.</p>
<hr>
</section>
<section id="exercises-8" class="level2">
<h2 class="anchored" data-anchor-id="exercises-8">14.4.4 Exercises</h2>
<ol type="1">
<li>Create a class that allows you to write a line to a specified file. You should open a connection to the file in <code>$initialize()</code>, append a line using <code>cat()</code> in <code>$append_line()</code>, and close the connection in <code>$finalize()</code>.</li>
</ol>
<p>Answer: <code>WriteFile</code> implemented below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb314" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb314-1">WriteFile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WriteFile"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb314-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">wfile =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb314-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(filename) {</span>
<span id="cb314-4">    self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wfile <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(filename, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb314-5">  },</span>
<span id="cb314-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append_line =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(line) {</span>
<span id="cb314-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(line, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wfile)</span>
<span id="cb314-8">  },</span>
<span id="cb314-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finalize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb314-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>wfile)</span>
<span id="cb314-11">  }</span>
<span id="cb314-12">))</span>
<span id="cb314-13"></span>
<span id="cb314-14">tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb314-15">wf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> WriteFile<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(tmp)</span>
<span id="cb314-16">wf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append_line</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The quick brown fox jumps over the lazy dog.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb314-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(tmp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "The quick brown fox jumps over the lazy dog."</code></pre>
</div>
</div>
<p>AR Solutions: Our <code>FileWriter</code> class will create a connection to a file at initialization. Therefore, we open a connection to a user specified file during the initialisation. Note that we need to set <code>open = "a"</code> in <code>file()</code> to open connection for appending text. Otherwise, <code>cat()</code> would only work when applied to files, but not with connections as explicitly asked for in the exercise. Further, we add the <code>append_line()</code> method and a <code>close()</code> statement as finalizer.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb316" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb316-1">FileWriter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> R6<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">R6Class</span>(</span>
<span id="cb316-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">classname =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FileWriter"</span>,</span>
<span id="cb316-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">public =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb316-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">con =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb316-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">initialize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(filename) {</span>
<span id="cb316-6">      self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>con <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file</span>(filename, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">open =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb316-7">    },</span>
<span id="cb316-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">finalize =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb316-9">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close</span>(self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>con)</span>
<span id="cb316-10">    },</span>
<span id="cb316-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append_line =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb316-12">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> self<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>con)</span>
<span id="cb316-13">    }</span>
<span id="cb316-14">  )</span>
<span id="cb316-15">)</span></code></pre></div>
</div>
<hr>
</section>
</section>
<section id="s4" class="level1">
<h1>15 S4</h1>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb317" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb317-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<p>S4 provides a formal approach to functional OOP. The underlying ideas are similar to S3 (the topic of Chapter 13), but implementation is much stricter and makes use of specialised functions for creating classes (<code>setClass()</code>), generics (<code>setGeneric()</code>), and methods (<code>setMethod()</code>). Additionally, S4 provides both multiple inheritance (i.e.&nbsp;a class can have multiple parents) and multiple dispatch (i.e.&nbsp;method dispatch can use the class of multiple arguments).</p>
<p>An important new component of S4 is the <strong>slot</strong>, a named component of the object that is accessed using the specialised subsetting operator <code>@</code> (pronounced at). The set of slots, and their classes, forms an important part of the definition of an S4 class.</p>
<section id="exercises-9" class="level2">
<h2 class="anchored" data-anchor-id="exercises-9">15.2.1 Exercises</h2>
<ol type="1">
<li><code>lubridate::period()</code> returns an S4 class. What slots does it have? What class is each slot? What accessors does it provide?</li>
</ol>
<p>Answer: the S4 class, <code>Period</code>, has 6 slots: .Data, year, month, day, hour, and minute, all numeric. I couldn’t figure out how to get the accessors.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb318" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb318-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period</span>()</span>
<span id="cb318-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(p)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "Period"   "Timespan" "numeric"  "vector"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb320" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb320-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slotNames</span>(p), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">class</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">slot</span>(p, x)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;     .Data      year     month       day      hour    minute 
#&gt; "numeric" "numeric" "numeric" "numeric" "numeric" "numeric"</code></pre>
</div>
</div>
<p>AR Solutions: Objects of the S4 <code>Period</code> class have six slots named <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, and <code>.Data</code> (which contains the number of seconds). All slots are of type double. Most fields can be retrieved by an identically named accessor (e.g.&nbsp;<code>lubridate::year()</code> will return the field), use <code>second()</code> to get the <code>.Data</code> slot.</p>
<p>As a short example, we create a period of 1 second, 2 minutes, 3 hours, 4 days and 5 weeks.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb322" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb322-1">example_12345 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period</span>(</span>
<span id="cb322-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb322-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"second"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minute"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hour"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"day"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"week"</span>)</span>
<span id="cb322-4">)</span></code></pre></div>
</div>
<p>This should add up to a period of 39 days, 3 hours, 2 minutes and 1 second.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb323" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb323-1">example_12345</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "39d 3H 2M 1S"</code></pre>
</div>
</div>
<p>When we inspect <code>example_12345</code>, we see the fields and infer that the seconds are stored in the <code>.Data</code> field.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb325" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb325-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(example_12345)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Formal class 'Period' [package "lubridate"] with 6 slots
#&gt;   ..@ .Data : num 1
#&gt;   ..@ year  : num 0
#&gt;   ..@ month : num 0
#&gt;   ..@ day   : num 39
#&gt;   ..@ hour  : num 3
#&gt;   ..@ minute: num 2</code></pre>
</div>
</div>
<p>Notes: it is easier to just use <code>getClass</code> to enumerate slots and slot classes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb327" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb327-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getClass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(lubridate<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">period</span>()))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Class "Period" [package "lubridate"]
#&gt; 
#&gt; Slots:
#&gt;                                                       
#&gt; Name:    .Data    year   month     day    hour  minute
#&gt; Class: numeric numeric numeric numeric numeric numeric
#&gt; 
#&gt; Extends: 
#&gt; Class "Timespan", directly
#&gt; Class "numeric", from data part
#&gt; Class "vector", by class "numeric", distance 2</code></pre>
</div>
</div>
<p>Methods defined for a particular class can be listed using <code>showMethods()</code>, and S4 methods can be listed using <code>.S4methods()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb329" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb329-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.S4methods</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Period"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; no methods found</code></pre>
</div>
</div>
<p><code>Period</code> has no S4 methods, only regular functions.</p>
<hr>
<ol start="2" type="1">
<li>What other ways can you find help for a method? Read <code>?"?"</code> and summarise the details.</li>
</ol>
<p>Answer: there are three ways to get help for a method:</p>
<ol type="1">
<li><code>?function</code> provides the function documentation</li>
<li><code>methods?function</code> provides the overall documentation methods for the function</li>
<li><code>methods?function(signature)</code> provides the documentation for a specific method</li>
</ol>
<p>AR Solutions: Besides adding <code>?</code> in front of a function call (i.e.&nbsp;<code>?method()</code>), we may find:</p>
<ul>
<li>general documentation for a generic via <code>?genericName</code></li>
<li>general documentation for the methods of a generic via <code>methods?genericName</code></li>
<li>documentation for a specific method via <code>ClassName?methodName</code>.</li>
</ul>
<hr>
</section>
<section id="exercises-10" class="level2">
<h2 class="anchored" data-anchor-id="exercises-10">15.3.6 Exercises</h2>
<ol type="1">
<li>Extend the Person class with fields to match <code>utils::person()</code>. Think about what slots you will need, what class each slot should have, and what you’ll need to check in your validity method.</li>
</ol>
<p>Answer: the <code>Person</code> class uses the fields from <code>utils::person()</code>, excluding deprecated fields. Per the docs, <code>family</code> must be a string (length 1), others can be vectors (but this is not enforced).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb331" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb331-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb331-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb331-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb331-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb331-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb331-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb331-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span></span>
<span id="cb331-8">  ),</span>
<span id="cb331-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb331-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb331-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb331-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb331-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb331-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb331-15">  )</span>
<span id="cb331-16">)</span>
<span id="cb331-17"></span>
<span id="cb331-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setValidity</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) {</span>
<span id="cb331-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regex from https://www.nicebread.de/validating-email-adresses-in-r/</span></span>
<span id="cb331-20">  regex <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;[A-Z0-9._%+-]+@[A-Z0-9.-]+</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.[A-Z]{2,}</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;"</span></span>
<span id="cb331-21"></span>
<span id="cb331-22">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>family) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb331-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@family must be a string (length 1)"</span></span>
<span id="cb331-24">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>email) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grepl</span>(regex, object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>email, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ignore.case =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb331-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"invalid @email"</span></span>
<span id="cb331-26">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb331-27">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb331-28">  }</span>
<span id="cb331-29">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb331-30">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb331-31"></span>
<span id="cb331-32">Person <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb331-33">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>) {</span>
<span id="cb331-34">  given <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(given)</span>
<span id="cb331-35">  family <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(family)</span>
<span id="cb331-36">  email <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(email)</span>
<span id="cb331-37">  role <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(role)</span>
<span id="cb331-38">  comment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(comment)</span>
<span id="cb331-39"></span>
<span id="cb331-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> given, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> family, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> email, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> role, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> comment)</span>
<span id="cb331-41">}</span>
<span id="cb331-42"></span>
<span id="cb331-43"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Person</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Benninghoff"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"john@example.com"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "Person"
#&gt; Slot "given":
#&gt; [1] "John"
#&gt; 
#&gt; Slot "family":
#&gt; [1] "Benninghoff"
#&gt; 
#&gt; Slot "email":
#&gt; [1] "john@example.com"
#&gt; 
#&gt; Slot "role":
#&gt; [1] NA
#&gt; 
#&gt; Slot "comment":
#&gt; [1] "51"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb333" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb333-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Person</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Three"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Last"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Names"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in validObject(.Object) : 
#&gt;   invalid class "Person" object: @family must be a string (length 1)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb335" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb335-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Person</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"invalid@local"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in validObject(.Object) : 
#&gt;   invalid class "Person" object: invalid @email</code></pre>
</div>
</div>
<p>AR Solutions: The Person class from <em>Advanced R</em> contains the slots <code>name</code> and <code>age</code>. The person class from the <code>{utils}</code> package contains the slots <code>given</code> (vector of given names), <code>family</code>, <code>role</code>, <code>email</code> and <code>comment</code> (see <code>?utils::person</code>).</p>
<p>All slots from <code>utils::person()</code> besides <code>role</code> must be of type character and length 1. The entries in the <code>role</code> slot must match one of the following abbreviations “aut”, “com”, “cph”, “cre”, “ctb”, “ctr”, “dtc”, “fnd”, “rev”, “ths”, “trl”. Therefore, <code>role</code> might be of different length than the other slots and we’ll add a corresponding constraint within the validator.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb337" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb337-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Definition of the Person class</span></span>
<span id="cb337-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb337-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb337-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>,</span>
<span id="cb337-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb337-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb337-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb337-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb337-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span></span>
<span id="cb337-10">  ),</span>
<span id="cb337-11">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb337-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>,</span>
<span id="cb337-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-17">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span></span>
<span id="cb337-18">  )</span>
<span id="cb337-19">)</span>
<span id="cb337-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Helper to create instances of the Person class</span></span>
<span id="cb337-21">Person <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(given, family,</span>
<span id="cb337-22">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>,</span>
<span id="cb337-23">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-24">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb337-25">                   <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>) {</span>
<span id="cb337-26">  age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.double</span>(age)</span>
<span id="cb337-27">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb337-28">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> age,</span>
<span id="cb337-29">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">given =</span> given,</span>
<span id="cb337-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">family =</span> family,</span>
<span id="cb337-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">role =</span> role,</span>
<span id="cb337-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">email =</span> email,</span>
<span id="cb337-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> comment</span>
<span id="cb337-34">  )</span>
<span id="cb337-35">}</span>
<span id="cb337-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validator to ensure that each slot is of length one</span></span>
<span id="cb337-37"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setValidity</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: cyclocomp_linter.</span></span>
<span id="cb337-38">  invalids <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb337-39">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb337-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>given) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb337-41">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>family) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb337-42">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>email) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span></span>
<span id="cb337-43">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>comment) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb337-44">    invalids <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(</span>
<span id="cb337-45">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@name, @age, @given, @family, @email, "</span>,</span>
<span id="cb337-46">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@comment must be of length 1"</span></span>
<span id="cb337-47">    )</span>
<span id="cb337-48">  }</span>
<span id="cb337-49"></span>
<span id="cb337-50">  known_roles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb337-51">    <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aut"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"com"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cph"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cre"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ctb"</span>,</span>
<span id="cb337-52">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ctr"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dtc"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fnd"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rev"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ths"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trl"</span></span>
<span id="cb337-53">  )</span>
<span id="cb337-54"></span>
<span id="cb337-55">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>role <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> known_roles)) {</span>
<span id="cb337-56">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(</span>
<span id="cb337-57">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@role(s) must be one of"</span>,</span>
<span id="cb337-58">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(known_roles, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: paste_linter.</span></span>
<span id="cb337-59">    )</span>
<span id="cb337-60">  }</span>
<span id="cb337-61"></span>
<span id="cb337-62">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(invalids)) {</span>
<span id="cb337-63">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(invalids)</span>
<span id="cb337-64">  }</span>
<span id="cb337-65">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb337-66">}) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb337-67">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span></code></pre></div>
</div>
<p>Notes: while I missed including <code>age</code>, our implementations are similar except for validations.</p>
<hr>
<ol start="2" type="1">
<li>What happens if you define a new S4 class that doesn’t have any slots? (Hint: read about virtual classes in <code>?setClass</code>.)</li>
</ol>
<p>Answer: defining a new class with no slots makes it a virtual class, which can’t be used to create new objects, but can be used to define a class union.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb338" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb338-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virtual"</span>)</span>
<span id="cb338-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virtual"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in new("Virtual") : 
#&gt;   trying to generate an object from a virtual class ("Virtual")</code></pre>
</div>
<div class="sourceCode cell-code" id="cb340" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb340-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClassUnion</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virtual"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>)</span>
<span id="cb340-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Virtual"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Extended class definition ( "ClassUnionRepresentation" )
#&gt; Virtual Class "Virtual" [in ".GlobalEnv"]
#&gt; 
#&gt; No Slots, prototype of class "Person"
#&gt; 
#&gt; Known Subclasses: "Person"</code></pre>
</div>
</div>
<p>AR Solutions: It depends on the other arguments. If we inherit from another class, we get the same slots. But something interesting happens if we don’t inherit from an existing class. We get a virtual class. A virtual class can’t be instantiated:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb342" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb342-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>)</span>
<span id="cb342-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in new("Human") : 
#&gt;   trying to generate an object from a virtual class ("Human")</code></pre>
</div>
</div>
<p>But can be inherited from:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb344" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb344-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Programmer"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Human"</span>)</span></code></pre></div>
</div>
<hr>
<ol start="3" type="1">
<li>Imagine you were going to reimplement factors, dates, and data frames in S4. Sketch out the <code>setClass()</code> calls that you would use to define the classes. Think about appropriate <code>slots</code> and <code>prototype</code>.</li>
</ol>
<p>Answer: sketch below. Default values would be set in <code>initialize()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb345" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb345-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>,</span>
<span id="cb345-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb345-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb345-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb345-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb345-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span>,</span>
<span id="cb345-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nmax =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span></span>
<span id="cb345-9">  ),</span>
<span id="cb345-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb345-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb345-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb345-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exclude =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb345-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,</span>
<span id="cb345-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nmax =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_integer_</span></span>
<span id="cb345-17">  )</span>
<span id="cb345-18">)</span>
<span id="cb345-19"></span>
<span id="cb345-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S4Date"</span>,</span>
<span id="cb345-21">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-22">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">days =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span></span>
<span id="cb345-23">  ),</span>
<span id="cb345-24">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">days =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L</span>
<span id="cb345-26">  )</span>
<span id="cb345-27">)</span>
<span id="cb345-28"></span>
<span id="cb345-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DataFrame"</span>,</span>
<span id="cb345-30">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-31">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"matrix"</span>,</span>
<span id="cb345-32">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb345-33">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span></span>
<span id="cb345-34">  ),</span>
<span id="cb345-35">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb345-36">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb345-37">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,</span>
<span id="cb345-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row_names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb345-39">  )</span>
<span id="cb345-40">)</span></code></pre></div>
</div>
<p>AR Solutions: For all these classes we need one slot for the data and one slot per attribute. Keep in mind, that inheritance matters for ordered factors and dates. For data frames, special checks like equal lengths of the underlying list’s elements should be done within a validator.</p>
<p>For simplicity we don’t introduce an explicit subclass for ordered factors. Instead, we introduce <code>ordered</code> as a slot.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb346" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb346-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>,</span>
<span id="cb346-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb346-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>,</span>
<span id="cb346-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb346-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span></span>
<span id="cb346-6">  ),</span>
<span id="cb346-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb346-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb346-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb346-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb346-11">  )</span>
<span id="cb346-12">)</span>
<span id="cb346-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Factor"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "Factor"
#&gt; Slot "data":
#&gt; [1] 1 2
#&gt; 
#&gt; Slot "levels":
#&gt; [1] "a" "b" "c"
#&gt; 
#&gt; Slot "ordered":
#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>The <code>Date2</code> class stores its dates as integers, similarly to base R which uses doubles. Dates don’t have any other attributes.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb348" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb348-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date2"</span>,</span>
<span id="cb348-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb348-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span></span>
<span id="cb348-4">  ),</span>
<span id="cb348-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb348-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>()</span>
<span id="cb348-7">  )</span>
<span id="cb348-8">)</span>
<span id="cb348-9"></span>
<span id="cb348-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Date2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "Date2"
#&gt; Slot "data":
#&gt; [1] 1</code></pre>
</div>
</div>
<p>Our <code>DataFrame</code> class consists of a list and a slot for <code>row.names</code>. Most of the logic (e.g.&nbsp;checking that all elements of the list are a vector, and that they all have the same length) would need to be part of a validator.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb350" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb350-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DataFrame"</span>,</span>
<span id="cb350-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb350-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>,</span>
<span id="cb350-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span></span>
<span id="cb350-5">  ),</span>
<span id="cb350-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb350-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(),</span>
<span id="cb350-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb350-9">  )</span>
<span id="cb350-10">)</span>
<span id="cb350-11"></span>
<span id="cb350-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DataFrame"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "DataFrame"
#&gt; Slot "data":
#&gt; $a
#&gt; [1] 1
#&gt; 
#&gt; $b
#&gt; [1] 2
#&gt; 
#&gt; 
#&gt; Slot "row.names":
#&gt; character(0)</code></pre>
</div>
</div>
<p>Notes:</p>
<ul>
<li>A key insight from AR Solutions is that the objects need one slot for data and one for each attribute</li>
<li>My implementation of <code>Factor</code> is wrong, where the AR Solutions answer is clearly right</li>
<li>The implementations of the new <code>Date</code> object are similar; the prototype for AR Solutions is better</li>
<li>The AR Solutions <code>DataFrame</code> omits column names (names), where mine does not; using a list for the data in <code>DataFrame</code> is a better choice, but harder to implement</li>
</ul>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb352" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb352-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $names
#&gt; character(0)
#&gt; 
#&gt; $row.names
#&gt; integer(0)
#&gt; 
#&gt; $class
#&gt; [1] "data.frame"</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-11" class="level2">
<h2 class="anchored" data-anchor-id="exercises-11">15.4.5 Exercises</h2>
<ol type="1">
<li>Add <code>age()</code> accessors for the <code>Person</code> class.</li>
</ol>
<p>Answer: the code below adds age accessors to Advanced R <code>Person</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb354" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb354-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb354-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb354-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb354-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb354-5">  ),</span>
<span id="cb354-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb354-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb354-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb354-9">  )</span>
<span id="cb354-10">)</span>
<span id="cb354-11"></span>
<span id="cb354-12">john <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Smith"</span>)</span>
<span id="cb354-13"></span>
<span id="cb354-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb354-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb354-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age)</span>
<span id="cb354-17"></span>
<span id="cb354-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">age</span>(john)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb356" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb356-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb356-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb356-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb356-4">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb356-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validObject</span>(x)</span>
<span id="cb356-6">  x</span>
<span id="cb356-7">})</span>
<span id="cb356-8"></span>
<span id="cb356-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">age</span>(john) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span></span>
<span id="cb356-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">age</span>(john)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 51</code></pre>
</div>
</div>
<p>AR Solutions: We implement the accessors via an <code>age()</code> generic, with a method for the <code>Person</code> class and a corresponding replacement function <code>age&lt;-</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb358" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb358-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "age"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb360" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb360-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age)</span>
<span id="cb360-2"></span>
<span id="cb360-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">standardGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "age&lt;-"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb362" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb362-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"age&lt;-"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb362-2">  x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb362-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validObject</span>(x)</span>
<span id="cb362-4">  x</span>
<span id="cb362-5">})</span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>In the definition of the generic, why is it necessary to repeat the name of the generic twice?</li>
</ol>
<p>Answer: according to the R docs, <code>setGeneric(name)</code> specifies an existing function. When creating a new generic, the form <code>setGeneric(name, def)</code> is used, where <code>def</code> is <code>standardGeneric(name)</code>.</p>
<p>AR Solutions: Within <code>setGeneric()</code> the <code>name</code> (1st argument) is needed as the name of the generic. Then, the name also explicitly incorporates method dispatch via <code>standardGeneric()</code> within the generic’s body (<code>def</code> parameter of <code>setGeneric()</code>). This behaviour is similar to <code>UseMethod()</code> in S3.</p>
<hr>
<ol start="3" type="1">
<li>Why does the <code>show()</code> method defined in Section 15.4.3 use <code>is(object)[[1]]</code>? (Hint: try printing the employee subclass.)</li>
</ol>
<p>Answer: <code>is(object)</code> returns a vector for a subclass, with the current class first.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb363" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb363-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Employee"</span>,</span>
<span id="cb363-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb363-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb363-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boss =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span></span>
<span id="cb363-5">  ),</span>
<span id="cb363-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb363-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boss =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>)</span>
<span id="cb363-8">  )</span>
<span id="cb363-9">)</span>
<span id="cb363-10"></span>
<span id="cb363-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) {</span>
<span id="cb363-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(object)[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb363-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Name: "</span>, object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb363-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Age:  "</span>, object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb363-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb363-16">  )</span>
<span id="cb363-17">})</span>
<span id="cb363-18"></span>
<span id="cb363-19">john</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Person
#&gt;   Name: John Smith
#&gt;   Age:  51</code></pre>
</div>
<div class="sourceCode cell-code" id="cb365" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb365-1">jane <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Employee"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Doe"</span>)</span>
<span id="cb365-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is</span>(jane)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "Employee" "Person"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb367" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb367-1">jane</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Employee
#&gt;   Name: Jane Doe
#&gt;   Age:  NA</code></pre>
</div>
</div>
<p>AR Solutions: <code>is(object)</code> returns the class of the object. <code>is(object)</code> also contains the superclass, for subclasses like <code>Employee</code>. In order to always return the most specific class (the subclass), <code>show()</code> returns the first element of <code>is(object)</code>.</p>
<hr>
<ol start="4" type="1">
<li>What happens if you define a method with different argument names to the generic?</li>
</ol>
<p>Answer: this should cause method dispatch to fail, but I don’t know of a way to test.</p>
<p>AR Solutions: It depends. We first create the object <code>hadley</code> of class <code>Person</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb369" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb369-1">.Person <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(</span>
<span id="cb369-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>,</span>
<span id="cb369-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span>)</span>
<span id="cb369-4">)</span>
<span id="cb369-5">hadley <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.Person</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hadley"</span>)</span>
<span id="cb369-6">hadley</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Person
#&gt;   Name: Hadley
#&gt;   Age:</code></pre>
</div>
</div>
<p>Now let’s see which arguments can be supplied to the <code>show()</code> generic.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb371" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb371-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $object</code></pre>
</div>
</div>
<p>Usually, we would use this argument when defining a new method.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb373" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb373-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object) {</span>
<span id="cb373-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"creates hard exercises"</span>)</span>
<span id="cb373-3">})</span>
<span id="cb373-4"></span>
<span id="cb373-5">hadley</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Hadley creates hard exercises</code></pre>
</div>
</div>
<p>When we supply another name as a first element of our method (e.g.&nbsp;<code>x</code> instead of <code>object</code>), this element will be matched to the correct <code>object</code> argument and we receive a warning. Our method will work, though:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb375" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb375-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb375-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"creates hard exercises"</span>)</span>
<span id="cb375-3">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning: For function 'show', signature 'Person': argument in method definition
#&gt; changed from (x) to (object)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb377" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb377-1">hadley</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Hadley creates hard exercises</code></pre>
</div>
</div>
<p>If we add more arguments to our method than our generic can handle, we will get an error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb379" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb379-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb379-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb379-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is"</span>, x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years old"</span>)</span>
<span id="cb379-4">  })</span>
<span id="cb379-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in conformMethod(signature, mnames, fnames, f, fdef, definition) : 
#&gt;   in method for 'show' with signature 'object="Person"': formal arguments (object = "Person") omitted in the method definition cannot be in the signature</code></pre>
</div>
</div>
<p>If we do this with arguments added to the correctly written <code>object</code> argument, we will receive an informative error message. It states that we could add other argument names for generics, which can take the <code>...</code> argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb381" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb381-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(</span>
<span id="cb381-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"show"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, y) {</span>
<span id="cb381-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"is"</span>, object<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>age, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"years old"</span>)</span>
<span id="cb381-4">  })</span>
<span id="cb381-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in rematchDefinition(definition, fdef, mnames, fnames, signature) : 
#&gt;   methods can add arguments to the generic 'show' only if '...' is an argument to the generic</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-12" class="level2">
<h2 class="anchored" data-anchor-id="exercises-12">15.5.5 Exercises</h2>
<ol type="1">
<li>Draw the method graph for <code>f(sweat_smile, kissing_cat)</code></li>
</ol>
<p>Answer: skipped.</p>
<p>AR Solutions: Look at the graph and repeat after me: “I will keep my class structure simple and use multiple inheritance sparingly”.</p>
<hr>
<ol start="2" type="1">
<li>Draw the method graph for <code>f(smiley, wink, kissing_smiling_eyes)</code></li>
</ol>
<p>Answer: skipped.</p>
<p>AR Solutions: We see that the method graph below looks simpler than the one above. Relatively speaking, multiple dispatch seems to introduce less complexity than multiple inheritance. Use it with care, though!</p>
<hr>
<ol start="3" type="1">
<li>Take the last example which shows multiple dispatch over two classes that use multiple inheritance. What happens if you define a method for all terminal classes? Why does method dispatch not save us much work here?</li>
</ol>
<p>Answer: since all terminal nodes are equidistant from the classes, the method is ambiguous. This is true at the first level as well. The only way to avoid ambiguity is to avoid method dispatch altogether and define a method at the root node.</p>
<p>AR Solutions: We will introduce ambiguity, since one class has distance 2 to all terminal nodes and the other four have distance 1 to two terminal nodes each. To resolve this ambiguity we have to define five more methods, one per class combination.</p>
<hr>
</section>
<section id="exercises-13" class="level2">
<h2 class="anchored" data-anchor-id="exercises-13">15.6.3 Exercises</h2>
<ol type="1">
<li>What would a full <code>setOldClass()</code> definition look like for an ordered factor (i.e.&nbsp;add <code>slots</code> and <code>prototype</code> the definition above)?</li>
</ol>
<p>Answer: building on the AR Solutions example and the <code>factor</code> example in 15.6.1, the following S4 object behaves like the <code>ordered()</code> version:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb383" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb383-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ordered"</span>,</span>
<span id="cb383-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"integer"</span>,</span>
<span id="cb383-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb383-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb383-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span></span>
<span id="cb383-6">  ),</span>
<span id="cb383-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb383-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb383-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb383-10">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb383-11">  )</span>
<span id="cb383-12">)</span>
<span id="cb383-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setOldClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">S4Class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ordered"</span>)</span>
<span id="cb383-14"></span>
<span id="cb383-15">o <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ordered"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb383-16">o</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "Ordered"
#&gt; [1] 1 2 3 4
#&gt; Slot "levels":
#&gt; [1] "a" "b" "c" "d"
#&gt; 
#&gt; Slot "ordered":
#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb385" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb385-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ordered</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  Ord.factor w/ 4 levels "a"&lt;"b"&lt;"c"&lt;"d": 1 2 3 4</code></pre>
</div>
</div>
<p>AR Solutions: The purpose of <code>setOldClass()</code> lies in registering an S3 class as a “formally defined class”, so that it can be used within the S4 object-oriented programming system. When using it, we may provide the argument <code>S4Class</code>, which will inherit the slots and their default values (prototype) to the registered class.</p>
<p>Let’s build an S4 <code>OrderedFactor</code> on top of the S3 factor in such a way.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb387" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb387-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setOldClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use build-in definition for brevity</span></span>
<span id="cb387-2">OrderedFactor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(</span>
<span id="cb387-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OrderedFactor"</span>,</span>
<span id="cb387-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contains =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factor"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inherit from registered S3 class</span></span>
<span id="cb387-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb387-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb387-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logical"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add logical order slot</span></span>
<span id="cb387-8">  ),</span>
<span id="cb387-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(</span>
<span id="cb387-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(),</span>
<span id="cb387-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">character</span>(),</span>
<span id="cb387-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">logical</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add default value</span></span>
<span id="cb387-13">  )</span>
<span id="cb387-14">)</span></code></pre></div>
</div>
<p>We can now register the (S3) ordered-class, while providing an “S4 template”. We can also use the S4-class to create new object directly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb388" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb388-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setOldClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ordered"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">S4Class =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OrderedFactor"</span>)</span>
<span id="cb388-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">OrderedFactor</span>(</span>
<span id="cb388-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L),</span>
<span id="cb388-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>),</span>
<span id="cb388-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ordered =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb388-6">)</span>
<span id="cb388-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Formal class 'OrderedFactor' [package ".GlobalEnv"] with 4 slots
#&gt;   ..@ .Data   : int [1:3] 1 2 2
#&gt;   ..@ levels  : chr [1:3] "a" "b" "c"
#&gt;   ..@ ordered : logi TRUE
#&gt;   ..@ .S3Class: chr "factor"</code></pre>
</div>
</div>
<p>Notes: while my class <code>Ordered</code> looks similar to the AR Solutions version, it does not include the S3 class:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb390" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb390-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(o)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Formal class 'Ordered' [package ".GlobalEnv"] with 3 slots
#&gt;   ..@ .Data  : int [1:4] 1 2 3 4
#&gt;   ..@ levels : chr [1:4] "a" "b" "c" "d"
#&gt;   ..@ ordered: logi TRUE</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Define a <code>length</code> method for the <code>Person</code> class.</li>
</ol>
<p>Answer: since <code>Person</code> is a vector class, its length is the <code>length()</code> of any of its fields (we use Person2 here due to prevent conflicts with the already defined Person class):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb392" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb392-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setClass</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person2"</span>,</span>
<span id="cb392-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">slots =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb392-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character"</span>,</span>
<span id="cb392-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numeric"</span></span>
<span id="cb392-5">  ),</span>
<span id="cb392-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prototype =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb392-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_character_</span>,</span>
<span id="cb392-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span></span>
<span id="cb392-9">  )</span>
<span id="cb392-10">)</span>
<span id="cb392-11"></span>
<span id="cb392-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setGeneric</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb392-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>()</span>
<span id="cb392-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person2"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>name))</span>
<span id="cb392-15"></span>
<span id="cb392-16">people <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person2"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"John Smith"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Jane Doe"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">age =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>))</span>
<span id="cb392-17">people</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; An object of class "Person2"
#&gt; Slot "name":
#&gt; [1] "John Smith" "Jane Doe"  
#&gt; 
#&gt; Slot "age":
#&gt; [1] NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb394" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb394-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(people)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
</div>
<p>AR Solutions: We keep things simple and will just return <code>"180cm"</code> when the <code>length()</code> method is called on a <code>Person</code> object. The method can be defined either as an S3 or S4 method.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb396" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb396-1">length.Person <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"180cm"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># S3</span></span>
<span id="cb396-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setMethod</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"length"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Person"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"180cm"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># S4</span></span></code></pre></div>
</div>
<hr>
</section>
</section>
<section id="trade-offs" class="level1">
<h1>16 Trade-offs</h1>
<p>You now know about the three most important OOP toolkits available in R. Now that you understand their basic operation and the principles that underlie them, we can start to compare and contrast the systems in order to understand their strengths and weaknesses. This will help you pick the system that is most likely to solve new problems.</p>
<p>Overall, when picking an OO system, I recommend that you default to S3. S3 is simple, and widely used throughout base R and CRAN. While it’s far from perfect, its idiosyncrasies are well understood and there are known approaches to overcome most shortcomings. If you have an existing background in programming you are likely to lean towards R6, because it will feel familiar. I think you should resist this tendency for two reasons. Firstly, if you use R6 it’s very easy to create a non-idiomatic API that will feel very odd to native R users, and will have surprising pain points because of the reference semantics. Secondly, if you stick to R6, you’ll lose out on learning a new way of thinking about OOP that gives you a new set of tools for solving problems.</p>


</section>

 ]]></description>
  <category>exercises</category>
  <category>advanced-r</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-3.html</guid>
  <pubDate>Mon, 15 Aug 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Advanced R (Functional programming)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Functional programming” chapters of <a href="https://adv-r.hadley.nz/index.html">Advanced R</a>, second edition, with comparisons to solutions from <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scales)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://github.com/hadley/adv-r/blob/master/common.R</span></span>
<span id="cb1-8">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-10">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-11">)</span>
<span id="cb1-12"></span>
<span id="cb1-13">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-14">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_mar =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options, envir) {</span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb1-16">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-17">    }</span>
<span id="cb1-18">  }</span>
<span id="cb1-19">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://adv-r.hadley.nz/index.html">Advanced R</a> and <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read Advanced R and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="functionals" class="level1">
<h1>9 Functionals</h1>
<blockquote class="blockquote">
<p>To become significantly more reliable, code must become more transparent. In particular, nested conditions and loops must be viewed with great suspicion. Complicated control flows confuse programmers. Messy code often hides bugs.</p>
<p>— Bjarne Stroustrup</p>
</blockquote>
<p>A <strong>functional</strong> is a function that takes a function as an input and returns a vector as output. Here’s a simple functional: it calls the function provided as input with 1000 random uniform numbers.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">randomise <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>))</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomise</span>(mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.4841598</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomise</span>(mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.5047531</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">randomise</span>(sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 501.2797</code></pre>
</div>
</div>
<p>The chances are that you’ve already used a functional. You might have used for-loop replacements like base R’s <code>lapply()</code>, <code>apply()</code>, and <code>tapply()</code>; or purrr’s <code>map()</code>; or maybe you’ve used a mathematical functional like <code>integrate()</code> or <code>optim()</code>.</p>
<p>A common use of functionals is as an alternative to for loops. For loops have a bad rap in R because many people believe they are slow<sup>1</sup>, but the real downside of for loops is that they’re very flexible: a loop conveys that you’re iterating, but not what should be done with the results. Just as it’s better to use <code>while</code> than <code>repeat</code>, and it’s better to use <code>for</code> than <code>while</code> (Section 5.3.2), it’s better to use a functional than <code>for</code>. Each functional is tailored for a specific task, so when you recognise the functional you immediately know why it’s being used.</p>
<p>If you’re an experienced for loop user, switching to functionals is typically a pattern matching exercise. You look at the for loop and find a functional that matches the basic form. If one doesn’t exist, don’t try and torture an existing functional to fit the form you need. Instead, just leave it as a for loop! (Or once you’ve repeated the same loop two or more times, maybe think about writing your own functional).</p>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">9.2.6 Exercises</h2>
<ol type="1">
<li>Use <code>as_mapper()</code> to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">map_dbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (.x, .f, ..., .progress = FALSE) 
#&gt; {
#&gt;     map_("double", .x, .f, ..., .progress = .progress)
#&gt; }
#&gt; &lt;bytecode: 0x1166072a8&gt;
#&gt; &lt;environment: namespace:purrr&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(mtcars, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(.x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#&gt;   25    3   27   22   22   29   30    2    2    3    6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(.x)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;lambda&gt;
#&gt; function (..., .x = ..1, .y = ..2, . = ..1) 
#&gt; length(unique(.x))
#&gt; attr(,"class")
#&gt; [1] "rlang_lambda_function" "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.x =</span> ..<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.y =</span> ..<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">. =</span> ..<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(.x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(..., .x = ..1, .y = ..2, . = ..1) length(unique(.x))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; UseMethod("mean")
#&gt; &lt;bytecode: 0x105474aa8&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(x) mean(x, na.rm = TRUE)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;lambda&gt;
#&gt; function (..., .x = ..1, .y = ..2, . = ..1) 
#&gt; mean(.x, na.rm = TRUE)
#&gt; attr(,"class")
#&gt; [1] "rlang_lambda_function" "function"</code></pre>
</div>
</div>
<p>Answer: Exploration above. <code>attr_getter()</code> supports extraction of attributes.</p>
<p>AR Solutions: <code>map()</code> offers multiple ways (functions, formulas, and extractor functions) to specify its function argument (<code>.f</code>). Initially, the various inputs have to be transformed into a valid function, which is then applied. The creation of this valid function is the job of <code>as_mapper()</code> and it is called every time <code>map()</code> is used.</p>
<p>Given character, numeric or list input <code>as_mapper()</code> will create an extractor function. Characters select by name, while numeric input selects by positions and a list allows a mix of these two approaches. This extractor interface can be very useful, when working with nested data.</p>
<p>The extractor function is implemented as a call to <code>purrr::pluck()</code>, which accepts a list of accessors (accessors “access” some part of your data object).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent to function(x) x[[1]][[2]]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; pluck_raw(x, list(1, 2), .default = NULL)
#&gt; &lt;environment: 0x1056fa358&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent to function(x) x[["a"]][["b]]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; pluck_raw(x, list("a", "b"), .default = NULL)
#&gt; &lt;environment: 0x105670108&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent to function(x) x[[1]][["b]]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; pluck_raw(x, list(1, "b"), .default = NULL)
#&gt; &lt;environment: 0x1056058e8&gt;</code></pre>
</div>
</div>
<p>Besides mixing positions and names, it is also possible to pass along an accessor function. This is basically an anonymous function that gets information about some aspect of the input data. You are free to define your own accessor functions.</p>
<p>If you need to access certain attributes, the helper <code>attr_getter(y)</code> is already predefined and will create the appropriate accessor function for you.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define custom accessor function</span></span>
<span id="cb28-2">get_class <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr</span>(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>)</span>
<span id="cb28-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pluck</span>(mtcars, get_class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "data.frame"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use attr_getter() as a helper</span></span>
<span id="cb30-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pluck</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attr_getter</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "data.frame"</code></pre>
</div>
</div>
<p>Note: AR Solutions provides good additional insight into <code>as_mapper()</code>.</p>
<hr>
<ol start="2" type="1">
<li><code>map(1:3, ~ runif(2))</code> is a useful pattern for generating random numbers, but <code>map(1:3, runif(2))</code> is not. Why not? Can you explain why it returns the result that it does?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 0.28898204 0.03080936
#&gt; 
#&gt; [[2]]
#&gt; [1] 0.8084078 0.4821147
#&gt; 
#&gt; [[3]]
#&gt; [1] 0.8528816 0.7083845</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 1
#&gt; 
#&gt; [[2]]
#&gt; [1] 2
#&gt; 
#&gt; [[3]]
#&gt; [1] 3</code></pre>
</div>
</div>
<p>Answer: <code>~ runif(2)</code> generates a mapper that returns 2 random values from the uniform distribution, where <code>runif(2)</code> creates a <code>pluck()</code> mapper with 2 random values, which will (nearly) always return <code>NULL</code>, as demonstrated by the code below:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;lambda&gt;
#&gt; function (..., .x = ..1, .y = ..2, . = ..1) 
#&gt; runif(2)
#&gt; attr(,"class")
#&gt; [1] "rlang_lambda_function" "function"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; pluck_raw(x, list(0.604344471124932, 0.0218792946543545), .default = NULL)
#&gt; &lt;environment: 0x10693af08&gt;</code></pre>
</div>
</div>
<p>A more reasonable use of a pluck mapper for <code>1:3</code> is <code>1</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb40-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 1
#&gt; 
#&gt; [[2]]
#&gt; [1] 2
#&gt; 
#&gt; [[3]]
#&gt; [1] 3</code></pre>
</div>
</div>
<p>AR Solutions: The first pattern creates multiple random numbers, because <code>~ runif(2)</code> successfully uses the formula interface. Internally <code>map()</code> applies <code>as_mapper()</code> to this formula, which converts <code>~ runif(2)</code> into an anonymous function. Afterwards <code>runif(2)</code> is applied three times (one time during each iteration), leading to three different pairs of random numbers.</p>
<p>In the second pattern <code>runif(2)</code> is evaluated once, then the results are passed to <code>map()</code>. Consequently <code>as_mapper()</code> creates an extractor function based on the return values from <code>runif(2)</code> (via <code>pluck()</code>). This leads to three <code>NULL</code>s (<code>pluck()</code>’s <code>.default</code> return), because no values corresponding to the index can be found.</p>
<p>Note: AR Solutions provides additional detail, but is otherwise the same.</p>
<hr>
<ol start="3" type="1">
<li><p>Use the appropriate <code>map()</code> function to:</p>
<ol type="a">
<li><p>Compute the standard deviation of every column in a numeric data frame.</p></li>
<li><p>Compute the standard deviation of every numeric column in a mixed data frame. (Hint: you’ll need to do it in two steps.)</p></li>
<li><p>Compute the number of levels for every factor in a data frame.</p></li>
</ol></li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a</span></span>
<span id="cb42-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(mtcars, sd)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;         mpg         cyl        disp          hp        drat          wt 
#&gt;   6.0269481   1.7859216 123.9386938  68.5628685   0.5346787   0.9784574 
#&gt;        qsec          vs          am        gear        carb 
#&gt;   1.7869432   0.5040161   0.4989909   0.7378041   1.6152000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b</span></span>
<span id="cb44-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(iris[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(iris, is.numeric)], sd)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Sepal.Length  Sepal.Width Petal.Length  Petal.Width 
#&gt;    0.8280661    0.4358663    1.7652982    0.7622377</code></pre>
</div>
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># c</span></span>
<span id="cb46-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(warpbreaks, nlevels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  breaks    wool tension 
#&gt;       0       2       3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># c, excluding non-factor columns</span></span>
<span id="cb48-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(warpbreaks[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(warpbreaks, is.factor)], nlevels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    wool tension 
#&gt;       2       3</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: To solve this exercise we take advantage of calling the type stable variants of <code>map()</code>, which give us more concise output, and use <code>map_lgl()</code> to select the columns of the data frame (later you’ll learn about <code>keep()</code>, which simplifies this pattern a little).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(mtcars, sd)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;         mpg         cyl        disp          hp        drat          wt 
#&gt;   6.0269481   1.7859216 123.9386938  68.5628685   0.5346787   0.9784574 
#&gt;        qsec          vs          am        gear        carb 
#&gt;   1.7869432   0.5040161   0.4989909   0.7378041   1.6152000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">penguins_numeric <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(penguins, is.numeric)</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(penguins[penguins_numeric], sd, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    bill_length_mm     bill_depth_mm flipper_length_mm       body_mass_g 
#&gt;         5.4595837         1.9747932        14.0617137       801.9545357 
#&gt;              year 
#&gt;         0.8183559</code></pre>
</div>
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb54-1">penguins_factor <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(penguins, is.factor)</span>
<span id="cb54-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(penguins[penguins_factor], <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(.x))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: length_levels_linter.</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; species  island     sex 
#&gt;       3       3       2</code></pre>
</div>
</div>
<p>Note: my code is more concise, both with selections and use of <code>nlevels()</code>, although using <code>keep()</code> is preferable.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb56-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">keep</span>(warpbreaks, is.factor), nlevels)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    wool tension 
#&gt;       2       3</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>The following code simulates the performance of a t-test for non-normal data. Extract the p-value from each test, then visualise.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb58-1">trials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb58-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(trials, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p.value"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: There are many ways to visualise this data. However, since there are only 100 data points, we choose a dot plot to visualise the distribution. (Unfortunately, <code>{ggplot2}</code>s <code>geom_dotplot()</code> doesn’t compute proper counts as it was created to visualise distribution densities instead of frequencies, so a histogram would be a suitable alternative).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Advanced R Solutions uses different code for trials</span></span>
<span id="cb59-2">trials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t.test</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)))</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb59-5"></span>
<span id="cb59-6">df_trials <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">p_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(trials, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p.value"</span>))</span>
<span id="cb59-7"></span>
<span id="cb59-8">df_trials <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb59-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> p_value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> p_value <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb59-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_dotplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">binwidth =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># geom_histogram() as alternative</span></span>
<span id="cb59-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(</span>
<span id="cb59-12">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb59-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb59-14">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">legend.position =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span></span>
<span id="cb59-15">  )</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-12-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Notes: the code AR Solutions uses for trials, <code>trials &lt;- map(1:100, ~ t.test(rpois(10, 10), rpois(10, 7)))</code>, appears to be correct compared to Advanced R.</p>
<hr>
<ol start="5" type="1">
<li>The following code uses a map nested inside another map to apply a function to every element of a nested list. Why does it fail, and what do you need to do to make it work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb60-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb60-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)),</span>
<span id="cb60-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb60-4">)</span>
<span id="cb60-5"></span>
<span id="cb60-6">triple <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb60-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, map, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">.f =</span> triple))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in map(x, map, .f = triple) : ℹ In index: 1.
#&gt; Caused by error in `.f()`:
#&gt; ! unused argument (function (.x, .f, ..., .progress = FALSE) 
#&gt; {
#&gt;     map_("list", .x, .f, ..., .progress = .progress)
#&gt; })</code></pre>
</div>
</div>
<p>Answer: the call fails since the <code>.f = triple</code> specifies the function for the outer <code>map()</code>, and the <code>map</code> is passed as an additional argument to <code>triple()</code>, which generates the error since <code>triple()</code> only takes a single argument. The solution is to pass triple as an additional argument to the outer <code>map()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb62-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, map, triple)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [[1]][[1]]
#&gt; [1] 3
#&gt; 
#&gt; [[1]][[2]]
#&gt; [1]  9 27
#&gt; 
#&gt; 
#&gt; [[2]]
#&gt; [[2]][[1]]
#&gt; [1]  9 18
#&gt; 
#&gt; [[2]][[2]]
#&gt; [1] 21
#&gt; 
#&gt; [[2]][[3]]
#&gt; [1] 12 21 18</code></pre>
</div>
</div>
<p>AR Solutions: This function call fails, because <code>triple()</code> is specified as the <code>.f</code> argument and consequently belongs to the outer <code>map()</code>. The unnamed argument <code>map</code> is treated as an argument of <code>triple()</code>, which causes the error.</p>
<p>There are a number of ways we could resolve the problem. However, there is not much to choose between them for this simple example, although it is good to know your options for more complicated cases.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Don't name the argument</span></span>
<span id="cb64-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, map, triple)</span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use magrittr-style anonymous function</span></span>
<span id="cb64-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(triple))</span>
<span id="cb64-6"></span>
<span id="cb64-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use purrr-style anonymous function</span></span>
<span id="cb64-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(x, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(.x, triple))</span></code></pre></div>
</div>
<p>Note: I don’t like the magrittr-style anonymous function option. The others are good.</p>
<hr>
<ol start="6" type="1">
<li>Use <code>map()</code> to fit linear models to the <code>mtcars</code> dataset using the formulas stored in this list:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1">formulas <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb65-2">  mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp,</span>
<span id="cb65-3">  mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">I</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> disp),</span>
<span id="cb65-4">  mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wt,</span>
<span id="cb65-5">  mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">I</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> disp) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> wt</span>
<span id="cb65-6">)</span></code></pre></div>
</div>
<p>Answer: the following code works, but doesn’t display the text of the formula in the <code>Call:</code></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb66-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(formulas, lm, mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; 
#&gt; Call:
#&gt; .f(formula = .x[[i]], data = ..1)
#&gt; 
#&gt; Coefficients:
#&gt; (Intercept)         disp  
#&gt;    29.59985     -0.04122  
#&gt; 
#&gt; 
#&gt; [[2]]
#&gt; 
#&gt; Call:
#&gt; .f(formula = .x[[i]], data = ..1)
#&gt; 
#&gt; Coefficients:
#&gt; (Intercept)    I(1/disp)  
#&gt;       10.75      1557.67  
#&gt; 
#&gt; 
#&gt; [[3]]
#&gt; 
#&gt; Call:
#&gt; .f(formula = .x[[i]], data = ..1)
#&gt; 
#&gt; Coefficients:
#&gt; (Intercept)         disp           wt  
#&gt;    34.96055     -0.01772     -3.35083  
#&gt; 
#&gt; 
#&gt; [[4]]
#&gt; 
#&gt; Call:
#&gt; .f(formula = .x[[i]], data = ..1)
#&gt; 
#&gt; Coefficients:
#&gt; (Intercept)    I(1/disp)           wt  
#&gt;      19.024     1142.560       -1.798</code></pre>
</div>
</div>
<p>AR Solutions: The data (<code>mtcars</code>) is constant for all these models and so we iterate over the <code>formulas</code> provided. As the formula is the first argument of <code>lm()</code>, we don’t need to specify it explicitly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb68-1">models <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(formulas, lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span></code></pre></div>
</div>
<p>Note: AR Solutions specifies <code>data = mtcars</code> but is otherwise the same.</p>
<hr>
<ol start="7" type="1">
<li>Fit the model <code>mpg ~ disp</code> to each of the bootstrap replicates of <code>mtcars</code> in the list below, then extract the <img src="https://latex.codecogs.com/png.latex?R%5E2"> of the model fit (Hint: you can compute the <img src="https://latex.codecogs.com/png.latex?R%5E2"> with <code>summary()</code>.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1">bootstrap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df) {</span>
<span id="cb69-2">  df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), , drop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span>
<span id="cb69-3">}</span>
<span id="cb69-4"></span>
<span id="cb69-5">bootstraps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bootstrap</span>(mtcars))</span>
<span id="cb69-6"></span>
<span id="cb69-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(bootstraps, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp, .x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] 0.7453424 0.6263653 0.6717042 0.6913632 0.7044988 0.7600284 0.7257801
#&gt;  [8] 0.7904557 0.7857444 0.6363400</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: To accomplish this task, we take advantage of the “list in, list out”-functionality of <code>map()</code>. This allows us to chain multiple transformations together. We start by fitting the models. We then calculate the summaries and extract the <img src="https://latex.codecogs.com/png.latex?R%5E2"> values. For the last call we use <code>map_dbl()</code>, which provides convenient output.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1">bootstraps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb71-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r.squared"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] 0.7453424 0.6263653 0.6717042 0.6913632 0.7044988 0.7600284 0.7257801
#&gt;  [8] 0.7904557 0.7857444 0.6363400</code></pre>
</div>
</div>
<p>Note: while AR Solutions is arguably <em>slightly</em> more readable, my code should be faster:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>({</span>
<span id="cb73-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(bootstraps, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp, .x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared)</span>
<span id="cb73-3">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 { map_dbl(bootstraps, ~summary(lm(… 1.99ms 2.05ms      482.    63.7KB     55.7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>({</span>
<span id="cb75-2">  bootstraps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> disp, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> .x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(summary) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb75-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r.squared"</span>)</span>
<span id="cb75-6">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 { bootstraps %&gt;% map(~lm(mpg ~ dis… 1.98ms 2.04ms      484.    63.7KB     61.4</code></pre>
</div>
</div>
<p>It is actually slightly slower! AR Solutions wins!</p>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">9.4.6 Exercises</h2>
<ol type="1">
<li>Explain the results of <code>modify(mtcars, 1)</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>(mtcars, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    mpg cyl disp  hp drat   wt  qsec vs am gear carb
#&gt; 1   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 2   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 3   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 4   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 5   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 6   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 7   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 8   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 9   21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 10  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 11  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 12  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 13  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 14  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 15  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 16  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 17  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 18  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 19  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 20  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 21  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 22  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 23  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 24  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 25  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 26  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 27  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 28  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 29  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 30  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 31  21   6  160 110  3.9 2.62 16.46  0  1    4    4
#&gt; 32  21   6  160 110  3.9 2.62 16.46  0  1    4    4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_mapper</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; pluck_raw(x, list(1), .default = NULL)
#&gt; &lt;environment: 0x10708b3f8&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mtcars, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;           mpg cyl disp  hp drat   wt  qsec vs am gear carb
#&gt; Mazda RX4  21   6  160 110  3.9 2.62 16.46  0  1    4    4</code></pre>
</div>
</div>
<p>Answer: <code>modify(mtcars, 1)</code> creates a mapper that plucks the first element of each column of <code>mtcars</code> and writes that value to every row.</p>
<p>AR Solutions: <code>modify()</code> is based on <code>map()</code>, and in this case, the extractor interface will be used. It extracts the first element of each column in <code>mtcars</code>. <code>modify()</code> always returns the same structure as its input: in this case it forces the first row to be recycled 32 times. (Internally <code>modify()</code> uses <code>.x[] &lt;- map(.x, .f, ...)</code> for assignment.)</p>
<p>Notes: this code makes the recycling clear:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(mtcars, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
#&gt;  21.00   6.00 160.00 110.00   3.90   2.62  16.46   0.00   1.00   4.00   4.00</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Rewrite the following code to use <code>iwalk()</code> instead of <code>walk2()</code>. What are the advantages and disadvantages?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1">cyls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb85-2">paths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl-"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cyls), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>))</span>
<span id="cb85-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk2</span>(cyls, paths, write.csv)</span></code></pre></div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb86-1">temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb86-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(temp)</span>
<span id="cb86-3"></span>
<span id="cb86-4">cyls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb86-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iwalk</span>(cyls, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(.x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl-"</span>, .y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>))))</span>
<span id="cb86-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span>(temp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "cyl-4.csv" "cyl-6.csv" "cyl-8.csv"</code></pre>
</div>
</div>
<p>The main advantage of using <code>iwalk()</code> is that it will use <code>seq_along()</code> if <code>x</code> does not have names. In this case, x has names, and the resulting code is a bit harder to understand, and requires a formula (or function).</p>
<p>AR Solutions: <code>iwalk()</code> allows us to use a single variable, storing the output path in the names.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb88-1">temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb88-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(temp)</span>
<span id="cb88-3">cyls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb88-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cyls) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl-"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cyls), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>))</span>
<span id="cb88-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iwalk</span>(cyls, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(.x, .y))</span></code></pre></div>
</div>
<p>We could do this in a single pipe by taking advantage of <code>set_names()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1">mtcars <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb89-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">split</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb89-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_names</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl-"</span>, .x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb89-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">iwalk</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.csv</span>(.x, .y))</span></code></pre></div>
</div>
<p>Notes: the AR Solutions use of names and the pipe is clever.</p>
<hr>
<ol start="3" type="1">
<li>Explain how the following code transforms a data frame using functions stored in a list.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb90-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exists</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars"</span>)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning in rm(mtcars): object 'mtcars' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb92-1">mtcars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
#&gt; Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
#&gt; Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
#&gt; AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
#&gt; Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
#&gt; Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
#&gt; Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
#&gt; Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
#&gt; Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
#&gt; Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb94-1">trans <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb94-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">disp =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0163871</span>,</span>
<span id="cb94-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">am =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"auto"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"manual"</span>))</span>
<span id="cb94-4">)</span>
<span id="cb94-5"></span>
<span id="cb94-6">nm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(trans)</span>
<span id="cb94-7">mtcars[nm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(trans, mtcars[nm], <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, var) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(var))</span>
<span id="cb94-8"></span>
<span id="cb94-9">mtcars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                      mpg cyl     disp  hp drat    wt  qsec vs     am gear carb
#&gt; Mazda RX4           21.0   6 2.621936 110 3.90 2.620 16.46  0 manual    4    4
#&gt; Mazda RX4 Wag       21.0   6 2.621936 110 3.90 2.875 17.02  0 manual    4    4
#&gt; Datsun 710          22.8   4 1.769807  93 3.85 2.320 18.61  1 manual    4    1
#&gt; Hornet 4 Drive      21.4   6 4.227872 110 3.08 3.215 19.44  1   auto    3    1
#&gt; Hornet Sportabout   18.7   8 5.899356 175 3.15 3.440 17.02  0   auto    3    2
#&gt; Valiant             18.1   6 3.687098 105 2.76 3.460 20.22  1   auto    3    1
#&gt; Duster 360          14.3   8 5.899356 245 3.21 3.570 15.84  0   auto    3    4
#&gt; Merc 240D           24.4   4 2.403988  62 3.69 3.190 20.00  1   auto    4    2
#&gt; Merc 230            22.8   4 2.307304  95 3.92 3.150 22.90  1   auto    4    2
#&gt; Merc 280            19.2   6 2.746478 123 3.92 3.440 18.30  1   auto    4    4
#&gt; Merc 280C           17.8   6 2.746478 123 3.92 3.440 18.90  1   auto    4    4
#&gt; Merc 450SE          16.4   8 4.519562 180 3.07 4.070 17.40  0   auto    3    3
#&gt; Merc 450SL          17.3   8 4.519562 180 3.07 3.730 17.60  0   auto    3    3
#&gt; Merc 450SLC         15.2   8 4.519562 180 3.07 3.780 18.00  0   auto    3    3
#&gt; Cadillac Fleetwood  10.4   8 7.734711 205 2.93 5.250 17.98  0   auto    3    4
#&gt; Lincoln Continental 10.4   8 7.538066 215 3.00 5.424 17.82  0   auto    3    4
#&gt; Chrysler Imperial   14.7   8 7.210324 230 3.23 5.345 17.42  0   auto    3    4
#&gt; Fiat 128            32.4   4 1.289665  66 4.08 2.200 19.47  1 manual    4    1
#&gt; Honda Civic         30.4   4 1.240503  52 4.93 1.615 18.52  1 manual    4    2
#&gt; Toyota Corolla      33.9   4 1.165123  65 4.22 1.835 19.90  1 manual    4    1
#&gt; Toyota Corona       21.5   4 1.968091  97 3.70 2.465 20.01  1   auto    3    1
#&gt; Dodge Challenger    15.5   8 5.211098 150 2.76 3.520 16.87  0   auto    3    2
#&gt; AMC Javelin         15.2   8 4.981678 150 3.15 3.435 17.30  0   auto    3    2
#&gt; Camaro Z28          13.3   8 5.735485 245 3.73 3.840 15.41  0   auto    3    4
#&gt; Pontiac Firebird    19.2   8 6.554840 175 3.08 3.845 17.05  0   auto    3    2
#&gt; Fiat X1-9           27.3   4 1.294581  66 4.08 1.935 18.90  1 manual    4    1
#&gt; Porsche 914-2       26.0   4 1.971368  91 4.43 2.140 16.70  0 manual    5    2
#&gt; Lotus Europa        30.4   4 1.558413 113 3.77 1.513 16.90  1 manual    5    2
#&gt; Ford Pantera L      15.8   8 5.751872 264 4.22 3.170 14.50  0 manual    5    4
#&gt; Ferrari Dino        19.7   6 2.376130 175 3.62 2.770 15.50  0 manual    5    6
#&gt; Maserati Bora       15.0   8 4.932517 335 3.54 3.570 14.60  0 manual    5    8
#&gt; Volvo 142E          21.4   4 1.982839 109 4.11 2.780 18.60  1 manual    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb96-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(mtcars)</span></code></pre></div>
</div>
<p>Compare and contrast the <code>map2()</code> approach to this <code>map()</code> approach:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1">mtcars[nm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(nm, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> trans[[.x]](mtcars[[.x]]))</span></code></pre></div>
</div>
<p>Answer: the <code>map2()</code> code applies the anonymous functions to the corresponding column in <code>mtcars</code> based on their name in the list:</p>
<ul>
<li><code>mtcars[nm]</code> is equivalent to <code>mtcars[c("disp", "am")]</code>, so the code is modifying those two columns</li>
<li>the mapping function, <code>function(f, var) f(var)</code> is run as <code>f(mtcars[["disp"]])</code> and <code>f(mtcars[["am"]])</code>, with the corresponding function in <code>trans</code> as <code>f</code>, since <code>trans</code> and <code>mtcars[nm]</code> are passed as parameters to the function</li>
</ul>
<p>The equivalent <code>map()</code> approach isn’t as clean: it’s harder to understand what <code>map()</code> is doing.</p>
<p>AR Solutions: In the first approach</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb98-1">mtcars[nm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(trans, mtcars[nm], <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, var) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(var))</span></code></pre></div>
</div>
<p>the list of the 2 functions (<code>trans</code>) and the 2 appropriately selected data frame columns (<code>mtcars[nm]</code>) are supplied to <code>map2()</code>. <code>map2()</code> creates an anonymous function (<code>f(var)</code>) which applies the functions to the variables when <code>map2()</code> iterates over their (similar) indices. On the left-hand side, the respective 2 elements of <code>mtcars</code> are being replaced by their new transformations.</p>
<p>The <code>map()</code> variant</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1">mtcars[nm] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(nm, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> trans[[.x]](mtcars[[.x]]))</span></code></pre></div>
</div>
<p>does basically the same. However, it directly iterates over the names (<code>nm</code>) of the transformations. Therefore, the data frame columns are selected during the iteration.</p>
<p>Besides the iteration pattern, the approaches differ in the possibilities for appropriate argument naming in the <code>.f</code> argument. In the <code>map2()</code> approach we iterate over the elements of <code>x</code> and <code>y</code>. Therefore, it is possible to choose appropriate placeholders like <code>f</code> and <code>var</code>. This makes the anonymous function more expressive at the cost of making it longer. We think using the formula interface in this way is preferable compared to the rather cryptic <code>mtcars[nm] &lt;- map2(trans, mtcars[nm], ~ .x(.y))</code>.</p>
<p>In the <code>map()</code> approach we map over the variable names. It is therefore not possible to introduce placeholders for the function and variable names. The formula syntax together with the <code>.x</code> pronoun is pretty compact. The object names and the brackets clearly indicate the application of transformations to specific columns of <code>mtcars</code>. In this case the iteration over the variable names comes in handy, as it highlights the importance of matching between <code>trans</code> and <code>mtcars</code> element names. Together with the replacement form on the left-hand side, this line is relatively easy to inspect.</p>
<p>To summarise, in situations where <code>map()</code> and <code>map2()</code> provide solutions for an iteration problem, several points may be considered before deciding for one or the other approach.</p>
<hr>
<ol start="4" type="1">
<li>What does <code>write.csv()</code> return, i.e.&nbsp;what happens if you use it with <code>map2()</code> instead of <code>walk2()</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb100-1">paths <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(temp, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl-"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(cyls), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".csv"</span>))</span>
<span id="cb100-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map2</span>(cyls, paths, write.csv)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $`4`
#&gt; NULL
#&gt; 
#&gt; $`6`
#&gt; NULL
#&gt; 
#&gt; $`8`
#&gt; NULL</code></pre>
</div>
</div>
<p>Answer: <code>write.csv()</code> is designed to return <code>NULL</code>, invisibly. While <code>walk2()</code> hides the <code>NULL</code> return values, <code>map2()</code> does not.</p>
<p>AR Solutions: <code>write.csv()</code> returns <code>NULL</code>. As we call the function for its side effect (creating a CSV file), <code>walk2()</code> would be appropriate here. Otherwise, we receive a rather uninformative list of <code>NULL</code>s.</p>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">9.6.3 Exercises</h2>
<ol type="1">
<li>Why isn’t <code>is.na()</code> a predicate function? What base R function is closest to being a predicate version of <code>is.na()</code>?</li>
</ol>
<p>Answer: <code>is.na(x)</code> returns <code>logical(0)</code> when <code>x</code> is <code>NULL</code>, which violates the rule that predicate functions only return <code>TRUE</code> or <code>FALSE</code>. <code>anyNA(x, recursive = FALSE)</code> appears to be a predicate version of <code>is.na()</code>.</p>
<p>AR Solutions: <code>is.na()</code> is not a predicate function, because it returns a logical <em>vector</em> the same length as the input, not a single <code>TRUE</code> or <code>FALSE</code>.</p>
<p><code>anyNA()</code> is the closest equivalent because it always returns a single <code>TRUE</code> or <code>FALSE</code> if there are any missing values present. You could also imagine an <code>allNA()</code> which would return <code>TRUE</code> if all values were missing, but that’s considerably less useful so base R does not provide it.</p>
<hr>
<ol start="2" type="1">
<li><code>simple_reduce()</code> has a problem when <code>x</code> is length 0 or length 1. Describe the source of the problem and how you might go about fixing it.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">simple_reduce <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb102-2">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb102-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))) {</span>
<span id="cb102-4">    out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(out, x[[i]])</span>
<span id="cb102-5">  }</span>
<span id="cb102-6">  out</span>
<span id="cb102-7">}</span></code></pre></div>
</div>
<p>Answer: using <code>seq()</code> results in a backwards count when <code>x</code> is length 0 or 1.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2 1 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb105-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2 1</code></pre>
</div>
</div>
<p>The fix is to check the length of <code>x</code> and return itself when length is 0 and throw an error when length is 1, as <code>reduce()</code> does.</p>
<p>AR Solutions: The loop inside <code>simple_reduce()</code> always starts with the index 2, and <code>seq()</code> can count both up <em>and</em> down:</p>
<p>Therefore, subsetting length-0 and length-1 vectors via <code>[[</code> will lead to a <em>subscript out of bounds</em> error. To avoid this, we allow <code>simple_reduce()</code> to return before the for loop is started and include a default argument for 0-length vectors.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb107-1">simple_reduce <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f, default) {</span>
<span id="cb107-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L) {</span>
<span id="cb107-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(default)</span>
<span id="cb107-4">  }</span>
<span id="cb107-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) {</span>
<span id="cb107-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L]])</span>
<span id="cb107-7">  }</span>
<span id="cb107-8"></span>
<span id="cb107-9">  out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb107-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x))) {</span>
<span id="cb107-11">    out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(out, x[[i]])</span>
<span id="cb107-12">  }</span>
<span id="cb107-13"></span>
<span id="cb107-14">  out</span>
<span id="cb107-15">}</span></code></pre></div>
</div>
<p>Our new <code>simple_reduce()</code> now works as intended:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simple_reduce</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in simple_reduce(integer(0), `+`) : 
#&gt;   argument "default" is missing, with no default</code></pre>
</div>
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simple_reduce</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">default =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simple_reduce</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simple_reduce</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Implement the <code>span()</code> function from Haskell: given a list <code>x</code> and a predicate function <code>f</code>, <code>span(x, f)</code> returns the location of the longest sequential run of elements where the predicate is true. (Hint: you might find <code>rle()</code> helpful.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1">test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">39</span>))</span>
<span id="cb116-2">test2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>]), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span>
<span id="cb116-3"></span>
<span id="cb116-4">span <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb116-5">  runs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rle</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(x, f))</span>
<span id="cb116-6">  max_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> max_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb116-7">  index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb116-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)) {</span>
<span id="cb116-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths[i] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> max_true) {</span>
<span id="cb116-10">      max_true <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths[i]</span>
<span id="cb116-11">      max_index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> index</span>
<span id="cb116-12">    }</span>
<span id="cb116-13">    index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> index <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> runs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths[i]</span>
<span id="cb116-14">  }</span>
<span id="cb116-15">  max_index</span>
<span id="cb116-16">}</span>
<span id="cb116-17"></span>
<span id="cb116-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(test, is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 22</code></pre>
</div>
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(test2, is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 47</code></pre>
</div>
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb124-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), is.numeric)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: Our <code>span_r()</code> function returns the indices of the (first occurring) longest sequential run of elements where the predicate is true. If the predicate is never true, the longest run has length 0, in which case we return <code>integer(0)</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb126-1">span_r <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb126-2">  idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_lgl</span>(x, <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(.x)))</span>
<span id="cb126-3">  rle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rle</span>(idx)</span>
<span id="cb126-4"></span>
<span id="cb126-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the predicate is never true</span></span>
<span id="cb126-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">any</span>(rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)) {</span>
<span id="cb126-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">integer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb126-8">  }</span>
<span id="cb126-9"></span>
<span id="cb126-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the length of the longest sequence of true values</span></span>
<span id="cb126-11">  longest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths[rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values])</span>
<span id="cb126-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the position of the (first) longest run in rle</span></span>
<span id="cb126-13">  longest_idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> longest)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb126-14"></span>
<span id="cb126-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add up all lengths in rle before the longest run</span></span>
<span id="cb126-16">  ind_before_longest <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(rle<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>lengths[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(longest_idx <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)])</span>
<span id="cb126-17"></span>
<span id="cb126-18">  out_start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind_before_longest <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L</span>
<span id="cb126-19">  out_end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> ind_before_longest <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> longest</span>
<span id="cb126-20">  out_start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>out_end</span>
<span id="cb126-21">}</span>
<span id="cb126-22"></span>
<span id="cb126-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it works</span></span>
<span id="cb126-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span_r</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), is.na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; integer(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb128-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span_r</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), is.na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb130-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span_r</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), is.na)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3 4 5</code></pre>
</div>
</div>
<p>Notes: AR Solutions shows how to find the index of the longest sequence using <code>which()</code>, which is new to me, and returns more information by returning indexes of the entire span. The AR Solutions approach is also significantly faster (which I did not expect).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb132-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span_r</span>(test2, is.numeric))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                     min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 span_r(test2, is.numeric)   51.2µs   52.9µs    18285.    4.01KB     65.1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb134-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">span</span>(test2, is.numeric))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                   min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;              &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 span(test2, is.numeric)   68.7µs   71.4µs    13697.    4.01KB     20.8</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>Implement <code>arg_max()</code>. It should take a function and a vector of inputs, and return the elements of the input where the function returns the highest value. For example, <code>arg_max(-10:5, function(x) x ^ 2)</code> should return -10. <code>arg_max(-5:5, function(x) x ^ 2)</code> should return <code>c(-5, 5)</code>. Also implement the matching <code>arg_min()</code> function.</li>
</ol>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb136-1">arg_max <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb136-2">  val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, f)</span>
<span id="cb136-3">  val_max <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(val)</span>
<span id="cb136-4">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val_max)]</span>
<span id="cb136-5">}</span>
<span id="cb136-6"></span>
<span id="cb136-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_max</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb138-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_max</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -5  5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb140-1">arg_min <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb140-2">  val <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, f)</span>
<span id="cb140-3">  val_min <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(val)</span>
<span id="cb140-4">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span>(val <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> val_min)]</span>
<span id="cb140-5">}</span>
<span id="cb140-6"></span>
<span id="cb140-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_min</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -1  1</code></pre>
</div>
</div>
<p>AR Solutions: Both functions take a vector of inputs and a function as an argument. The function output is then used to subset the input accordingly.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1">arg_max <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb144-2">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, f)</span>
<span id="cb144-3">  x[y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(y)]</span>
<span id="cb144-4">}</span>
<span id="cb144-5"></span>
<span id="cb144-6">arg_min <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, f) {</span>
<span id="cb144-7">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(x, f)</span>
<span id="cb144-8">  x[y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(y)]</span>
<span id="cb144-9">}</span>
<span id="cb144-10"></span>
<span id="cb144-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_max</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] -10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arg_min</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0</code></pre>
</div>
</div>
<p>Notes: using <code>which()</code> is unnecessary, AR Solutions is a better approach.</p>
<hr>
<ol start="5" type="1">
<li>The function below scales a vector so it falls in the range [0, 1]. How would you apply it to every column of a data frame? How would you apply it to every numeric column in a data frame?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1">scale01 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb148-2">  rng <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb148-3">  (x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rng[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (rng[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> rng[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb148-4">}</span></code></pre></div>
</div>
<p>Answer: code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb149-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># every column</span></span>
<span id="cb149-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>(mtcars, scale01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;          mpg cyl       disp         hp       drat         wt       qsec vs am
#&gt; 1  0.4510638 0.5 0.22175106 0.20494700 0.52534562 0.28304781 0.23333333  0  1
#&gt; 2  0.4510638 0.5 0.22175106 0.20494700 0.52534562 0.34824853 0.30000000  0  1
#&gt; 3  0.5276596 0.0 0.09204290 0.14487633 0.50230415 0.20634109 0.48928571  1  1
#&gt; 4  0.4680851 0.5 0.46620105 0.20494700 0.14746544 0.43518282 0.58809524  1  0
#&gt; 5  0.3531915 1.0 0.72062859 0.43462898 0.17972350 0.49271286 0.30000000  0  0
#&gt; 6  0.3276596 0.5 0.38388626 0.18727915 0.00000000 0.49782664 0.68095238  1  0
#&gt; 7  0.1659574 1.0 0.72062859 0.68197880 0.20737327 0.52595244 0.15952381  0  0
#&gt; 8  0.5957447 0.0 0.18857570 0.03533569 0.42857143 0.42879059 0.65476190  1  0
#&gt; 9  0.5276596 0.0 0.17385882 0.15194346 0.53456221 0.41856303 1.00000000  1  0
#&gt; 10 0.3744681 0.5 0.24070841 0.25088339 0.53456221 0.49271286 0.45238095  1  0
#&gt; 11 0.3148936 0.5 0.24070841 0.25088339 0.53456221 0.49271286 0.52380952  1  0
#&gt; 12 0.2553191 1.0 0.51060115 0.45229682 0.14285714 0.65379698 0.34523810  0  0
#&gt; 13 0.2936170 1.0 0.51060115 0.45229682 0.14285714 0.56686269 0.36904762  0  0
#&gt; 14 0.2042553 1.0 0.51060115 0.45229682 0.14285714 0.57964715 0.41666667  0  0
#&gt; 15 0.0000000 1.0 1.00000000 0.54063604 0.07834101 0.95551010 0.41428571  0  0
#&gt; 16 0.0000000 1.0 0.97006735 0.57597173 0.11059908 1.00000000 0.39523810  0  0
#&gt; 17 0.1829787 1.0 0.92017960 0.62897527 0.21658986 0.97980056 0.34761905  0  0
#&gt; 18 0.9361702 0.0 0.01895735 0.04946996 0.60829493 0.17565840 0.59166667  1  1
#&gt; 19 0.8510638 0.0 0.01147418 0.00000000 1.00000000 0.02608029 0.47857143  1  1
#&gt; 20 1.0000000 0.0 0.00000000 0.04593640 0.67281106 0.08233188 0.64285714  1  1
#&gt; 21 0.4723404 0.0 0.12222499 0.15901060 0.43317972 0.24341601 0.65595238  1  0
#&gt; 22 0.2170213 1.0 0.61586431 0.34628975 0.00000000 0.51316799 0.28214286  0  0
#&gt; 23 0.2042553 1.0 0.58094288 0.34628975 0.17972350 0.49143442 0.33333333  0  0
#&gt; 24 0.1234043 1.0 0.69568471 0.68197880 0.44700461 0.59498849 0.10833333  0  0
#&gt; 25 0.3744681 1.0 0.82040409 0.43462898 0.14746544 0.59626694 0.30357143  0  0
#&gt; 26 0.7191489 0.0 0.01970566 0.04946996 0.60829493 0.10790079 0.52380952  1  1
#&gt; 27 0.6638298 0.0 0.12272387 0.13780919 0.76958525 0.16031705 0.26190476  0  1
#&gt; 28 0.8510638 0.0 0.05986530 0.21554770 0.46543779 0.00000000 0.28571429  1  1
#&gt; 29 0.2297872 1.0 0.69817910 0.74911661 0.67281106 0.42367681 0.00000000  0  1
#&gt; 30 0.3957447 0.5 0.18433525 0.43462898 0.39631336 0.32140118 0.11904762  0  1
#&gt; 31 0.1957447 1.0 0.57345972 1.00000000 0.35944700 0.52595244 0.01190476  0  1
#&gt; 32 0.4680851 0.0 0.12446994 0.20141343 0.62211982 0.32395807 0.48809524  1  1
#&gt;    gear      carb
#&gt; 1   0.5 0.4285714
#&gt; 2   0.5 0.4285714
#&gt; 3   0.5 0.0000000
#&gt; 4   0.0 0.0000000
#&gt; 5   0.0 0.1428571
#&gt; 6   0.0 0.0000000
#&gt; 7   0.0 0.4285714
#&gt; 8   0.5 0.1428571
#&gt; 9   0.5 0.1428571
#&gt; 10  0.5 0.4285714
#&gt; 11  0.5 0.4285714
#&gt; 12  0.0 0.2857143
#&gt; 13  0.0 0.2857143
#&gt; 14  0.0 0.2857143
#&gt; 15  0.0 0.4285714
#&gt; 16  0.0 0.4285714
#&gt; 17  0.0 0.4285714
#&gt; 18  0.5 0.0000000
#&gt; 19  0.5 0.1428571
#&gt; 20  0.5 0.0000000
#&gt; 21  0.0 0.0000000
#&gt; 22  0.0 0.1428571
#&gt; 23  0.0 0.1428571
#&gt; 24  0.0 0.4285714
#&gt; 25  0.0 0.1428571
#&gt; 26  0.5 0.0000000
#&gt; 27  1.0 0.1428571
#&gt; 28  1.0 0.1428571
#&gt; 29  1.0 0.4285714
#&gt; 30  1.0 0.7142857
#&gt; 31  1.0 1.0000000
#&gt; 32  0.5 0.1428571</code></pre>
</div>
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb151-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># every numeric column</span></span>
<span id="cb151-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify_if</span>(iris, is.numeric, scale01)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
#&gt; 1     0.22222222  0.62500000   0.06779661  0.04166667     setosa
#&gt; 2     0.16666667  0.41666667   0.06779661  0.04166667     setosa
#&gt; 3     0.11111111  0.50000000   0.05084746  0.04166667     setosa
#&gt; 4     0.08333333  0.45833333   0.08474576  0.04166667     setosa
#&gt; 5     0.19444444  0.66666667   0.06779661  0.04166667     setosa
#&gt; 6     0.30555556  0.79166667   0.11864407  0.12500000     setosa
#&gt; 7     0.08333333  0.58333333   0.06779661  0.08333333     setosa
#&gt; 8     0.19444444  0.58333333   0.08474576  0.04166667     setosa
#&gt; 9     0.02777778  0.37500000   0.06779661  0.04166667     setosa
#&gt; 10    0.16666667  0.45833333   0.08474576  0.00000000     setosa
#&gt; 11    0.30555556  0.70833333   0.08474576  0.04166667     setosa
#&gt; 12    0.13888889  0.58333333   0.10169492  0.04166667     setosa
#&gt; 13    0.13888889  0.41666667   0.06779661  0.00000000     setosa
#&gt; 14    0.00000000  0.41666667   0.01694915  0.00000000     setosa
#&gt; 15    0.41666667  0.83333333   0.03389831  0.04166667     setosa
#&gt; 16    0.38888889  1.00000000   0.08474576  0.12500000     setosa
#&gt; 17    0.30555556  0.79166667   0.05084746  0.12500000     setosa
#&gt; 18    0.22222222  0.62500000   0.06779661  0.08333333     setosa
#&gt; 19    0.38888889  0.75000000   0.11864407  0.08333333     setosa
#&gt; 20    0.22222222  0.75000000   0.08474576  0.08333333     setosa
#&gt; 21    0.30555556  0.58333333   0.11864407  0.04166667     setosa
#&gt; 22    0.22222222  0.70833333   0.08474576  0.12500000     setosa
#&gt; 23    0.08333333  0.66666667   0.00000000  0.04166667     setosa
#&gt; 24    0.22222222  0.54166667   0.11864407  0.16666667     setosa
#&gt; 25    0.13888889  0.58333333   0.15254237  0.04166667     setosa
#&gt; 26    0.19444444  0.41666667   0.10169492  0.04166667     setosa
#&gt; 27    0.19444444  0.58333333   0.10169492  0.12500000     setosa
#&gt; 28    0.25000000  0.62500000   0.08474576  0.04166667     setosa
#&gt; 29    0.25000000  0.58333333   0.06779661  0.04166667     setosa
#&gt; 30    0.11111111  0.50000000   0.10169492  0.04166667     setosa
#&gt; 31    0.13888889  0.45833333   0.10169492  0.04166667     setosa
#&gt; 32    0.30555556  0.58333333   0.08474576  0.12500000     setosa
#&gt; 33    0.25000000  0.87500000   0.08474576  0.00000000     setosa
#&gt; 34    0.33333333  0.91666667   0.06779661  0.04166667     setosa
#&gt; 35    0.16666667  0.45833333   0.08474576  0.04166667     setosa
#&gt; 36    0.19444444  0.50000000   0.03389831  0.04166667     setosa
#&gt; 37    0.33333333  0.62500000   0.05084746  0.04166667     setosa
#&gt; 38    0.16666667  0.66666667   0.06779661  0.00000000     setosa
#&gt; 39    0.02777778  0.41666667   0.05084746  0.04166667     setosa
#&gt; 40    0.22222222  0.58333333   0.08474576  0.04166667     setosa
#&gt; 41    0.19444444  0.62500000   0.05084746  0.08333333     setosa
#&gt; 42    0.05555556  0.12500000   0.05084746  0.08333333     setosa
#&gt; 43    0.02777778  0.50000000   0.05084746  0.04166667     setosa
#&gt; 44    0.19444444  0.62500000   0.10169492  0.20833333     setosa
#&gt; 45    0.22222222  0.75000000   0.15254237  0.12500000     setosa
#&gt; 46    0.13888889  0.41666667   0.06779661  0.08333333     setosa
#&gt; 47    0.22222222  0.75000000   0.10169492  0.04166667     setosa
#&gt; 48    0.08333333  0.50000000   0.06779661  0.04166667     setosa
#&gt; 49    0.27777778  0.70833333   0.08474576  0.04166667     setosa
#&gt; 50    0.19444444  0.54166667   0.06779661  0.04166667     setosa
#&gt; 51    0.75000000  0.50000000   0.62711864  0.54166667 versicolor
#&gt; 52    0.58333333  0.50000000   0.59322034  0.58333333 versicolor
#&gt; 53    0.72222222  0.45833333   0.66101695  0.58333333 versicolor
#&gt; 54    0.33333333  0.12500000   0.50847458  0.50000000 versicolor
#&gt; 55    0.61111111  0.33333333   0.61016949  0.58333333 versicolor
#&gt; 56    0.38888889  0.33333333   0.59322034  0.50000000 versicolor
#&gt; 57    0.55555556  0.54166667   0.62711864  0.62500000 versicolor
#&gt; 58    0.16666667  0.16666667   0.38983051  0.37500000 versicolor
#&gt; 59    0.63888889  0.37500000   0.61016949  0.50000000 versicolor
#&gt; 60    0.25000000  0.29166667   0.49152542  0.54166667 versicolor
#&gt; 61    0.19444444  0.00000000   0.42372881  0.37500000 versicolor
#&gt; 62    0.44444444  0.41666667   0.54237288  0.58333333 versicolor
#&gt; 63    0.47222222  0.08333333   0.50847458  0.37500000 versicolor
#&gt; 64    0.50000000  0.37500000   0.62711864  0.54166667 versicolor
#&gt; 65    0.36111111  0.37500000   0.44067797  0.50000000 versicolor
#&gt; 66    0.66666667  0.45833333   0.57627119  0.54166667 versicolor
#&gt; 67    0.36111111  0.41666667   0.59322034  0.58333333 versicolor
#&gt; 68    0.41666667  0.29166667   0.52542373  0.37500000 versicolor
#&gt; 69    0.52777778  0.08333333   0.59322034  0.58333333 versicolor
#&gt; 70    0.36111111  0.20833333   0.49152542  0.41666667 versicolor
#&gt; 71    0.44444444  0.50000000   0.64406780  0.70833333 versicolor
#&gt; 72    0.50000000  0.33333333   0.50847458  0.50000000 versicolor
#&gt; 73    0.55555556  0.20833333   0.66101695  0.58333333 versicolor
#&gt; 74    0.50000000  0.33333333   0.62711864  0.45833333 versicolor
#&gt; 75    0.58333333  0.37500000   0.55932203  0.50000000 versicolor
#&gt; 76    0.63888889  0.41666667   0.57627119  0.54166667 versicolor
#&gt; 77    0.69444444  0.33333333   0.64406780  0.54166667 versicolor
#&gt; 78    0.66666667  0.41666667   0.67796610  0.66666667 versicolor
#&gt; 79    0.47222222  0.37500000   0.59322034  0.58333333 versicolor
#&gt; 80    0.38888889  0.25000000   0.42372881  0.37500000 versicolor
#&gt; 81    0.33333333  0.16666667   0.47457627  0.41666667 versicolor
#&gt; 82    0.33333333  0.16666667   0.45762712  0.37500000 versicolor
#&gt; 83    0.41666667  0.29166667   0.49152542  0.45833333 versicolor
#&gt; 84    0.47222222  0.29166667   0.69491525  0.62500000 versicolor
#&gt; 85    0.30555556  0.41666667   0.59322034  0.58333333 versicolor
#&gt; 86    0.47222222  0.58333333   0.59322034  0.62500000 versicolor
#&gt; 87    0.66666667  0.45833333   0.62711864  0.58333333 versicolor
#&gt; 88    0.55555556  0.12500000   0.57627119  0.50000000 versicolor
#&gt; 89    0.36111111  0.41666667   0.52542373  0.50000000 versicolor
#&gt; 90    0.33333333  0.20833333   0.50847458  0.50000000 versicolor
#&gt; 91    0.33333333  0.25000000   0.57627119  0.45833333 versicolor
#&gt; 92    0.50000000  0.41666667   0.61016949  0.54166667 versicolor
#&gt; 93    0.41666667  0.25000000   0.50847458  0.45833333 versicolor
#&gt; 94    0.19444444  0.12500000   0.38983051  0.37500000 versicolor
#&gt; 95    0.36111111  0.29166667   0.54237288  0.50000000 versicolor
#&gt; 96    0.38888889  0.41666667   0.54237288  0.45833333 versicolor
#&gt; 97    0.38888889  0.37500000   0.54237288  0.50000000 versicolor
#&gt; 98    0.52777778  0.37500000   0.55932203  0.50000000 versicolor
#&gt; 99    0.22222222  0.20833333   0.33898305  0.41666667 versicolor
#&gt; 100   0.38888889  0.33333333   0.52542373  0.50000000 versicolor
#&gt; 101   0.55555556  0.54166667   0.84745763  1.00000000  virginica
#&gt; 102   0.41666667  0.29166667   0.69491525  0.75000000  virginica
#&gt; 103   0.77777778  0.41666667   0.83050847  0.83333333  virginica
#&gt; 104   0.55555556  0.37500000   0.77966102  0.70833333  virginica
#&gt; 105   0.61111111  0.41666667   0.81355932  0.87500000  virginica
#&gt; 106   0.91666667  0.41666667   0.94915254  0.83333333  virginica
#&gt; 107   0.16666667  0.20833333   0.59322034  0.66666667  virginica
#&gt; 108   0.83333333  0.37500000   0.89830508  0.70833333  virginica
#&gt; 109   0.66666667  0.20833333   0.81355932  0.70833333  virginica
#&gt; 110   0.80555556  0.66666667   0.86440678  1.00000000  virginica
#&gt; 111   0.61111111  0.50000000   0.69491525  0.79166667  virginica
#&gt; 112   0.58333333  0.29166667   0.72881356  0.75000000  virginica
#&gt; 113   0.69444444  0.41666667   0.76271186  0.83333333  virginica
#&gt; 114   0.38888889  0.20833333   0.67796610  0.79166667  virginica
#&gt; 115   0.41666667  0.33333333   0.69491525  0.95833333  virginica
#&gt; 116   0.58333333  0.50000000   0.72881356  0.91666667  virginica
#&gt; 117   0.61111111  0.41666667   0.76271186  0.70833333  virginica
#&gt; 118   0.94444444  0.75000000   0.96610169  0.87500000  virginica
#&gt; 119   0.94444444  0.25000000   1.00000000  0.91666667  virginica
#&gt; 120   0.47222222  0.08333333   0.67796610  0.58333333  virginica
#&gt; 121   0.72222222  0.50000000   0.79661017  0.91666667  virginica
#&gt; 122   0.36111111  0.33333333   0.66101695  0.79166667  virginica
#&gt; 123   0.94444444  0.33333333   0.96610169  0.79166667  virginica
#&gt; 124   0.55555556  0.29166667   0.66101695  0.70833333  virginica
#&gt; 125   0.66666667  0.54166667   0.79661017  0.83333333  virginica
#&gt; 126   0.80555556  0.50000000   0.84745763  0.70833333  virginica
#&gt; 127   0.52777778  0.33333333   0.64406780  0.70833333  virginica
#&gt; 128   0.50000000  0.41666667   0.66101695  0.70833333  virginica
#&gt; 129   0.58333333  0.33333333   0.77966102  0.83333333  virginica
#&gt; 130   0.80555556  0.41666667   0.81355932  0.62500000  virginica
#&gt; 131   0.86111111  0.33333333   0.86440678  0.75000000  virginica
#&gt; 132   1.00000000  0.75000000   0.91525424  0.79166667  virginica
#&gt; 133   0.58333333  0.33333333   0.77966102  0.87500000  virginica
#&gt; 134   0.55555556  0.33333333   0.69491525  0.58333333  virginica
#&gt; 135   0.50000000  0.25000000   0.77966102  0.54166667  virginica
#&gt; 136   0.94444444  0.41666667   0.86440678  0.91666667  virginica
#&gt; 137   0.55555556  0.58333333   0.77966102  0.95833333  virginica
#&gt; 138   0.58333333  0.45833333   0.76271186  0.70833333  virginica
#&gt; 139   0.47222222  0.41666667   0.64406780  0.70833333  virginica
#&gt; 140   0.72222222  0.45833333   0.74576271  0.83333333  virginica
#&gt; 141   0.66666667  0.45833333   0.77966102  0.95833333  virginica
#&gt; 142   0.72222222  0.45833333   0.69491525  0.91666667  virginica
#&gt; 143   0.41666667  0.29166667   0.69491525  0.75000000  virginica
#&gt; 144   0.69444444  0.50000000   0.83050847  0.91666667  virginica
#&gt; 145   0.66666667  0.54166667   0.79661017  1.00000000  virginica
#&gt; 146   0.66666667  0.41666667   0.71186441  0.91666667  virginica
#&gt; 147   0.55555556  0.20833333   0.67796610  0.75000000  virginica
#&gt; 148   0.61111111  0.41666667   0.71186441  0.79166667  virginica
#&gt; 149   0.52777778  0.58333333   0.74576271  0.91666667  virginica
#&gt; 150   0.44444444  0.41666667   0.69491525  0.70833333  virginica</code></pre>
</div>
</div>
<p>AR Solutions: To apply a function to every column of a data frame, we can use <code>purrr::modify()</code> (or <code>purrr::map_dfr()</code>), which also conveniently returns a data frame. To limit the application to numeric columns, the scoped version <code>modify_if()</code> can be used.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb153-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify_if</span>(mtcars, is.numeric, scale01)</span></code></pre></div>
</div>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">9.7.3 Exercises</h2>
<ol type="1">
<li>How does <code>apply()</code> arrange the output? Read the documentation and perform some experiments.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># experiments</span></span>
<span id="cb154-2">m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb154-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span>
<span id="cb154-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sum)</span>
<span id="cb154-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb154-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">simplify =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb154-10"></span>
<span id="cb154-11">m1a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb154-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m1a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-13"></span>
<span id="cb154-14">m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb154-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span>
<span id="cb154-16"></span>
<span id="cb154-17">m3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb154-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, sum)</span>
<span id="cb154-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, sum)</span>
<span id="cb154-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, sum)</span>
<span id="cb154-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb154-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(m3, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>Answer: the documentation states:</p>
<blockquote class="blockquote">
<p>If each call to <code>FUN</code> returns a vector of length <code>n</code>, and simplify is <code>TRUE</code>, then apply returns an array of dimension <code>c(n, dim(X)[MARGIN])</code> if <code>n &gt; 1</code>. If <code>n</code> equals 1, <code>apply</code> returns a vector if <code>MARGIN</code> has length 1 and an array of <code>dimension dim(X)[MARGIN]</code> otherwise. If <code>n</code> is 0, the result has length 0 but not necessarily the ‘correct’ dimension.</p>
<p>If the calls to <code>FUN</code> return vectors of different lengths, or if simplify is <code>FALSE</code>, apply returns a list of <code>length prod(dim(X)[MARGIN])</code> with <code>dim</code> set to <code>MARGIN</code> if this has length greater than one.</p>
</blockquote>
<p>With exploration, under normal circumstances:</p>
<ul>
<li>If <code>MARGIN</code> includes all dimensions of an array or matrix (<code>c(1, 2)</code> or <code>c(1, 2, 3)</code>), the output is arranged in the same shape as the input</li>
<li>Otherwise, the return value drops a dimension if modifying a vector in place (as with <code>*</code>), or returns a vector when summarizing (as with <code>sum</code>)</li>
<li>Matrices of a single row are simplified to a vector</li>
<li>Matrices of a single column are returned as a matrix</li>
<li>When <code>simplify = FALSE</code> is set, a list is returned</li>
</ul>
<p>However, even with all this, the “rules” aren’t clear to me.</p>
<p>AR Solutions: Basically <code>apply()</code> applies a function over the margins of an array. In the two-dimensional case, the margins are just the rows and columns of a matrix. Let’s make this concrete.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb155-1">arr2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb155-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(arr2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"row"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb155-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(arr2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"col"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb155-4">arr2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      col1 col2 col3 col4
#&gt; row1    1    4    7   10
#&gt; row2    2    5    8   11
#&gt; row3    3    6    9   12</code></pre>
</div>
</div>
<p>When we apply the <code>head()</code> function over the first margin of <code>arr2()</code> (i.e.&nbsp;the rows), the results are contained in the columns of the output, transposing the array compared to the original input.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb157-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(arr2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      row1 row2 row3
#&gt; col1    1    2    3
#&gt; col2    4    5    6</code></pre>
</div>
</div>
<p>And vice versa if we apply over the second margin (the columns):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb159" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb159-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply</span>(arr2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      col1 col2 col3 col4
#&gt; row1    1    4    7   10
#&gt; row2    2    5    8   11</code></pre>
</div>
</div>
<p>The output of <code>apply()</code> is organised first by the margins being operated over, then the results of the function. This can become quite confusing for higher dimensional arrays.</p>
<p>Notes: AR Solutions’ explanation is better, but the output is still confusing.</p>
<hr>
<ol start="2" type="1">
<li>What do <code>eapply()</code> and <code>rapply()</code> do? Does purrr have equivalents?</li>
</ol>
<p>Answer: <code>eapply()</code> applies a function to named values in an environment. <code>rapply()</code> is a recursive <code>lapply()</code>. There are no equivalents in purrr.</p>
<p>AR Solutions: <code>eapply()</code> is a variant of <code>lapply()</code>, which iterates over the (named) elements of an environment. In <code>purrr</code> there is no equivalent for <code>eapply()</code> as <code>purrr</code> mainly provides functions that operate on vectors and functions, but not on environments.</p>
<p><code>rapply()</code> applies a function to all elements of a list recursively. This function makes it possible to limit the application of the function to specified classes (default <code>classes = ANY</code>). One may also specify how elements of other classes should remain: as their identity (<code>how = replace</code>) or another value (<code>default = NULL</code>). The closest equivalent in <code>purrr</code> is <code>modify_depth()</code>, which allows you to modify elements at a specified depth in a nested list.</p>
<p>Notes: I wasn’t aware of <code>purrr::modify_depth()</code>.</p>
<hr>
<ol start="3" type="1">
<li>Challenge: read about the <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-12.html#%25_idx_1096">fixed point algorithm</a>. Complete the exercises using R.</li>
</ol>
<p>Note: see <a href="https://web.archive.org/web/20220614001903/https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-12.html">archive.org</a>, “Finding fixed points of functions.”</p>
<p>Answer: the fixed point algorithm is defined below, with an example solution:</p>
<pre><code>(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (&lt; (abs (- v1 v2)) tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(fixed-point cos 1.0)
0.7390822985224023

(fixed-point (lambda (y) (+ (sin y) (cos y)))
             1.0)
1.2587315962971173

(define (sqrt x)
  (fixed-point (lambda (y) (/ x y))
               1.0))</code></pre>
<p>Implementation in R:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb162-1">fixed_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, x) {</span>
<span id="cb162-2">  tolerance <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00001</span></span>
<span id="cb162-3">  close_enough <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(v1, v2) {</span>
<span id="cb162-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(v1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> v2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tolerance</span>
<span id="cb162-5">  }</span>
<span id="cb162-6"></span>
<span id="cb162-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">close_enough</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x), x)) {</span>
<span id="cb162-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)</span>
<span id="cb162-9">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb162-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point</span>(f, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x))</span>
<span id="cb162-11">  }</span>
<span id="cb162-12">}</span>
<span id="cb162-13"></span>
<span id="cb162-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point</span>(cos, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.7390823</code></pre>
</div>
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb164-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sin</span>(y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cos</span>(y), <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1.258732</code></pre>
</div>
</div>
<p>AR Solutions: A number <img src="https://latex.codecogs.com/png.latex?x"> is called a fixed point of a function <img src="https://latex.codecogs.com/png.latex?f"> if it satisfies the equation <img src="https://latex.codecogs.com/png.latex?f(x)%20=%20x">. For some functions we may find a fixed point by beginning with a starting value and applying <img src="https://latex.codecogs.com/png.latex?f"> repeatedly. Here <code>fixed_point()</code> acts as a functional because it takes a function as an argument.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb166" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb166-1">fixed_point_ar <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, x_init, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n_max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tol =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>) {</span>
<span id="cb166-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb166-3">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x_init</span>
<span id="cb166-4">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)</span>
<span id="cb166-5"></span>
<span id="cb166-6">  is_fixed_point <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb166-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> tol</span>
<span id="cb166-8">  }</span>
<span id="cb166-9"></span>
<span id="cb166-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_fixed_point</span>(x, y)) {</span>
<span id="cb166-11">    x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y</span>
<span id="cb166-12">    y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(y)</span>
<span id="cb166-13"></span>
<span id="cb166-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure we eventually stop</span></span>
<span id="cb166-15">    n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb166-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> n_max) {</span>
<span id="cb166-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Failed to converge."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb166-18">    }</span>
<span id="cb166-19">  }</span>
<span id="cb166-20"></span>
<span id="cb166-21">  x</span>
<span id="cb166-22">}</span>
<span id="cb166-23"></span>
<span id="cb166-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions with fixed points</span></span>
<span id="cb166-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point_ar</span>(sin, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.08430922</code></pre>
</div>
<div class="sourceCode cell-code" id="cb168" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb168-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point_ar</span>(cos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.7391302</code></pre>
</div>
<div class="sourceCode cell-code" id="cb170" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb170-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions without fixed points</span></span>
<span id="cb170-2">add_one <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb170-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point_ar</span>(add_one, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Failed to converge.</code></pre>
</div>
</div>
<p>Notes: AR Solutions offers a different approach using a <code>while()</code> loop that is guaranteed to stop. My approach using recursive calls does stop eventually with a stack limit error:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb172-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point</span>(add_one, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Comparing benchmarks:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb173-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point_ar</span>(cos, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x_init =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tol =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00001</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 fixed_point_ar(cos, x_init = 1, to… 11.8µs 12.5µs    78634.        0B     23.6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb175-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fixed_point</span>(cos, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression               min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;          &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 fixed_point(cos, 1)   20.3µs   21.7µs    44672.        0B     26.8</code></pre>
</div>
</div>
<p>As usual, AR Solutions is faster. :-(</p>
<hr>
</section>
</section>
<section id="function-factories" class="level1">
<h1>10 Function factories</h1>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb177-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<p>A <strong>function factory</strong> is a function that makes functions. Here’s a very simple example: we use a function factory (<code>power1()</code>) to make two child functions (<code>square()</code> and <code>cube()</code>):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb178-1">power1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(exp) {</span>
<span id="cb178-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb178-3">    x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>exp</span>
<span id="cb178-4">  }</span>
<span id="cb178-5">}</span>
<span id="cb178-6">square <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">power1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb178-7">cube <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">power1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Don’t worry if this doesn’t make sense yet, it should by the end of the chapter!</p>
<p>I’ll call <code>square()</code> and <code>cube()</code> <strong>manufactured functions</strong>, but this is just a term to ease communication with other humans: from R’s perspective they are no different to functions created any other way.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb179-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">square</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb181-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cube</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 27</code></pre>
</div>
</div>
<p>You have already learned about the individual components that make function factories possible:</p>
<ul>
<li><p>In Section 6.2.3, you learned about R’s first-class functions. In R, you bind a function to a name in the same way as you bind any object to a name: with <code>&lt;-</code>.</p></li>
<li><p>In Section 7.4.2, you learned that a function captures (encloses) the environment in which it is created.</p></li>
<li><p>In Section 7.4.4, you learned that a function creates a new execution environment every time it is run. This environment is usually ephemeral, but here it becomes the enclosing environment of the manufactured function.</p></li>
</ul>
<p>In this chapter, you’ll learn how the non-obvious combination of these three features leads to the function factory. You’ll also see examples of their usage in visualisation and statistics.</p>
<p>Of the three main functional programming tools (functionals, function factories, and function operators), function factories are the least used. Generally, they don’t tend to reduce overall code complexity but instead partition complexity into more easily digested chunks. Function factories are also an important building block for the very useful function operators, which you’ll learn about in Chapter 11.</p>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">10.2.6 Exercises</h2>
<ol type="1">
<li>The definition of <code>force()</code> is simple:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb183-1">force</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x) 
#&gt; x
#&gt; &lt;bytecode: 0x15314ffb0&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>Why is it better to <code>force(x)</code> instead of just <code>x</code>?</p>
<p>Answer: as the R Documentation states, ‘This is semantic sugar’: in other words, <code>force(x)</code> makes the intent of the call explicit, to force evaluation, whereas <code>x</code> does not.</p>
<p>AR Solutions: As you can see <code>force(x)</code> is similar to <code>x</code>. As mentioned in <em>Advanced R</em>, we prefer this explicit form, because</p>
<blockquote class="blockquote">
<p>using this function clearly indicates that you’re forcing evaluation, not that you’ve accidentally typed <code>x</code>.”</p>
</blockquote>
<hr>
<ol start="2" type="1">
<li>Base R contains two function factories, <code>approxfun()</code> and <code>ecdf()</code>. Read their documentation and experiment to figure out what the functions do and what they return.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb185-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb185-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb185-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-57-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb186-1">af <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">approxfun</span>(x, y)</span>
<span id="cb186-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">af</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-57-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Answer: <code>approxfun()</code> returns “a function performing the linear (or constant) interpolation.” As the example above shows, <code>approxfun()</code> provides linear interpolation that by default does not return values outside the minimum and maximum.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb187-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rlnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-58-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb188-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-58-2.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb189-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-58-3.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p><code>ecdf()</code> “Compute[s] an empirical cumulative distribution function”, the Empirical Cumulative Distribution Function, which is a standard statistical plot. It plots the actual observations connected by a line, which is easier to see with fewer observations:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb190-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-59-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>AR Solutions: (Note: full solution <a href="https://advanced-r-solutions.rbind.io/function-factories.html#factory-fundamentals">here</a>)</p>
<p>Let’s begin with <code>approxfun()</code> as it is used within <code>ecdf()</code> as well:</p>
<p><code>approxfun()</code> takes a combination of data points (x and y values) as input and returns a stepwise linear (or constant) interpolation function. To find out what this means exactly, we first create a few random data points.</p>
<p>Next, we use <code>approxfun()</code> to construct the linear and constant interpolation functions for our <code>x</code> and <code>y</code> values.</p>
<p>When we apply these functions to new x values, these are mapped to the lines connecting the initial y values (linear case) or to the same y value as for the next smallest initial x value (constant case).</p>
<p>However, both functions are only defined within <code>range(x)</code>.</p>
<p>To change this behaviour, one can set <code>rule = 2</code>. This leads to the result that for values outside of <code>range(x)</code> the boundary values of the function are returned.</p>
<p>Another option is to customise the return values as individual constants for each side via <code>yleft</code> and/or <code>yright</code>.</p>
<p>Further, <code>approxfun()</code> provides the option to shift the y values for <code>method = "constant"</code> between their left and right values. According to the documentation this indicates a compromise between left- and right-continuous steps.</p>
<p>Finally, the <code>ties</code> argument allows to aggregate y values if multiple ones were provided for the same x value. For example, in the following line we use <code>mean()</code> to aggregate these y values before they are used for the interpolation <code>approxfun(x = c(1,1,2), y = 1:3, ties = mean)</code>.</p>
<p>Next, we focus on <code>ecdf()</code>. “ecdf” is an acronym for empirical cumulative distribution function. For a numeric vector of density values, <code>ecdf()</code> initially creates the (x, y) pairs for the nodes of the density function and then passes these pairs to <code>approxfun()</code>, which gets called with specifically adapted settings (<code>approxfun(vals, cumsum(tabulate(match(x, vals)))/n, method = "constant", yleft = 0, yright = 1, f = 0, ties = "ordered")</code>).</p>
<p>New values are then mapped on the y value of the next smallest x value from within the initial input.</p>
<hr>
<ol start="3" type="1">
<li>Create a function <code>pick()</code> that takes an index, <code>i</code>, as an argument and returns a function with an argument <code>x</code> that subsets <code>x</code> with <code>i</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb191-1">pick <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb191-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[i]]</span>
<span id="cb191-3">}</span>
<span id="cb191-4"></span>
<span id="cb191-5">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb191-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb193-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># should be equivalent to</span></span>
<span id="cb193-2">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb195-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pick</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
#&gt;  18.70   8.00 360.00 175.00   3.15   3.44  17.02   0.00   0.00   3.00   2.00</code></pre>
</div>
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb197-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># should be equivalent to</span></span>
<span id="cb197-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(mtcars, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    mpg    cyl   disp     hp   drat     wt   qsec     vs     am   gear   carb 
#&gt;  18.70   8.00 360.00 175.00   3.15   3.44  17.02   0.00   0.00   3.00   2.00</code></pre>
</div>
</div>
<p>Answer: code above. Modified to use <code>unlist()</code> to shorten output.</p>
<p>AR Solutions: In this exercise <code>pick(i)</code> acts as a function factory, which returns the required subsetting function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb199-1">pick <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb199-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(i)</span>
<span id="cb199-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x[[i]]</span>
<span id="cb199-4">}</span></code></pre></div>
</div>
<p>Note: the AR Solutions version appropriately uses <code>force()</code>.</p>
<hr>
<ol start="4" type="1">
<li>Create a function that creates functions that compute the i<sup>th</sup> <a href="https://en.wikipedia.org/wiki/Central_moment">central moment</a> of a numeric vector. You can test it by running the following code:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb200-1">moment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb200-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>i)</span>
<span id="cb200-3">}</span>
<span id="cb200-4"></span>
<span id="cb200-5">m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb200-6">m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb200-7">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb200-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stopifnot</span>(</span>
<span id="cb200-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m1</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb200-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m2</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb200-11">)</span>
<span id="cb200-12">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m2</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 m2(x)        3.16µs   3.53µs   267745.      848B     26.8</code></pre>
</div>
</div>
<p>Answer: code above, following the formula <img src="https://latex.codecogs.com/png.latex?E%5B(X%20-%20E%5BX%5D)%5Ei%5D">, where <img src="https://latex.codecogs.com/png.latex?E"> is the <a href="https://en.wikipedia.org/wiki/Expected_value">expected value</a>, ie the <em>mean</em>.</p>
<p>AR Solutions: The first moment is closely related to the mean and describes the average deviation from the mean, which is 0 (within numerical margin of error). The second moment describes the variance of the input data. If we want to compare it to <code>var()</code>, we need to undo <a href="https://en.wikipedia.org/wiki/Bessel%27s_correction">Bessel’s correction</a> by multiplying with <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BN-1%7D%7BN%7D">.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb202" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb202-1">moment <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(i) {</span>
<span id="cb202-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(i)</span>
<span id="cb202-3"></span>
<span id="cb202-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>((x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>i) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb202-5">}</span>
<span id="cb202-6">m1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb202-7">m2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">moment</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb202-8">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb202-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m1</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># removed stopifnot() for clarity</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb204" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb204-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all.equal</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m2</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">var</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb206" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb206-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">m2</span>(x))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 m2(x)        2.05µs   2.21µs   426175.      848B     42.6</code></pre>
</div>
</div>
<p>Note: isn’t <code>sum() / length()</code> just <code>mean()</code>? For fun, compare <code>bench::mark()</code> (above). Curses, foiled again!</p>
<hr>
<ol start="5" type="1">
<li>What happens if you don’t use a closure? Make predictions, then verify with the code below.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb208" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb208-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb208-2">new_counter2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb208-3">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb208-4">  i</span>
<span id="cb208-5">}</span></code></pre></div>
</div>
<p>Answer: <code>i</code> should increment by 1 every time <code>new_counter2()</code> is run, but can be altered by changing the global variable <code>i</code>. [Correct!]</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb209-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb211-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb213-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb215-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb215-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb217" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb217-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
<p>AR Solutions: Without the captured and encapsulated environment of a closure the counts will be stored in the global environment. Here they can be overwritten or deleted as well as interfere with other counters.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb218" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb218-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb220" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb220-1">i</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb222" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb222-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb224" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb224-1">i</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb226" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb226-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb226-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb228" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb228-1">i</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb230" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb230-1">i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
<hr>
<ol start="6" type="1">
<li>What happens if you use <code>&lt;-</code> instead of <code>&lt;&lt;-</code>? Make predictions, then verify with the code below.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb231" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb231-1">new_counter3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb231-2">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb231-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb231-4">    i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb231-5">    i</span>
<span id="cb231-6">  }</span>
<span id="cb231-7">}</span></code></pre></div>
</div>
<p>Answer: functions created by <code>new_counter3()</code> starts with a new value of <code>i &lt;- 0</code> each time, and will always return 1. [Correct!]</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb232" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb232-1">nc3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new_counter3</span>()</span>
<span id="cb232-2"></span>
<span id="cb232-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nc3</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb234" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb234-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nc3</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
</div>
<p>AR Solutions: Without the super assignment <code>&lt;&lt;-</code>, the counter will always return 1. The counter always starts in a new execution environment within the same enclosing environment, which contains an unchanged value for <code>i</code> (in this case it remains 0).</p>
<hr>
</section>
<section id="exercises-5" class="level2">
<h2 class="anchored" data-anchor-id="exercises-5">10.3.4 Exercises</h2>
<ol type="1">
<li>Compare and contrast <code>ggplot2::label_bquote()</code> with <code>scales::number_format()</code></li>
</ol>
<p>Answer: <code>ggplot2::label_bquote()</code> “offers a flexible way of labelling facet rows or columns with plotmath expressions. Backquoted variables will be replaced with their value in the facet.”</p>
<p>The example shows a scatterplot of weight and miles per gallon faceted by engine type (v-shaped).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb236" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb236-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(mtcars, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(wt, mpg)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb236-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb236-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> ., <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_bquote</span>(vs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> .(vs)))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-69-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p><code>scales::number_format()</code> has been superseded by <code>scales::label_number()</code>:</p>
<p>“Use <code>label_number()</code> force decimal display of numbers (i.e.&nbsp;don’t use scientific notation). <code>label_comma()</code> is a special case that inserts a comma every three digits.”</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb237" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb237-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">demo_continuous</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">label_number</span>())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; scale_x_continuous(labels = label_number())</code></pre>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2_files/figure-html/unnamed-chunk-70-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p><code>ggplot2::label_bquote()</code> is a special-purpose function for facets, while <code>scales::number_format()</code> can be applied more generally. Both are function factories that can be applied to changing labels.</p>
<p>AR Solutions: Both functions will help you in styling your output, e.g.&nbsp;in your plots and they do this by returning the desired formatting function to you.</p>
<p><code>ggplot2::label_bquote()</code> takes relatively straightforward <a href="https://stat.ethz.ch/R-manual/R-patched/library/grDevices/html/plotmath.html">plotmath</a> expressions and uses them for faceting labels in <code>{ggplot2}</code>. Because this function is used in <code>{ggplot2}</code> it needs to return a function of <code>class = "labeller"</code>.</p>
<p><code>scales::number_format()</code> initially <code>force()</code>s the computation of all parameters. It’s essentially a parametrised wrapper around <code>scales::number()</code> and will help you format numbers appropriately. It will return a simple function.</p>
<hr>
</section>
<section id="exercises-6" class="level2">
<h2 class="anchored" data-anchor-id="exercises-6">10.4.4 Exercises</h2>
<ol type="1">
<li>In <code>boot_model()</code>, why don’t I need to force the evaluation of <code>df</code> or <code>model</code>?</li>
</ol>
<p>Answer: assuming <code>model</code> actually refers to <code>formula</code>, both are evaluated when <code>mod &lt;- lm(formula, data = df)</code> is run.</p>
<p>AR Solutions: <code>boot_model()</code> ultimately returns a function, and whenever you return a function you need to make sure all the inputs are explicitly evaluated. Here that happens automatically because we use <code>df</code> and <code>formula</code> in <code>lm()</code> before returning the function.</p>
<hr>
<ol start="2" type="1">
<li>Why might you formulate the Box-Cox transformation like this?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb239" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb239-1">boxcox3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb239-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb239-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb239-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(x)</span>
<span id="cb239-5">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb239-6">      (x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span>lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> lambda</span>
<span id="cb239-7">    }</span>
<span id="cb239-8">  }</span>
<span id="cb239-9">}</span></code></pre></div>
</div>
<p>Answer: <code>boxcox3</code> returns a function where <code>x</code> is fixed and <code>lambda</code> can vary, which allows for easy exploration of different values of lambda, for example using <code>lapply()</code> or <code>optimize()</code>.</p>
<p>AR Solutions: <code>boxcox3()</code> returns a function where <code>x</code> is fixed (though it is not forced, so it may be manipulated later). This allows us to apply and test different transformations for different inputs and give them a descriptive name.</p>
<p>Note: I missed the fact that <code>x</code> is not forced.</p>
<hr>
<ol start="3" type="1">
<li>Why don’t you need to worry that <code>boot_permute()</code> stores a copy of the data inside the function that it generates?</li>
</ol>
<p>Answer: as R is copy-on-write, and <code>boot_permute()</code> stores an unmodified copy of the data, the function contains only a reference to the original data.</p>
<p>AR Solutions: We don’t need to worry that it stores a copy of the data, because it actually doesn’t store one; it’s just a name that points to the same underlying object in memory.</p>
<hr>
<ol start="4" type="1">
<li>How much time does <code>ll_poisson2()</code> save compared to <code>ll_poisson1()</code>? Use <code>bench::mark()</code> to see how much faster the optimisation occurs. How does changing the length of <code>x</code> change the results?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb240-1">ll_poisson1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb240-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb240-3"></span>
<span id="cb240-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb240-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(lambda) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lfactorial</span>(x))</span>
<span id="cb240-6">  }</span>
<span id="cb240-7">}</span>
<span id="cb240-8"></span>
<span id="cb240-9">ll_poisson2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb240-10">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)</span>
<span id="cb240-11">  sum_x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x)</span>
<span id="cb240-12">  c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lfactorial</span>(x))</span>
<span id="cb240-13"></span>
<span id="cb240-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lambda) {</span>
<span id="cb240-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(lambda) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sum_x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> n <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> lambda <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> c</span>
<span id="cb240-16">  }</span>
<span id="cb240-17">}</span>
<span id="cb240-18"></span>
<span id="cb240-19">x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">38</span>)</span>
<span id="cb240-20"></span>
<span id="cb240-21">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optimize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ll_poisson1</span>(x1), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maximum =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 optimize(ll_poisson1(x1), c(0, 100… 12.1µs 12.8µs    74803.    12.8KB     29.9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb242" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb242-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optimize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ll_poisson2</span>(x1), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maximum =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 optimize(ll_poisson2(x1), c(0, 100… 6.48µs 6.85µs   137840.        0B     27.6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb244" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb244-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rpois</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>L)</span>
<span id="cb244-2">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optimize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ll_poisson1</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maximum =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                           &lt;bch&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 optimize(ll_poisson1(x), c(0, 100),… 377µs  398µs     2503.     189KB     10.4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb246" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb246-1">bench<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">optimize</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ll_poisson2</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">maximum =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                          &lt;bch:&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 optimize(ll_poisson2(x), c(0, 100)… 25.3µs 27.7µs    35376.    7.86KB     10.6</code></pre>
</div>
</div>
<p>Answer: <code>ll_poisson2()</code> is nearly twice as fast with <code>x1</code> and nearly 10 times as fast when the length of <code>x</code> is 100.</p>
<p>Notes: consulting AR Solutions was needed to understand how to benchmark the two functions.</p>
<p>AR Solutions:</p>
<p>A benchmark on <code>x1</code> reveals a performance improvement of factor 2 for <code>ll_poisson2()</code> over <code>ll_poisson1()</code></p>
<p>As the redundant calculations within <code>ll_poisson1()</code> become more expensive with growing length of <code>x1</code>, we expect even further relative performance improvements for <code>ll_poisson2()</code>. The following benchmark reveals a relative performance improvement of factor 20 for <code>ll_poisson2()</code> when <code>x1</code> is of length 100,000.</p>
<hr>
</section>
<section id="exercises-7" class="level2">
<h2 class="anchored" data-anchor-id="exercises-7">10.5.1 Exercises</h2>
<ol type="1">
<li><p>Which of the following commands is equivalent to <code>with(x, f(z))</code>?</p>
<ol type="a">
<li><code>x$f(x$z)</code>.</li>
<li><code>f(x$z)</code>.</li>
<li><code>x$f(z)</code>.</li>
<li><code>f(z)</code>.</li>
<li>It depends.</li>
</ol></li>
</ol>
<p>Answer: (e). depending on the value of <code>x</code>, it could be any of (a) through (d).</p>
<p>AR Solutions: (e) “It depends” is the correct answer. Usually <code>with()</code> is used with a data frame, so you’d usually expect (b), but if <code>x</code> is a list, it could be any of the options.</p>
<hr>
<ol start="2" type="1">
<li>Compare and contrast the effects of <code>env_bind()</code> vs.&nbsp;<code>attach()</code> for the following code.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb248" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb248-1">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb248-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>),</span>
<span id="cb248-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sum =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb248-4">)</span>
<span id="cb248-5"></span>
<span id="cb248-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attach</span>(funs)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; The following objects are masked from package:base:
#&gt; 
#&gt;     mean, sum</code></pre>
</div>
<div class="sourceCode cell-code" id="cb250" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb250-1">mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi!"</span>)</span>
<span id="cb250-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">detach</span>(funs)</span>
<span id="cb250-3"></span>
<span id="cb250-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_bind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">globalenv</span>(), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!!!</span>funs)</span>
<span id="cb250-5">mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hi!"</span>)</span>
<span id="cb250-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_unbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">globalenv</span>(), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(funs))</span></code></pre></div>
</div>
<p>Answer: <code>attach()</code> places the function names in the search path, and the <code>env_bind()</code> code places the function names in the global environment. Both have the effect of masking <code>mean()</code> and <code>sum()</code>, but as the chapter points out, when unbinding, “there’s no guarantee that they haven’t been rebound in the meantime, and you might be deleting an object that someone else created.”</p>
<p>AR Solutions: <code>attach()</code> adds <code>funs</code> to the search path. Therefore, the provided functions are found before their respective versions from the <code>{base}</code> package. Further, they cannot get accidentally overwritten by similar named functions in the global environment. One annoying downside of using <code>attach()</code> is the possibility to attach the same object multiple times, making it necessary to call <code>detach()</code> equally often.</p>
<p>In contrast <code>rlang::env_bind()</code> just adds the functions in <code>fun</code> to the global environment. No further side effects are introduced, and the functions are overwritten when similarly named functions are defined.</p>
<p>Notes: AR Solutions provides a more complete answer.</p>
<hr>
</section>
</section>
<section id="function-operators" class="level1">
<h1>11 Function operators</h1>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb251" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb251-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<p>In this chapter, you’ll learn about function operators. A <strong>function operator</strong> is a function that takes one (or more) functions as input and returns a function as output. The following code shows a simple function operator, <code>chatty()</code>. It wraps a function, making a new function that prints out its first argument. You might create a function like this because it gives you a window to see how functionals, like <code>map_int()</code>, work.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb252" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb252-1">chatty <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb252-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb252-3"></span>
<span id="cb252-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, ...) {</span>
<span id="cb252-5">    res <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x, ...)</span>
<span id="cb252-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Processing "</span>, x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb252-7">    res</span>
<span id="cb252-8">  }</span>
<span id="cb252-9">}</span>
<span id="cb252-10">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb252-11">s <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb252-12">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_dbl</span>(s, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chatty</span>(f))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Processing 3
#&gt; Processing 2
#&gt; Processing 1</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 9 4 1</code></pre>
</div>
</div>
<p>Function operators are closely related to function factories; indeed they’re just a function factory that takes a function as input. Like factories, there’s nothing you can’t do without them, but they often allow you to factor out complexity in order to make your code more readable and reusable.</p>
<p>Function operators are typically paired with functionals. If you’re using a for-loop, there’s rarely a reason to use a function operator, as it will make your code more complex for little gain.</p>
<p>If you’re familiar with Python, decorators is just another name for function operators.</p>
<section id="exercises-8" class="level2">
<h2 class="anchored" data-anchor-id="exercises-8">11.2.3 Exercises</h2>
<ol type="1">
<li>Base R provides a function operator in the form of <code>Vectorize()</code>. What does it do? When might you use it?</li>
</ol>
<p>Answer: according to the R documentation, “<code>Vectorize</code> creates a function wrapper that vectorizes the action of its argument <code>FUN</code>.” “The arguments named in the <code>vectorize.args</code> argument to <code>Vectorize</code> are the arguments passed in the <code>...</code> list to <code>mapply</code>. Only those that are actually passed will be vectorized; default values will not.” and returns “A function with the same arguments as <code>FUN</code>, wrapping a call to <code>mapply</code>.”</p>
<p>In other words, it is a function operator that uses <code>mapply()</code> to iterate across the arguments. This is potentially simpler to understand than use of <code>mapply()</code>.</p>
<p>In the R documentation example, the vectorized <code>rep.int</code> is called for each pair of values:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb255" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb255-1">vrep <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Vectorize</span>(rep.int)</span>
<span id="cb255-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vrep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] 1 1 1 1
#&gt; 
#&gt; [[2]]
#&gt; [1] 2 2 2
#&gt; 
#&gt; [[3]]
#&gt; [1] 3 3
#&gt; 
#&gt; [[4]]
#&gt; [1] 4</code></pre>
</div>
</div>
<p>AR Solutions: In R a lot of functions are “vectorised”. Vectorised has two meanings. First, it means (broadly) that a function inputs a vector or vectors and does something to each element. Secondly, it usually implies that these operations are implemented in a compiled language such as C or Fortran, so that the implementation is very fast.</p>
<p>However, despite what the function’s name implies, <code>Vectorize()</code> is not able to speed up the provided function. It rather changes the input format of the supplied arguments (<code>vectorize.args</code>), so that they can be iterated over.</p>
<p><code>Vectorize()</code> provides a convenient and concise notation to iterate over multiple arguments but has some major drawbacks that mean you generally shouldn’t use it. See <a href="https://www.jimhester.com/post/2018-04-12-vectorize/">this post</a> for more details.</p>
<p>Notes: Jim Hester’s article points out that most R functions are already vectorized, including <code>paste()</code>!</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb257" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb257-1">color <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)</span>
<span id="cb257-2">object <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ball"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hat"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coat"</span>)</span>
<span id="cb257-3">name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sally"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hank"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Darla"</span>)</span>
<span id="cb257-4"></span>
<span id="cb257-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>, color, object, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"for"</span>, name)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "A blue ball for Sally"  "A red hat for Hank"     "A green coat for Darla"</code></pre>
</div>
</div>
<p>It also argues against use of <code>Vectorize()</code> because a) the functions it generates are not type stable, b) obfuscates the function code, c) can degrade performance, and d) can’t improve performance.</p>
<p>He recommends using existing vectorized functions and either <code>vapply()</code> or <code>map()</code>.</p>
<hr>
<ol start="2" type="1">
<li>Read the source code for <code>possibly()</code>. How does it work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb259" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb259-1">possibly</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (.f, otherwise = NULL, quiet = TRUE) 
#&gt; {
#&gt;     .f &lt;- as_mapper(.f)
#&gt;     force(otherwise)
#&gt;     check_bool(quiet)
#&gt;     function(...) {
#&gt;         tryCatch(.f(...), error = function(e) {
#&gt;             if (!quiet) 
#&gt;                 message("Error: ", conditionMessage(e))
#&gt;             otherwise
#&gt;         })
#&gt;     }
#&gt; }
#&gt; &lt;bytecode: 0x116610438&gt;
#&gt; &lt;environment: namespace:purrr&gt;</code></pre>
</div>
</div>
<p>Answer: <code>possibly()</code> returns a function that uses <code>tryCatch()</code> to return <code>otherwise</code> if the mapper <code>.f</code> errors, unless interrupted, forcing evaluation of <code>otherwise</code> before the mapper is called.</p>
<p>AR Solutions: <code>possibly()</code> modifies functions to return a specified default value (<code>otherwise</code>) in case of an error and to suppress any error messages (<code>quiet = TRUE</code>).</p>
<p>While reading the source code, we notice that <code>possibly()</code> internally uses <code>purrr::as_mapper()</code>. This enables users to supply not only functions, but also formulas or atomics via the same syntax as known from other functions in the <code>{purrr}</code> package. Besides this, the new default value (<code>otherwise</code>) gets evaluated once to make it (almost) immutable.</p>
<p>The main functionality of <code>possibly()</code> is provided by <code>base::tryCatch()</code>. In this part the supplied function (<code>.f</code>) gets wrapped and the error and interrupt handling are specified.</p>
<hr>
<ol start="3" type="1">
<li>Read the source code for <code>safely()</code>. How does it work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb261" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb261-1">safely</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (.f, otherwise = NULL, quiet = TRUE) 
#&gt; {
#&gt;     .f &lt;- as_mapper(.f)
#&gt;     force(otherwise)
#&gt;     check_bool(quiet)
#&gt;     function(...) capture_error(.f(...), otherwise, quiet)
#&gt; }
#&gt; &lt;bytecode: 0x116144358&gt;
#&gt; &lt;environment: namespace:purrr&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb263" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb263-1">purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:::</span>capture_error</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (code, otherwise = NULL, quiet = TRUE) 
#&gt; {
#&gt;     tryCatch(list(result = code, error = NULL), error = function(e) {
#&gt;         if (!quiet) 
#&gt;             message("Error: ", conditionMessage(e))
#&gt;         list(result = otherwise, error = e)
#&gt;     })
#&gt; }
#&gt; &lt;bytecode: 0x1160c9040&gt;
#&gt; &lt;environment: namespace:purrr&gt;</code></pre>
</div>
</div>
<p>Answer: <code>safely()</code> returns a function that uses the internal <code>capture_error()</code> function to store the evaluation of the mapper <code>.f</code> in <code>result</code>, and any error in <code>error</code>.</p>
<p>AR Solutions: <code>safely()</code> modifies functions to return a list, containing the elements <code>result</code> and <code>error</code>. It works in a similar fashion as <code>possibly()</code> and besides using <code>as_mapper()</code>, <code>safely()</code> also provides the <code>otherwise</code> and <code>quiet</code> arguments. However, in order to provide the result and the error in a consistent way, the <code>tryCatch()</code> part of the implementation returns a list with similar structure for both cases. In the case of successful evaluation <code>error</code> equals <code>NULL</code> and in case of an error <code>result</code> equals <code>otherwise</code>, which is <code>NULL</code> by default.</p>
<p>As the <code>tryCatch()</code> part is hidden in the internal <code>purrr:::capture_output()</code> function, we provide it here in addition to <code>safely()</code>.</p>
<p>Take a look at <em>Advanced R</em> or the documentation of <code>safely()</code> to see how you can take advantage of this behaviour, e.g.&nbsp;when fitting many models.</p>
<hr>
</section>
<section id="exercises-9" class="level2">
<h2 class="anchored" data-anchor-id="exercises-9">11.3.1 Exercises</h2>
<ol type="1">
<li>Weigh the pros and cons of <code>download.file %&gt;% dot_every(10) %&gt;% delay_by(0.1)</code> versus <code>download.file %&gt;% delay_by(0.1) %&gt;% dot_every(10)</code>.</li>
</ol>
<p>Answer: in the first version, <code>download.file %&gt;% dot_every(10) %&gt;% delay_by(0.1)</code>, <code>delay_by</code> is the outer function, so a delay is added after the dot is written. In the second version, a dot is added after the delay. The first version seems better since the feedback dots aren’t delayed.</p>
<p>AR Solutions: Both commands will print a dot every 10 downloads and will take the same amount of time to run, so the differences may seem quite subtle.</p>
<p>In the first case, first the dot functionality is added to <code>download.file()</code>. Then the delay is added to this already tweaked function. This implies, that the printing of the dot will also be delayed, and the first dot will be printed as soon as the download for the 10th URL starts.</p>
<p>In the latter case the delay is added first and the dot-functionality is wrapped around it. This order will print the first dot immediately after the 9th download is finished, then the short delay occurs before the 10th download actually starts.</p>
<p>Note: the first case seems like the better option.</p>
<hr>
<ol start="2" type="1">
<li>Should you memoise <code>file.download()</code>? Why or why not?</li>
</ol>
<p>Answer: <code>download.file()</code> should not be memoised! As mentioned in the chapter, the function is not pure (the output doesn’t depend only on the input), and has side effects (saving a file to disk).</p>
<p>AR Solutions: Memoising <code>file.download()</code> will only work if the files are immutable, i.e.&nbsp;if the file at a given URL is always the same. There’s no point memoising unless this is true. Even if this is true, however, memoise has to store the results in memory, and large files will potentially take up a lot of memory.</p>
<p>This implies that it’s probably not beneficial to memoise <code>file.download()</code> in most cases. The only exception is if you are downloading small files many times, and the file at a given URL is guaranteed not to change.</p>
<p>Note: AR Solutions offers a reasonable exception case when memoising makes sense.</p>
<hr>
<ol start="3" type="1">
<li>Create a function operator that reports whenever a file is created or deleted in the working directory, using <code>dir()</code> and <code>setdiff()</code>. What other global function effects might you want to track?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb265" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb265-1">wd_changes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb265-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb265-3">    before <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span>()</span>
<span id="cb265-4">    ret <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withVisible</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...))</span>
<span id="cb265-5">    after <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span>()</span>
<span id="cb265-6">    removed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(before, after)</span>
<span id="cb265-7">    added <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(after, before)</span>
<span id="cb265-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(removed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"removed files: "</span>, removed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb265-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(added) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"added files: "</span>, added, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb265-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (ret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>visible) {</span>
<span id="cb265-11">      ret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value</span>
<span id="cb265-12">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb265-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(ret<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>value)</span>
<span id="cb265-14">    }</span>
<span id="cb265-15">  }</span>
<span id="cb265-16">}</span></code></pre></div>
</div>
<p>Answer: code above. Other effects you might want to track include changes to the global environment, output, and conditions.</p>
<p>AR Solutions: We start with a function that reports the difference between two vectors containing file names:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb266" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb266-1">dir_compare <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(old, new) {</span>
<span id="cb266-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setequal</span>(old, new)) {</span>
<span id="cb266-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>()</span>
<span id="cb266-4">  }</span>
<span id="cb266-5"></span>
<span id="cb266-6">  added <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(new, old)</span>
<span id="cb266-7">  removed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(old, new)</span>
<span id="cb266-8"></span>
<span id="cb266-9">  changes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb266-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(added) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" * '"</span>, added, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' was added"</span>),</span>
<span id="cb266-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(removed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" * '"</span>, removed, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' was removed"</span>)</span>
<span id="cb266-12">  )</span>
<span id="cb266-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste</span>(changes, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">collapse =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span>
<span id="cb266-14">}</span>
<span id="cb266-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_compare</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb268" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb268-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_compare</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt;  * 'a' was added
#&gt;  * 'y' was removed</code></pre>
</div>
</div>
<p>Then we wrap it up in a function operator</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb270" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb270-1">track_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb270-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb270-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb270-4">    dir_old <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span>()</span>
<span id="cb270-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir_compare</span>(dir_old, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir</span>()), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb270-6"></span>
<span id="cb270-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...)</span>
<span id="cb270-8">  }</span>
<span id="cb270-9">}</span></code></pre></div>
</div>
<p>And try it out by creating wrappers around <code>file.create()</code> and <code>file.remove()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb271-1">file_create <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">track_dir</span>(file.create)</span>
<span id="cb271-2">file_remove <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">track_dir</span>(file.remove)</span>
<span id="cb271-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delete_me"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt;  * 'delete_me' was added</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb274" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb274-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_remove</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"delete_me"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt;  * 'delete_me' was removed</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<p>To create a more serious version of <code>track_dir()</code> one might provide optionality to set the <code>full.names</code> and <code>recursive</code> arguments of <code>dir()</code> to <code>TRUE</code>. This would enable to also track the creation/deletion of hidden files and files in folders contained in the working directory.</p>
<p>Other global effects that might be worth tracking include changes regarding:</p>
<ul>
<li>the search path and possibly introduced <code>conflicts()</code></li>
<li><code>options()</code> and <code>par()</code> which modify global settings</li>
<li>the path of the working directory</li>
<li>environment variables</li>
</ul>
<p>Notes: AR Solutions use of multiple functions, messages and <code>on.exit</code> is preferable.</p>
<hr>
<ol start="4" type="1">
<li>Write a function operator that logs a timestamp and message to a file every time a function is run.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb277-1">log_call <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">logfile =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_call.log"</span>) {</span>
<span id="cb277-2">  name <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">deparse</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">enexpr</span>(f))</span>
<span id="cb277-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb277-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(logfile)</span>
<span id="cb277-5"></span>
<span id="cb277-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb277-7">    m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" log_call: "</span>, name)</span>
<span id="cb277-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write</span>(m, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> logfile, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb277-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...)</span>
<span id="cb277-10">  }</span>
<span id="cb277-11">}</span></code></pre></div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: Our <code>logger()</code> function operator takes a function and a file path as input. One timestamp is written to the file under <code>log_path</code> when we call <code>logger()</code> and another timestamp is written to the same file each time the new function gets called.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb278" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb278-1">append_line <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path, ...) {</span>
<span id="cb278-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(..., <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">file =</span> path, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">append =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb278-3">}</span>
<span id="cb278-4"></span>
<span id="cb278-5">logger <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, log_path) {</span>
<span id="cb278-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb278-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(log_path)</span>
<span id="cb278-8"></span>
<span id="cb278-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append_line</span>(log_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"created at: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()))</span>
<span id="cb278-10">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb278-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append_line</span>(log_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"called at: "</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.character</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()))</span>
<span id="cb278-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...)</span>
<span id="cb278-13">  }</span>
<span id="cb278-14">}</span></code></pre></div>
</div>
<p>Note: AR Solutions creates a function <code>append_line()</code> instead of using <code>write()</code>, and adds a “created at:” time, but is otherwise functionally the same. My solution also logs the name of the function called.</p>
<hr>
<ol start="5" type="1">
<li>Modify <code>delay_by()</code> so that instead of delaying by a fixed amount of time, it ensures that a certain amount of time has elapsed since the function was last called. That is, if you called <code>g &lt;- delay_by(1, f); g(); Sys.sleep(2); g()</code> there shouldn’t be an extra delay.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb279" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb279-1">sleep_if <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(start, end, delay) {</span>
<span id="cb279-2">  sleep_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> delay <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(end <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start)</span>
<span id="cb279-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (sleep_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(sleep_time)</span>
<span id="cb279-4">}</span>
<span id="cb279-5"></span>
<span id="cb279-6">delay_by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, delay) {</span>
<span id="cb279-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb279-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(delay)</span>
<span id="cb279-9"></span>
<span id="cb279-10">  last_called <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb279-11">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb279-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(last_called)) {</span>
<span id="cb279-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sleep_if</span>(last_called, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), delay)</span>
<span id="cb279-14">    }</span>
<span id="cb279-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(last_called <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb279-16"></span>
<span id="cb279-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...)</span>
<span id="cb279-18">  }</span>
<span id="cb279-19">}</span>
<span id="cb279-20"></span>
<span id="cb279-21">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb279-22">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb279-23">}</span>
<span id="cb279-24">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay_by</span>(f, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb279-25">h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">delay_by</span>(f, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb279-26"></span>
<span id="cb279-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb279-28">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>()</span>
<span id="cb279-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">h</span>()</span>
<span id="cb279-30">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    user  system elapsed 
#&gt;   0.001   0.000   1.007</code></pre>
</div>
<div class="sourceCode cell-code" id="cb281" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb281-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">system.time</span>({</span>
<span id="cb281-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>()</span>
<span id="cb281-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb281-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>()</span>
<span id="cb281-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    user  system elapsed 
#&gt;   0.005   0.000   2.010</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions:</p>
<p>To ensure that the function created by <code>delay_by()</code> waits that a certain amount of time has passed since its last execution, we incorporate three little changes into our new <code>delay_atleast()</code> as indicated in the corresponding comments below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb283" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb283-1">delay_atleast <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(amount, f) {</span>
<span id="cb283-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(f)</span>
<span id="cb283-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(amount)</span>
<span id="cb283-4"></span>
<span id="cb283-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the last time the function was run</span></span>
<span id="cb283-6">  last_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb283-7"></span>
<span id="cb283-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return modified "delay-aware" function</span></span>
<span id="cb283-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb283-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(last_time)) {</span>
<span id="cb283-11">      wait <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> (last_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> amount</span>
<span id="cb283-12">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (wait <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb283-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(wait)</span>
<span id="cb283-14">      }</span>
<span id="cb283-15">    }</span>
<span id="cb283-16"></span>
<span id="cb283-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the time after the function has finished</span></span>
<span id="cb283-18">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(last_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>())</span>
<span id="cb283-19"></span>
<span id="cb283-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(...)</span>
<span id="cb283-21">  }</span>
<span id="cb283-22">}</span></code></pre></div>
</div>
<p>Notes: this was tricky; I had to consult AR Solutions for an answer.</p>
<hr>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Typically it’s not the for loop itself that’s slow, but what you’re doing inside of it. A common culprit of slow loops is modifying a data structure, where each modification generates a copy. See Sections 2.5.1 and 24.6 for more details.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>exercises</category>
  <category>advanced-r</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-2.html</guid>
  <pubDate>Sun, 31 Jul 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Advanced R (Foundations)</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-1.html</link>
  <description><![CDATA[ 




<p>Workbook for completing quizzes and exercises from the “Foundations” chapters of <a href="https://adv-r.hadley.nz/index.html">Advanced R</a>, second edition, with comparisons to solutions from <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lobstr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(bench)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rlang)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from https://github.com/hadley/adv-r/blob/master/common.R</span></span>
<span id="cb1-6">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>opts_chunk<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#&gt;"</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fig.align =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span></span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11">knitr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>knit_hooks<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set</span>(</span>
<span id="cb1-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">small_mar =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(before, options, envir) {</span>
<span id="cb1-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (before) {</span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb1-15">    }</span>
<span id="cb1-16">  }</span>
<span id="cb1-17">)</span></code></pre></div>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This workbook includes answers and solutions to the quizzes and exercises from <a href="https://adv-r.hadley.nz/index.html">Advanced R</a> and <a href="https://advanced-r-solutions.rbind.io">Advanced R Solutions</a>, organized by chapter. It includes excerpts from both books, copied here.</p>
<p><strong>WARNING, SPOILERS!</strong> If you haven’t read Advanced R and intend to complete the quizzes and exercises, don’t read this notebook. It contains my (potentially wrong) answers to both.</p>
</section>
<section id="names-and-values" class="level1">
<h1>2 Names and values</h1>
<p>In R, it is important to understand the distinction between an object and its name. Doing so will help you:</p>
<ul>
<li>More accurately predict the performance and memory usage of your code.</li>
<li>Write faster code by avoiding accidental copies, a major source of slow code.</li>
<li>Better understand R’s functional programming tools.</li>
</ul>
<p>The goal of this chapter is to help you understand the distinction between names and values, and when R will copy an object.</p>
<section id="quiz" class="level2">
<h2 class="anchored" data-anchor-id="quiz">2 Quiz</h2>
<ol type="1">
<li>Given the following data frame, how do I create a new column called “3” that contains the sum of <code>1</code> and <code>2</code>? You may only use <code>$</code>, not <code>[[</code>. What makes <code>1</code>, <code>2</code>, and <code>3</code> challenging as variable names?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>Answer: use the following code.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(df, df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(df2) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>Using numbers as names is problematic due to them being interpreted as numeric constants by default.</p>
<hr>
<ol start="2" type="1">
<li>In the following code, how much memory does <code>y</code> occupy?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>)</span>
<span id="cb4-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(x, x, x)</span></code></pre></div>
</div>
<p>Answer: 3 times the size of x, 24 MB. Note: this is incorrect, as shown by <code>obj_size</code> and <code>obj_addr</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x110b00000"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x110b00000"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x110b00000"</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>On which line does <code>a</code> get copied in the following example?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10fc74668"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> a</span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10fc74668"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">b[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10fd3ef28"</code></pre>
</div>
</div>
<p>Answer: the third line (copy-on-write). [copy-on-modify]</p>
</section>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">2.2.2 Exercises</h2>
<ol type="1">
<li>Explain the relationship between <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> in the following code:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb21-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> a</span>
<span id="cb21-3">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> b</span>
<span id="cb21-4">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span></code></pre></div>
</div>
<p>Answer: a, b, and c all point to the same object (1:10). d points to an identical object at a different address.</p>
<p>AR Solutions: <code>a</code>, <code>b</code>, and <code>c</code> point to the same object (with the same address in memory). This object has the value <code>1:10</code>. <code>d</code> points to a different object with the same value.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10f505e10"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10f505e10"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10f505e10"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10f5f32e8"</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>The following code accesses the mean function in multiple ways. Do they all point to the same underlying function object? Verify this with <code>lobstr::obj_addr()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1">mean</span>
<span id="cb30-2">base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mean</span>
<span id="cb30-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span>
<span id="cb30-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalq</span>(mean)</span>
<span id="cb30-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.fun</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
</div>
<p>Check the <code>obj_addr</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c39a538"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb33-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c39a538"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb35-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c39a538"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">evalq</span>(mean))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c39a538"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">match.fun</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c39a538"</code></pre>
</div>
</div>
<p>Answer: they do.</p>
<p>AR Solutions: Yes, they point to the same object. We confirm this by inspecting the address of the underlying function object.</p>
<hr>
<ol start="3" type="1">
<li>By default, base R data import functions, like <code>read.csv()</code>, will automatically convert non-syntactic names to syntactic ones. Why might this be problematic? What option allows you to suppress this behaviour?</li>
</ol>
<p>Answer: this could introduce problematic names, like <code>1</code>. Setting <code>check.names = FALSE</code> suppresses this behavior.</p>
<p>AR Solutions: Column names are often data, and the underlying <code>make.names()</code> transformation is non-invertible, so the default behaviour corrupts data. To avoid this, set <code>check.names = FALSE</code>.</p>
<hr>
<ol start="4" type="1">
<li>What rules does <code>make.names()</code> use to convert non-syntactic names into syntactic ones?</li>
</ol>
<p>Answer: from <code>?make.names</code>:</p>
<blockquote class="blockquote">
<p>The character “X” is prepended if necessary. All invalid characters are translated to “.”. A missing value is translated to “NA”. Names which match R keywords have a dot appended to them. Duplicated values are altered by make.unique.</p>
</blockquote>
<p>AR Solutions: A valid name must start with a letter or a dot (not followed by a number) and may further contain numbers and underscores (<code>"_"</code>s are allowed since R version 1.9.0).</p>
<p>Three main mechanisms ensure syntactically valid names (see <code>?make.names</code>):</p>
<ol type="1">
<li>Names that do not start with a letter or a dot will be prepended with an <code>"X"</code>. The same holds for names that begin with a dot followed by a number.</li>
<li>Additionally, non-valid characters are replaced by a dot.</li>
<li>Reserved R keywords (see <code>?reserved</code>) are suffixed by a dot.</li>
</ol>
<p>Interestingly, some of these transformations are influenced by the current locale. From <code>?make.names</code>:</p>
<blockquote class="blockquote">
<p>The definition of a letter depends on the current locale, but only ASCII digits are considered to be digits.</p>
</blockquote>
<hr>
<ol start="5" type="1">
<li>I slightly simplified the rules that govern syntactic names. Why is <code>.123e1</code> not a syntactic name? Read <code>?make.names</code> for the full details.</li>
</ol>
<p>Answer: from <code>?make.names</code>:</p>
<blockquote class="blockquote">
<p>A syntactically valid name consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number. Names such as “.2way” are not valid, and neither are the reserved words.</p>
</blockquote>
<p>AR Solutions: <code>.123e1</code> is not a syntactic name, because it starts with one dot which is followed by a number. This makes it a double, <code>1.23</code>.</p>
<hr>
</section>
<section id="exercises-1" class="level2">
<h2 class="anchored" data-anchor-id="exercises-1">2.3.6 Exercises</h2>
<ol type="1">
<li>Why is <code>tracemem(1:10)</code> not useful?</li>
</ol>
<p>Answer: this is tracing an ‘immutable’ object which will always have the same address.</p>
<p>AR Solutions: When <code>1:10</code> is called an object with an address in memory is created, but it is not bound to a name. Therefore, the object cannot be called or manipulated from R. As no copies will be made, it is not useful to track the object for copying.</p>
<hr>
<ol start="2" type="1">
<li>Explain why <code>tracemem()</code> shows two copies when you run this code. Hint: carefully look at the difference between this code and the code shown earlier in the section.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span>
<span id="cb41-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L)</span>
<span id="cb41-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "&lt;0x10ae53848&gt;"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb43-1">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; tracemem[0x10ae53848 -&gt; 0x11a245b88]: eval eval eval_with_user_handlers withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers withCallingHandlers handle_error process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main 
#&gt; tracemem[0x11a245b88 -&gt; 0x11a0cb268]: eval eval eval_with_user_handlers withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers withCallingHandlers handle_error process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main</code></pre>
</div>
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb45-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">untracemem</span>(x)</span></code></pre></div>
</div>
<p>Answer: unclear. The behavior in R 4.2.0 seems to have changed, since this code shows two copies:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb46-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span>
<span id="cb46-2">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb46-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "&lt;0x10b8871f8&gt;"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb48-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb48-2">y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; tracemem[0x10b8871f8 -&gt; 0x10b88b108]: eval eval eval_with_user_handlers withVisible withCallingHandlers handle timing_fn evaluate_call &lt;Anonymous&gt; evaluate in_dir in_input_dir eng_r block_exec call_block process_group.block process_group withCallingHandlers withCallingHandlers handle_error process_file &lt;Anonymous&gt; &lt;Anonymous&gt; execute .main</code></pre>
</div>
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb50-1">y[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>L</span>
<span id="cb50-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">untracemem</span>(x)</span></code></pre></div>
</div>
<p>AR Solutions: Initially the vector <code>x</code> has integer type. The replacement call assigns a double to the third element of <code>x</code>, which triggers copy-on-modify.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb51-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L)</span>
<span id="cb51-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(x)</span>
<span id="cb51-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;0x66a4a70&gt;</span></span>
<span id="cb51-4"></span>
<span id="cb51-5">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb51-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; tracemem[0x55eec7b3af38 -&gt; 0x55eec774cc18]:</span></span></code></pre></div>
</div>
<p>We can avoid the copy by sub-assigning an integer instead of a double:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb52-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>L)</span>
<span id="cb52-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(x)</span>
<span id="cb52-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; &lt;0x55eec6940ae0&gt;</span></span>
<span id="cb52-4"></span>
<span id="cb52-5">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L</span></code></pre></div>
</div>
<p>Please be aware that running this code in RStudio will result in additional copies because of the reference from the environment pane.</p>
<hr>
<ol start="3" type="1">
<li>Sketch out the relationship between the following objects:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb53-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb53-2">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(a, a)</span>
<span id="cb53-3">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(b, a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb53-4"></span>
<span id="cb53-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first object"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "first object"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb55-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10c915f30"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb57-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10c915f30"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb59-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10c915f30"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb61-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(c[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10c915f30"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb63-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"second object"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "second object"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb65-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(b)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c5f2a08"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb67-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(c[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12c5f2a08"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb69-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"third object"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "third object"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb71-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x10dd164a8"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb73-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fourth object (?)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "fourth object (?)"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb75-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(c[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "0x12cf92cf0"</code></pre>
</div>
</div>
<p>Answer: four different objects with multiple names.</p>
<p>AR Solutions: <code>a</code> contains a reference to an address with the value <code>1:10</code>. <code>b</code> contains a list of two references to the same address as <code>a</code>. <code>c</code> contains a list of <code>b</code> (containing two references to <code>a</code>), <code>a</code> (containing the same reference again) and a reference pointing to a different address containing the same value (<code>1:10</code>).</p>
<hr>
<ol start="4" type="1">
<li>What happens when you run this code? Draw a picture.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb77-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb77-2"></span>
<span id="cb77-3">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span>
<span id="cb77-4"></span>
<span id="cb77-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █ [1:0x12cc0fa48] &lt;list&gt; 
#&gt; ├─[2:0x12a360b58] &lt;int&gt; 
#&gt; └─█ [3:0x10e84ae88] &lt;list&gt; 
#&gt;   └─[2:0x12a360b58]</code></pre>
</div>
</div>
<p>Initially x is a list of one element, an int vector 1:10. Then a second list element is added, which points to the original int vector.</p>
<p>AR Solutions: The initial reference tree of <code>x</code> shows that the name <code>x</code> binds to a list object. This object contains a reference to the integer vector <code>1:10</code>. When <code>x</code> is assigned to an element of itself, copy-on-modify takes place and the list is copied to a new address in memory. The list object previously bound to <code>x</code> is now referenced in the newly created list object. It is no longer bound to a name. The integer vector is referenced twice.</p>
<hr>
</section>
<section id="exercises-2" class="level2">
<h2 class="anchored" data-anchor-id="exercises-2">2.4.1 Exercises</h2>
<ol type="1">
<li>In the following example, why are <code>object.size(y)</code> and <code>obj_size(y)</code> so radically different? Consult the documentation of <code>object.size()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb79-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb79-2"></span>
<span id="cb79-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">object.size</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8005648 bytes</code></pre>
</div>
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb81-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 80.90 kB</code></pre>
</div>
</div>
<p>Answer: <code>object.size()</code> “does not detect if elements of a list are shared”, which is the case here. That is, it does not detect the list has been replicated 100 times, and overestimates by a factor of 100 compared to <code>object_size()</code>.</p>
<p>AR Solutions: <code>object.size()</code> doesn’t account for shared elements within lists. Therefore, the results differ by a factor of ~ 100.</p>
<hr>
<ol start="2" type="1">
<li>Take the following list. Why is its size somewhat misleading?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb83-1">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(mean, sd, var)</span>
<span id="cb83-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(funs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 17.55 kB</code></pre>
</div>
</div>
<p>Answer: it doesn’t seem misleading to me, but the list includes the function objects, not the return values. Also, it calculates the size discarding the overlap between the functions. Per the code below, there is some:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb85-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(sd) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(var)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 18.08 kB</code></pre>
</div>
</div>
<p>AR Solutions: All three functions are built-in to R as part of the <code>{base}</code> and <code>{stats}</code> packages and hence always available. So, what does it mean to measure the size of something that’s already included in R?</p>
<p>(There’s typically a more general question about what you want to know when you ask for the size of something — do you want to know how much data you’d need to send to communicate the object to someone else (e.g.&nbsp;serialise it), or do you want to know how much memory you’d free if you deleted it?)</p>
<hr>
<ol start="3" type="1">
<li>Predict the output of the following code:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb87-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>)</span>
<span id="cb87-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(a) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 8,000,048 B ~ 8MB</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb89-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correct: from example above, runif(1e6) ~= 8MB</span></span>
<span id="cb89-2"></span>
<span id="cb89-3">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(a, a)</span>
<span id="cb89-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slightly larger than obj_size(a)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb91-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correct: two lists containing numeric vectors</span></span>
<span id="cb91-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(a, b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># slightly larger than obj_size(b)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 8.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb93-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrong: a is entirely contained within b</span></span>
<span id="cb93-2"></span>
<span id="cb93-3">b[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb93-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy of b, same size</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 16.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb95-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrong: double, since R copies an entire column, this adds the size of runif(1e6)</span></span>
<span id="cb95-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(a, b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># still mostly overlaps, slightly larger than previous obj_size(a, b)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 16.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb97-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrong: a is still entirely contained with b</span></span>
<span id="cb97-2"></span>
<span id="cb97-3">b[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb97-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy of b, same size</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 16.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb99" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb99-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrong: same size since it's still 2 numeric vectors of 1e6 length</span></span>
<span id="cb99-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_size</span>(a, b) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># still mostly overlaps, slightly larger than previous obj_size(a, b)</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 24.00 MB</code></pre>
</div>
<div class="sourceCode cell-code" id="cb101" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb101-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrong: there is no longer any overlap, so the size of obj_size(a, b) = obj_size(a) = obj_size(b)</span></span></code></pre></div>
</div>
<p>Answer: answers inline.</p>
<p>AR Solutions:</p>
<p><code>a &lt;- runif(1e6)</code>:</p>
<ul>
<li>In R (on most platforms) a length-0 vector has 48 bytes of overhead.</li>
<li>A single double takes up an additional 8 bytes of memory.</li>
<li>So, a 1 million double should take up 8,000,048 bytes.</li>
</ul>
<p>For <code>b &lt;- list(a, a)</code> both list elements contain references to the same memory address. Therefore, no additional memory is required for the second list element. The list itself requires 64 bytes, 48 bytes for an empty list and 8 bytes for each element (<code>obj_size(vector("list", 2))</code>). This lets us predict 8,000,048 B + 64 B = 8,000,112 B.</p>
<p><code>b[[1]][[1]] &lt;- 10</code>: When we modify the first element of <code>b[[1]]</code> copy-on-modify occurs. Both elements will still have the same size (8,000,040 B), but the first one gets a new address in memory. As <code>b</code>’s elements don’t share references anymore, its object size adds up to the sum of the elements and the length-2 list: 8,000,048 B + 8,000,048 B + 64 B = 16,000,160 B (16 MB). The second element of <code>b</code> still references the same address as <code>a</code>, so the combined size of <code>a</code> and <code>b</code> is the same as <code>b</code>.</p>
<p><code>b[[2]][[1]] &lt;- 10</code>: When we modify the second element of <code>b</code>, this element will also point to a new memory address. This does not affect the size of the list. However, as <code>b</code> doesn’t share references with <code>a</code> anymore, the memory usage of the combined objects increases.</p>
<hr>
</section>
<section id="exercises-3" class="level2">
<h2 class="anchored" data-anchor-id="exercises-3">2.5.3 Exercises</h2>
<ol type="1">
<li>Explain why the following code doesn’t create a circular list.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb102-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb102-2">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x</span></code></pre></div>
</div>
<p>Answer: the name x is assigned to the empty list, and then the first element of x is mapped to the object that x points to, the empty list.</p>
<p>AR Solutions: In this situation copy-on-modify prevents the creation of a circular list. Let us step through the details:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb103-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creates initial object</span></span>
<span id="cb103-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(x)</span>
<span id="cb103-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "0x55862f23ab80"</span></span>
<span id="cb103-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(x)</span>
<span id="cb103-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "&lt;0x55862f23ab80&gt;"</span></span>
<span id="cb103-6">x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy-on-modify triggers new copy</span></span>
<span id="cb103-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; tracemem[0x55862f23ab80 -&gt; 0x55862e8ce028]:</span></span>
<span id="cb103-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(x) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copied object has new memory address</span></span>
<span id="cb103-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "0x55862e8ce028"</span></span>
<span id="cb103-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">obj_addr</span>(x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list element contains old memory address</span></span>
<span id="cb103-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "0x55862f23ab80"</span></span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>Wrap the two methods for subtracting medians into two functions, then use the ‘bench’ package <span class="citation" data-cites="bench">[@bench]</span> to carefully compare their speeds. How does performance change as the number of columns increase?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb104-1">x_medians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(ncol) {</span>
<span id="cb104-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e4</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> ncol))</span>
<span id="cb104-3">  medians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(x, median, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb104-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">medians =</span> medians))</span>
<span id="cb104-5">}</span>
<span id="cb104-6"></span>
<span id="cb104-7">df_medians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, medians) {</span>
<span id="cb104-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># subtract medians using data.frame method</span></span>
<span id="cb104-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(medians)) {</span>
<span id="cb104-10">    x[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> medians[[i]]</span>
<span id="cb104-11">  }</span>
<span id="cb104-12">  x</span>
<span id="cb104-13">}</span>
<span id="cb104-14"></span>
<span id="cb104-15">ls_medians <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, medians) {</span>
<span id="cb104-16">  y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.list</span>(x)</span>
<span id="cb104-17"></span>
<span id="cb104-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(medians)) {</span>
<span id="cb104-19">    y[[i]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> y[[i]] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> medians[[i]]</span>
<span id="cb104-20">  }</span>
<span id="cb104-21">  y</span>
<span id="cb104-22">}</span>
<span id="cb104-23"></span>
<span id="cb104-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># confirm they both work</span></span>
<span id="cb104-25">xm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_medians</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb104-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;             X1          X2          X3           X4          X5
#&gt; 1   0.43687555 -0.15952321 -0.11049405 -0.447574305  0.09157020
#&gt; 2   0.08749675 -0.10133035  0.48789948 -0.305568328 -0.02170975
#&gt; 3  -0.03890698  0.20359297  0.10053737 -0.103263463  0.02597145
#&gt; 4   0.34391284 -0.49424745  0.42974962 -0.296187179  0.34387263
#&gt; 5  -0.21085900 -0.08537066  0.19801263  0.182952770  0.07282162
#&gt; 6   0.11524745 -0.05050875  0.06630594 -0.004480693 -0.04276207
#&gt; 7   0.25788382 -0.32080371 -0.10849797  0.392610683  0.12800799
#&gt; 8   0.30113996  0.39646219  0.16874994 -0.402945732 -0.12120135
#&gt; 9  -0.04427495 -0.21338661  0.14661082  0.363260208 -0.25625303
#&gt; 10 -0.25597920 -0.08442713  0.37669364  0.126202677  0.48536194</code></pre>
</div>
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb106-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;             X1          X2          X3           X4          X5
#&gt; 1   0.43687555 -0.15952321 -0.11049405 -0.447574305  0.09157020
#&gt; 2   0.08749675 -0.10133035  0.48789948 -0.305568328 -0.02170975
#&gt; 3  -0.03890698  0.20359297  0.10053737 -0.103263463  0.02597145
#&gt; 4   0.34391284 -0.49424745  0.42974962 -0.296187179  0.34387263
#&gt; 5  -0.21085900 -0.08537066  0.19801263  0.182952770  0.07282162
#&gt; 6   0.11524745 -0.05050875  0.06630594 -0.004480693 -0.04276207
#&gt; 7   0.25788382 -0.32080371 -0.10849797  0.392610683  0.12800799
#&gt; 8   0.30113996  0.39646219  0.16874994 -0.402945732 -0.12120135
#&gt; 9  -0.04427495 -0.21338661  0.14661082  0.363260208 -0.25625303
#&gt; 10 -0.25597920 -0.08442713  0.37669364  0.126202677  0.48536194</code></pre>
</div>
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb108-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># benchmark</span></span>
<span id="cb108-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 df_medians(xm$x, xm$medians)   33.1µs   47.9µs    21409.     391KB     317.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb110-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 ls_medians(xm$x, xm$medians)   8.53µs   23.4µs    42221.     391KB     474.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb112-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># as.data.frame introduces significant overhead</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                             min median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                           &lt;bch&gt; &lt;bch:&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 as.data.frame(ls_medians(xm$x, xm$m… 108µs  125µs     8215.     391KB     94.3</code></pre>
</div>
</div>
<p>Answer: with 5 columns, the list method is about twice as fast.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb114-1">xm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_medians</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb114-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 df_medians(xm$x, xm$medians)   58.5µs   78.6µs    12454.     391KB     147.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb116-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 ls_medians(xm$x, xm$medians)   11.1µs   33.7µs    34530.     391KB     381.</code></pre>
</div>
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb118-1">xm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_medians</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb118-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">df_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 df_medians(xm$x, xm$medians)    113µs    136µs     7358.     400KB     88.3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb120-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mark</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls_medians</span>(xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>x, xm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>medians))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; # A tibble: 1 × 6
#&gt;   expression                        min   median `itr/sec` mem_alloc `gc/sec`
#&gt;   &lt;bch:expr&gt;                   &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;
#&gt; 1 ls_medians(xm$x, xm$medians)   12.9µs   29.6µs    35733.     392KB     401.</code></pre>
</div>
</div>
<p>With 10 columns, the list method is 3 times as fast. With 20, the list method is 5 times as fast. So, the list method is near constant time regardless of columns, whereas the data.frame method scales linearly with the number of columns.</p>
<p>AR Solutions:</p>
<p>When working directly with the data frame, the execution time grows quadratically with the number of columns in the input data. This is because (e.g.) the first column must be copied n times, the second column n-1 times, and so on. When working with a list, the execution time increases only linearly.</p>
<p>Obviously in the long run, linear growth creates shorter run-times, but there is some cost to this strategy — we have to convert between data structures with as.list() and list2DF(). Even though this is fast and probably doesn’t hurt much, the improved approach doesn’t really pay off in this scenario until we get to a data frame that is about 300 columns wide (with the exact value depending on the characteristics of the system running the code).</p>
<hr>
<ol start="3" type="1">
<li>What happens if you attempt to use <code>tracemem()</code> on an environment?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb122-1">e <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> rlang<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb122-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tracemem</span>(e))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in tracemem(e) : 
#&gt;   'tracemem' is not useful for promise and environment objects</code></pre>
</div>
</div>
<p>Answer: it throws an error!</p>
<p>AR Solutions: <code>tracemem()</code> cannot be used to mark and trace environments.</p>
<p>The error occurs because “it is not useful to trace NULL, environments, promises, weak references, or external pointer objects, as these are not duplicated” (see <code>?tracemem</code>). Environments are always modified in place.</p>
<hr>
</section>
</section>
<section id="vectors" class="level1">
<h1>3 Vectors</h1>
<p>This chapter discusses the most important family of data types in base R: vectors. While you’ve probably already used many (if not all) of the different types of vectors, you may not have thought deeply about how they’re interrelated. In this chapter, I won’t cover individual vectors types in too much detail, but I will show you how all the types fit together as a whole. If you need more details, you can find them in R’s documentation.</p>
<p>Vectors come in two flavours: atomic vectors and lists. They differ in terms of their elements’ types: for atomic vectors, all elements must have the same type; for lists, elements can have different types. While not a vector, <code>NULL</code> is closely related to vectors and often serves the role of a generic zero length vector. This diagram, which we’ll be expanding on throughout this chapter, illustrates the basic relationships:</p>
<p>Every vector can also have <strong>attributes</strong>, which you can think of as a named list of arbitrary metadata. Two attributes are particularly important. The <strong>dimension</strong> attribute turns vectors into matrices and arrays and the <strong>class</strong> attribute powers the S3 object system. While you’ll learn how to use S3 in Chapter 13, here you’ll learn about some of the most important S3 vectors: factors, date and times, data frames, and tibbles. And while 2D structures like matrices and data frames are not necessarily what come to mind when you think of vectors, you’ll also learn why R considers them to be vectors.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb124-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="exercises-4" class="level2">
<h2 class="anchored" data-anchor-id="exercises-4">3.2.5 Exercises</h2>
<ol type="1">
<li>How do you create raw and complex scalars? (See <code>?raw</code> and <code>?complex</code>.)</li>
</ol>
<p>Answer: using either <code>raw()</code>, <code>complex()</code>, or <code>as.raw()</code>, <code>as.complex()</code>.</p>
<p>AR Solutions: In R, scalars are represented as vectors of length one. However, there’s no built-in syntax like there is for logicals, integers, doubles, and character vectors to create individual raw and complex values. Instead, you have to create them by calling a function. For raw vectors you can use either <code>as.raw()</code> or <code>charToRaw()</code> to create them from numeric or character values.</p>
<p>In the case of complex numbers, real and imaginary parts may be provided directly to the <code>complex()</code> constructor. You can create purely imaginary numbers (e.g.) <code>1i</code>, but there is no way to create complex numbers without <code>+</code> (e.g.&nbsp;<code>1i + 1</code>).</p>
<hr>
<ol start="2" type="1">
<li>Test your knowledge of the vector coercion rules by predicting the output of the following uses of <code>c()</code>:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb125-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1.0, 0.0 - double</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb127-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "a", "1" - character</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "1"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb129-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1L, 1L - integer</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb131-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "double"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb133-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb135-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
</div>
<p>Answer: guesses inline. [correct!]</p>
<p>AR Solutions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb137-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be coerced to double    -&gt; 1 0</span></span>
<span id="cb137-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be coerced to character -&gt; "a" "1"</span></span>
<span id="cb137-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># will be coerced to integer   -&gt; 1 1</span></span></code></pre></div>
</div>
<hr>
<ol start="3" type="1">
<li>Why is <code>1 == "1"</code> true? Why is <code>-1 &lt; FALSE</code> true? Why is <code>"one" &lt; 2</code> false?</li>
</ol>
<p>Answers:</p>
<ul>
<li><code>1 == "1"</code>: the 1 is coerced to “1”</li>
<li><code>-1 &lt; FALSE</code>: FALSE is coerced to 0</li>
<li>`“one” &lt; 2: the 2 is coerced to “2”</li>
</ul>
<p>AR Solutions: These comparisons are carried out by operator-functions (<code>==</code>, <code>&lt;</code>), which coerce their arguments to a common type. In the examples above, these types will be character, double and character: <code>1</code> will be coerced to <code>"1"</code>, <code>FALSE</code> is represented as <code>0</code> and <code>2</code> turns into <code>"2"</code> (and numbers precede letters in lexicographic order (may depend on locale)).</p>
<hr>
<ol start="4" type="1">
<li>Why is the default missing value, <code>NA</code>, a logical vector? What’s special about logical vectors? (Hint: think about <code>c(FALSE, NA_character_)</code>.)</li>
</ol>
<p>Answer: NA must be logical so that it can exist in a logical vector.</p>
<p>AR Solutions: The presence of missing values shouldn’t affect the type of an object. Recall that there is a type-hierarchy for coercion from character → double → integer → logical. When combining <code>NA</code>s with other atomic types, the <code>NA</code>s will be coerced to integer (<code>NA_integer_</code>), double (<code>NA_real_</code>) or character (<code>NA_character_</code>) and not the other way round. If <code>NA</code> were a character and added to a set of other values all of these would be coerced to character as well.</p>
<hr>
<ol start="5" type="1">
<li>Precisely what do <code>is.atomic()</code>, <code>is.numeric()</code>, and <code>is.vector()</code> test for?</li>
</ol>
<p>Answers:</p>
<ul>
<li><code>is.atomic(x)</code>: tests if x is an atomic vector (logical, integer, numeric, complex, character, and raw) - is <code>FALSE</code> for lists</li>
<li><code>is.numeric(x)</code>: tests if x is an atomic numeric vector</li>
<li><code>is.vector(x, mode = "any")</code>: tests if x is an atomic vector OR a list or expression</li>
</ul>
<p>AR Solutions: The documentation states that:</p>
<ul>
<li><code>is.atomic()</code> tests if an object is an atomic vector (as defined in <em>Advanced R</em>) or is <code>NULL</code> (!).</li>
<li><code>is.numeric()</code> tests if an object has type integer or double and is not of class <code>factor</code>, <code>Date</code>, <code>POSIXt</code> or <code>difftime</code>.</li>
<li><code>is.vector()</code> tests if an object is a vector (as defined in <em>Advanced R</em>) or an expression and has no attributes, apart from names.</li>
</ul>
<p>Atomic vectors are defined in <em>Advanced R</em> as objects of type logical, integer, double, complex, character or raw. Vectors are defined as atomic vectors or lists.</p>
<hr>
</section>
<section id="exercises-5" class="level2">
<h2 class="anchored" data-anchor-id="exercises-5">3.3.4 Exercises</h2>
<ol type="1">
<li>How is <code>setNames()</code> implemented? How is <code>unname()</code> implemented? Read the source code.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb138-1">setNames</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (object = nm, nm) 
#&gt; {
#&gt;     names(object) &lt;- nm
#&gt;     object
#&gt; }
#&gt; &lt;bytecode: 0x10ccb5a28&gt;
#&gt; &lt;environment: namespace:stats&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb140-1">unname</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (obj, force = FALSE) 
#&gt; {
#&gt;     if (!is.null(names(obj))) 
#&gt;         names(obj) &lt;- NULL
#&gt;     if (!is.null(dimnames(obj)) &amp;&amp; (force || !is.data.frame(obj))) 
#&gt;         dimnames(obj) &lt;- NULL
#&gt;     obj
#&gt; }
#&gt; &lt;bytecode: 0x10abe0520&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>Answer: using <code>names()</code>, and <code>dimnames()</code> for <code>unname()</code>.</p>
<p>AR Solutions:</p>
<p>Because the data argument comes first, <code>setNames()</code> also works well with the magrittr-pipe operator. When no first argument is given, the result is a named vector (this is rather untypical as required arguments usually come first):</p>
<p><code>unname()</code> removes existing names (or dimnames) by setting them to <code>NULL</code>.</p>
<hr>
<ol start="2" type="1">
<li>What does <code>dim()</code> return when applied to a 1-dimensional vector? When might you use <code>NROW()</code> or <code>NCOL()</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb142-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb144-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb146-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NROW</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 12</code></pre>
</div>
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb148-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb150-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">NCOL</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
</div>
<p>Answers: <code>NULL</code>. <code>NROW</code> and <code>NCOL</code> are useful when comparing <code>NULL</code> dimensional vectors with matrices and arrays.</p>
<p>AR Solutions: From <code>?nrow</code>:</p>
<blockquote class="blockquote">
<p><code>dim()</code> will return <code>NULL</code> when applied to a 1d vector.</p>
</blockquote>
<p>One may want to use <code>NROW()</code> or <code>NCOL()</code> to handle atomic vectors, lists and NULL values in the same way as one column matrices or data frames.</p>
<hr>
<ol start="3" type="1">
<li>How would you describe the following three objects? What makes them different from <code>1:5</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb152-1">x1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb152-2">x2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb152-3">x3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb152-4"></span>
<span id="cb152-5">x1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; , , 1
#&gt; 
#&gt;      [,1]
#&gt; [1,]    1
#&gt; 
#&gt; , , 2
#&gt; 
#&gt;      [,1]
#&gt; [1,]    2
#&gt; 
#&gt; , , 3
#&gt; 
#&gt;      [,1]
#&gt; [1,]    3
#&gt; 
#&gt; , , 4
#&gt; 
#&gt;      [,1]
#&gt; [1,]    4
#&gt; 
#&gt; , , 5
#&gt; 
#&gt;      [,1]
#&gt; [1,]    5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb154-1">x2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; , , 1
#&gt; 
#&gt;      [,1] [,2] [,3] [,4] [,5]
#&gt; [1,]    1    2    3    4    5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb156-1">x3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; , , 1
#&gt; 
#&gt;      [,1]
#&gt; [1,]    1
#&gt; [2,]    2
#&gt; [3,]    3
#&gt; [4,]    4
#&gt; [5,]    5</code></pre>
</div>
</div>
<p>Answer: They have a 3-dimensional structure, arranged in different ways, along the z, x, and y axis.</p>
<p>AR Solutions: These are all “one dimensional”. If you imagine a 3d cube, <code>x1</code> is in the x-dimension, <code>x2</code> is in the y-dimension, and <code>x3</code> is in the z-dimension. In contrast to <code>1:5</code>, <code>x1</code>, <code>x2</code> and <code>x3</code> have a <code>dim</code> attribute.</p>
<hr>
<ol start="4" type="1">
<li>An early draft used this code to illustrate <code>structure()</code>:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb158-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">structure</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">comment =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my attribute"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 2 3 4 5</code></pre>
</div>
</div>
<pre><code>But when you print that object you don't see the comment attribute.
Why? Is the attribute missing, or is there something else special about
it? (Hint: try using help.)</code></pre>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb161" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb161-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amber"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] green
#&gt; Levels: red amber green</code></pre>
</div>
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb163-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amber"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; structure(3L, levels = c("red", "amber", "green"), class = "factor")</code></pre>
</div>
</div>
<p>Answer: print doesn’t display the attributes for arbitrary structures, only defined classes, like factors (for example, above).</p>
<p>AR Solutions: The documentation states (see <code>?comment</code>):</p>
<blockquote class="blockquote">
<p>Contrary to other attributes, the comment is not printed (by print or print.default).</p>
</blockquote>
<p>Also, from <code>?attributes</code>:</p>
<blockquote class="blockquote">
<p>Note that some attributes (namely class, comment, dim, dimnames, names, row.names and tsp) are treated specially and have restrictions on the values which can be set.</p>
</blockquote>
<hr>
</section>
<section id="exercises-6" class="level2">
<h2 class="anchored" data-anchor-id="exercises-6">3.4.5 Exercises</h2>
<ol type="1">
<li>What sort of object does <code>table()</code> return? What is its type? What attributes does it have? How does the dimensionality change as you tabulate more variables?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb165-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb165-2">a_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(a, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(a))</span>
<span id="cb165-3">a_table</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    
#&gt; a   a b c
#&gt;   a 0 1 0
#&gt;   b 0 0 1
#&gt;   c 1 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb167-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(a_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "integer"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb169" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb169-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(a_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $dim
#&gt; [1] 3 3
#&gt; 
#&gt; $dimnames
#&gt; $dimnames$a
#&gt; [1] "a" "b" "c"
#&gt; 
#&gt; $dimnames[[2]]
#&gt; [1] "a" "b" "c"
#&gt; 
#&gt; 
#&gt; $class
#&gt; [1] "table"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb171-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb171-2">b_table <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(b, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(b))</span>
<span id="cb171-3">b_table</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    
#&gt; b   a b c d
#&gt;   a 0 0 0 1
#&gt;   b 0 0 1 0
#&gt;   c 1 0 0 0
#&gt;   d 0 1 0 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb173-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(b_table)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $dim
#&gt; [1] 4 4
#&gt; 
#&gt; $dimnames
#&gt; $dimnames$b
#&gt; [1] "a" "b" "c" "d"
#&gt; 
#&gt; $dimnames[[2]]
#&gt; [1] "a" "b" "c" "d"
#&gt; 
#&gt; 
#&gt; $class
#&gt; [1] "table"</code></pre>
</div>
</div>
<p>Answer: an object of class “table”, an array of integer values, with type “integer”. Attributes listed above, the dimensionality is always n by n, where n is the number of variables tabulated.</p>
<p>AR Solutions: <code>table()</code> returns a contingency table of its input variables. It is implemented as an integer vector with class <code>table</code> and dimensions (which makes it act like an array). Its attributes are <code>dim</code> (dimensions) and <code>dimnames</code> (one name for each input column). The dimensions correspond to the number of unique values (factor levels) in each input variable.</p>
<hr>
<ol start="2" type="1">
<li>What happens to a factor when you modify its levels?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb175-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(letters)</span>
<span id="cb175-2">f1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z
#&gt; Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb177-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(f1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(f1))</span>
<span id="cb177-2">f1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] z y x w v u t s r q p o n m l k j i h g f e d c b a
#&gt; Levels: z y x w v u t s r q p o n m l k j i h g f e d c b a</code></pre>
</div>
</div>
<p>Answer: <del>the factor will remain the same, but the attributes will change.</del> the factor and its levels are reversed.</p>
<p>AR Solutions: The underlying integer values stay the same, but the levels are changed, making it look like the data has changed.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb179-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(letters)</span>
<span id="cb179-2">f1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z
#&gt; Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb181-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.integer</span>(f1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
#&gt; [26] 26</code></pre>
</div>
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb183-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(f1) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">levels</span>(f1))</span>
<span id="cb183-2">f1</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] z y x w v u t s r q p o n m l k j i h g f e d c b a
#&gt; Levels: z y x w v u t s r q p o n m l k j i h g f e d c b a</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>What does this code do? How do <code>f2</code> and <code>f3</code> differ from <code>f1</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb185-1">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(letters))</span>
<span id="cb185-2">f2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] z y x w v u t s r q p o n m l k j i h g f e d c b a
#&gt; Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre>
</div>
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb187-1">f3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(letters, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">levels =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(letters))</span>
<span id="cb187-2">f3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z
#&gt; Levels: z y x w v u t s r q p o n m l k j i h g f e d c b a</code></pre>
</div>
</div>
<p>Answer: both create a reversed list of letters. f3 also has reversed levels but f2 does not. (correct!)</p>
<p>AR Solutions: For <code>f2</code> and <code>f3</code> either the order of the factor elements <em>or</em> its levels are being reversed. For <code>f1</code> both transformations are occurring.</p>
<hr>
</section>
<section id="exercises-7" class="level2">
<h2 class="anchored" data-anchor-id="exercises-7">3.5.4 Exercises</h2>
<ol type="1">
<li>List all the ways that a list differs from an atomic vector.</li>
</ol>
<p>Answers:</p>
<ul>
<li>Each element can be a different type</li>
<li>Each element is a reference to an object</li>
<li>List size can be smaller since elements are references</li>
<li>Lists can contain other lists</li>
</ul>
<p>AR Solutions: To summarise:</p>
<ul>
<li>Atomic vectors are always homogeneous (all elements must be of the same type). Lists may be heterogeneous (the elements can be of different types) as described in the <a href="https://adv-r.hadley.nz/vectors-chap.html#introduction">introduction of the vectors chapter</a>.</li>
<li>Atomic vectors point to one address in memory, while lists contain a separate reference for each element. (This was described in the list sections of the <a href="https://adv-r.hadley.nz/vectors-chap.html#lists">vectors</a> and the <a href="https://adv-r.hadley.nz/names-values.html#list-references">names and values</a> chapters.)</li>
<li>Subsetting with out-of-bounds and <code>NA</code> values leads to different output. For example, <code>[</code> returns <code>NA</code> for atomics and <code>NULL</code> for lists. (This is described in more detail within the <a href="https://adv-r.hadley.nz/subsetting.html">subsetting chapter</a>.)</li>
</ul>
<hr>
<ol start="2" type="1">
<li>Why do you need to use <code>unlist()</code> to convert a list to an atomic vector? Why doesn’t <code>as.vector()</code> work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb189-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb191-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.vector</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; list(1:4)</code></pre>
</div>
</div>
<p>Answer: a list is considered a vector by <code>as.vector()</code>.</p>
<p>AR Solutions: A list is already a vector, though not an atomic one!</p>
<hr>
<ol start="3" type="1">
<li>Compare and contrast <code>c()</code> and <code>unlist()</code> when combining a date and date-time into a single vector.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb193-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">date =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-06-25"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">datetime =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022-06-25 09:59:40 CDT"</span>))</span>
<span id="cb193-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; list(date = structure(19168, class = "Date"), datetime = structure(1656169180, class = c("POSIXct", 
#&gt; "POSIXt"), tzone = ""))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb195-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(d))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; list(date = structure(19168, class = "Date"), datetime = structure(1656169180, class = c("POSIXct", 
#&gt; "POSIXt"), tzone = ""))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb197-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dput</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(d))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; c(date = 19168, datetime = 1656169180)</code></pre>
</div>
</div>
<p>Answer: <code>c()</code> preserves the list structure. <code>unlist()</code> converts both to <code>double</code>.</p>
<p>AR Solutions: Date and date-time objects are both built upon doubles. While dates store the number of days since the reference date 1970-01-01 (also known as “the Epoch”) in days, date-time-objects (POSIXct) store the time difference to this date in seconds.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb199-1">date <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.Date</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-02"</span>)</span>
<span id="cb199-2">dttm_ct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-01 01:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>)</span>
<span id="cb199-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Internal representations</span></span>
<span id="cb199-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb201-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(dttm_ct)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3600
#&gt; attr(,"tzone")
#&gt; [1] "UTC"</code></pre>
</div>
</div>
<p>As the <code>c()</code> generic only dispatches on its first argument, combining date and date-time objects via <code>c()</code> could lead to surprising results in older R versions (pre R 4.0.0):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb203" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb203-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output in R version 3.6.2</span></span>
<span id="cb203-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, dttm_ct) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equal to c.Date(date, dttm_ct)</span></span>
<span id="cb203-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "1970-01-02" "1979-11-10"</span></span>
<span id="cb203-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dttm_ct, date) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equal to c.POSIXct(date, dttm_ct)</span></span>
<span id="cb203-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "1970-01-01 02:00:00 CET" "1970-01-01 01:00:01 CET"</span></span></code></pre></div>
</div>
<p>In the first statement above <code>c.Date()</code> is executed, which incorrectly treats the underlying double of <code>dttm_ct</code> (3600) as days instead of seconds. Conversely, when <code>c.POSIXct()</code> is called on a date, one day is counted as one second only.</p>
<p>We can highlight these mechanics by the following code:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb204" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb204-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output in R version 3.6.2</span></span>
<span id="cb204-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, dttm_ct)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># internal representation</span></span>
<span id="cb204-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] 1 3600</span></span>
<span id="cb204-4">date <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3599</span></span>
<span id="cb204-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "1979-11-10"</span></span></code></pre></div>
</div>
<p>As of R 4.0.0 these issues have been resolved and both methods now convert their input first into <code>POSIXct</code> and <code>Date</code>, respectively.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb205" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb205-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dttm_ct, date)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "1970-01-01 01:00:00 UTC" "1970-01-02 00:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb207" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb207-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dttm_ct, date))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  3600 86400
#&gt; attr(,"tzone")
#&gt; [1] "UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb209" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb209-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, dttm_ct)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "1970-01-02" "1970-01-01"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb211" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb211-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unclass</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(date, dttm_ct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 0</code></pre>
</div>
</div>
<p>However, as <code>c()</code> strips the time zone (and other attributes) of <code>POSIXct</code> objects, some caution is still recommended.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb213" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb213-1">(dttm_ct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.POSIXct</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1970-01-01 01:00"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tz =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HST"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "1970-01-01 01:00:00 HST"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb215" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb215-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dttm_ct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $class
#&gt; [1] "POSIXct" "POSIXt" 
#&gt; 
#&gt; $tzone
#&gt; [1] "HST"</code></pre>
</div>
</div>
<p>A package that deals with these kinds of problems in more depth and provides a structural solution for them is the <a href="https://github.com/r-lib/vctrs"><code>vctrs</code> package</a> which is also used throughout the tidyverse.</p>
<p>Let’s look at <code>unlist()</code>, which operates on list input.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb217" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb217-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Attributes are stripped</span></span>
<span id="cb217-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unlist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(date, dttm_ct))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]     1 39600</code></pre>
</div>
</div>
<p>We see again that dates and date-times are internally stored as doubles. Unfortunately, this is all we are left with, when unlist strips the attributes of the list.</p>
<p>To summarise: <code>c()</code> coerces types and strips time zones. Errors may have occurred in older R versions because of inappropriate method dispatch/immature methods. <code>unlist()</code> strips attributes.</p>
<hr>
</section>
<section id="exercises-8" class="level2">
<h2 class="anchored" data-anchor-id="exercises-8">3.6.8 Exercises</h2>
<ol type="1">
<li>Can you have a data frame with zero rows? What about zero columns?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb219" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb219-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from data.frame() examples:</span></span>
<span id="cb219-2">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb219-3"></span>
<span id="cb219-4">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 1 1 4 7
#&gt; 2 2 5 8
#&gt; 3 3 6 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb221" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb221-1">df[, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; data frame with 0 columns and 3 rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb223" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb223-1">df[<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] x y z
#&gt; &lt;0 rows&gt; (or 0-length row.names)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb225" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb225-1">df[<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; data frame with 0 columns and 0 rows</code></pre>
</div>
</div>
<p>Answer: yes!</p>
<p>AR Solutions: Yes, you can create these data frames easily; either during creation or via subsetting. Even both dimensions can be zero.</p>
<hr>
<ol start="2" type="1">
<li>What happens if you attempt to set rownames that are not unique?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb227" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb227-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "1" "2" "3"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb229" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb229-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rownames</span>(df) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning: non-unique value when setting 'row.names': 'a'</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in `.rowNamesDF&lt;-`(x, value = value) : 
#&gt;   duplicate 'row.names' are not allowed</code></pre>
</div>
</div>
<p>Answer: error, duplicates not allowed.</p>
<p>AR Solutions: Matrices can have duplicated row names, so this does not cause problems.</p>
<p>Data frames, however, require unique rownames and you get different results depending on how you attempt to set them. If you set them directly or via <code>row.names()</code>, you get an error. If you use subsetting, <code>[</code> automatically deduplicates.</p>
<hr>
<ol start="3" type="1">
<li>If <code>df</code> is a data frame, what can you say about <code>t(df)</code>, and <code>t(t(df))</code>? Perform some experiments, making sure to try different column types.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb232" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb232-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   [,1] [,2] [,3]
#&gt; x    1    2    3
#&gt; y    4    5    6
#&gt; z    7    8    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb234" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb234-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      x y z
#&gt; [1,] 1 4 7
#&gt; [2,] 2 5 8
#&gt; [3,] 3 6 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb236" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb236-1">df2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>L<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>L, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb236-2">df2</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 1 1 a 4
#&gt; 2 2 b 5
#&gt; 3 3 c 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb238" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb238-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   [,1] [,2] [,3]
#&gt; x "1"  "2"  "3" 
#&gt; y "a"  "b"  "c" 
#&gt; z "4"  "5"  "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb240" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb240-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      x   y   z  
#&gt; [1,] "1" "a" "4"
#&gt; [2,] "2" "b" "5"
#&gt; [3,] "3" "c" "6"</code></pre>
</div>
</div>
<p>Answer: <code>t()</code> coerces the vector types, so <code>t(t(df))</code> is the same as <code>df</code> only when all columns are the same type.</p>
<p>AR Solutions: Both of <code>t(df)</code> and <code>t(t(df))</code> will return matrices:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb242" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb242-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb242-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb244" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb244-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb246" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb246-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<p>The dimensions will respect the typical transposition rules:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb248" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb248-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb250" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb250-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb252" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb252-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3 2</code></pre>
</div>
</div>
<p>Because the output is a matrix, every column is coerced to the same type. (It is implemented within <code>t.data.frame()</code> via <code>as.matrix()</code> which is described below).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb254" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb254-1">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y
#&gt; 1 1 a
#&gt; 2 2 b
#&gt; 3 3 c</code></pre>
</div>
<div class="sourceCode cell-code" id="cb256" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb256-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   [,1] [,2] [,3]
#&gt; x "1"  "2"  "3" 
#&gt; y "a"  "b"  "c"</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>What does <code>as.matrix()</code> do when applied to a data frame with columns of different types? How does it differ from <code>data.matrix()</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb258" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb258-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      x   y  
#&gt; [1,] "1" "a"
#&gt; [2,] "2" "b"
#&gt; [3,] "3" "c"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb260" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb260-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.matrix</span>(df2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      x   y   z  
#&gt; [1,] "1" "a" "4"
#&gt; [2,] "2" "b" "5"
#&gt; [3,] "3" "c" "6"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb262" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb262-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.matrix</span>(df2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      x y z
#&gt; [1,] 1 1 4
#&gt; [2,] 2 2 5
#&gt; [3,] 3 3 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb264" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb264-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.matrix</span>(df2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 1 1 1 4
#&gt; 2 2 2 5
#&gt; 3 3 3 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb266" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb266-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.data.frame</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x   y z
#&gt; 1 1 0.0 4
#&gt; 2 2 0.5 5
#&gt; 3 3 1.0 6</code></pre>
</div>
</div>
<p>Answer: <code>as.matrix()</code> coerces all elements to the same type. <code>data.matrix()</code> coerces elements to either integer (when possible) or double (when not).</p>
<p>AR Solutions: The type of the result of <code>as.matrix</code> depends on the types of the input columns (see <code>?as.matrix</code>):</p>
<blockquote class="blockquote">
<p>The method for data frames will return a character matrix if there is only atomic columns and any non-(numeric/logical/complex) column, applying as.vector to factors and format to other non-character columns. Otherwise the usual coercion hierarchy (logical &lt; integer &lt; double &lt; complex) will be used, e.g.&nbsp;all-logical data frames will be coerced to a logical matrix, mixed logical-integer will give an integer matrix, etc.</p>
</blockquote>
<p>On the other hand, <code>data.matrix</code> will always return a numeric matrix (see <code>?data.matrix()</code>).</p>
<blockquote class="blockquote">
<p>Return the matrix obtained by converting all the variables in a data frame to numeric mode and then binding them together as the columns of a matrix. Factors and ordered factors are replaced by their internal codes. […] Character columns are first converted to factors and then to integers.</p>
</blockquote>
<p>We can illustrate and compare the mechanics of these functions using a concrete example. <code>as.matrix()</code> makes it possible to retrieve most of the original information from the data frame but leaves us with characters. To retrieve all information from <code>data.matrix()</code>’s output, we would need a lookup table for each column.</p>
<hr>
</section>
</section>
<section id="subsetting" class="level1">
<h1>4 Subsetting</h1>
<p>R’s subsetting operators are fast and powerful. Mastering them allows you to succinctly perform complex operations in a way that few other languages can match. Subsetting in R is easy to learn but hard to master because you need to internalise a number of interrelated concepts:</p>
<ul>
<li><p>There are six ways to subset atomic vectors.</p></li>
<li><p>There are three subsetting operators, <code>[[</code>, <code>[</code>, and <code>$</code>.</p></li>
<li><p>Subsetting operators interact differently with different vector types (e.g., atomic vectors, lists, factors, matrices, and data frames).</p></li>
<li><p>Subsetting can be combined with assignment.</p></li>
</ul>
<p>Subsetting is a natural complement to <code>str()</code>. While <code>str()</code> shows you all the pieces of any object (its structure), subsetting allows you to pull out the pieces that you’re interested in. For large, complex objects, I highly recommend using the interactive RStudio Viewer, which you can activate with <code>View(my_object)</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb268" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb268-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="exercises-9" class="level2">
<h2 class="anchored" data-anchor-id="exercises-9">4.2.6 Exercises</h2>
<ol type="1">
<li>Fix each of the following common data frame subsetting errors:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb269" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb269-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars[mtcars$cyl = 4, ]</span></span>
<span id="cb269-2">mtcars[mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb271" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb271-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use `==`              (instead of `=`)</span></span>
<span id="cb271-2"></span>
<span id="cb271-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars[-1:4, ]</span></span>
<span id="cb271-4">mtcars[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
#&gt; AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
#&gt; Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
#&gt; Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
#&gt; Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
#&gt; Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
#&gt; Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
#&gt; Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb273" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb273-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use `-(1:4)`          (instead of `-1:4`)</span></span>
<span id="cb273-2"></span>
<span id="cb273-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars[mtcars$cyl &lt;= 5]</span></span>
<span id="cb273-4">mtcars[mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb275" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb275-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `,` is missing</span></span>
<span id="cb275-2"></span>
<span id="cb275-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mtcars[mtcars$cyl == 4 | 6, ]</span></span>
<span id="cb275-4">mtcars[mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                 mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Mazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
#&gt; Mazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
#&gt; Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Hornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
#&gt; Valiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
#&gt; Merc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Merc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
#&gt; Merc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
#&gt; Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
#&gt; Toyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
#&gt; Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
#&gt; Porsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
#&gt; Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
#&gt; Ferrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
#&gt; Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb277" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb277-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use `mtcars$cyl == 6` (instead of `6`)</span></span>
<span id="cb277-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  or `%in% c(4, 6)`    (instead of `== 4 | 6`)</span></span></code></pre></div>
</div>
<p>Answer: fixed!</p>
<p>AR solutions: see the comments below the fixed code.</p>
<hr>
<ol start="2" type="1">
<li>Why does the following code yield five missing values? (Hint: why is it different from <code>x[NA_real_]</code>?)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb278" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb278-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb278-2">x[<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] NA NA NA NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb280" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb280-1">x[<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA_real_</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb282" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb282-1">x[<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>Answer: NA is a logical constant of length 1.</p>
<p>AR Solutions: In contrast to <code>NA_real</code>, <code>NA</code> has logical type and logical vectors are recycled to the same length as the vector being subset, i.e.&nbsp;<code>x[NA]</code> is recycled to <code>x[c(NA, NA, NA, NA, NA)]</code>.</p>
<hr>
<ol start="3" type="1">
<li>What does <code>upper.tri()</code> return? How does subsetting a matrix with it work? Do we need any additional subsetting rules to describe its behaviour?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb284" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb284-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">outer</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">FUN =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*"</span>)</span>
<span id="cb284-2">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      [,1] [,2] [,3] [,4] [,5]
#&gt; [1,]    1    2    3    4    5
#&gt; [2,]    2    4    6    8   10
#&gt; [3,]    3    6    9   12   15
#&gt; [4,]    4    8   12   16   20
#&gt; [5,]    5   10   15   20   25</code></pre>
</div>
<div class="sourceCode cell-code" id="cb286" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb286-1">x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">upper.tri</span>(x)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  2  3  6  4  8 12  5 10 15 20</code></pre>
</div>
</div>
<p>Answer: <code>upper.tri()</code> returns a matrix of logicals, which can be used to subset the upper triangle. This is subsetting by matrix, which is new.</p>
<p>AR Solutions: <code>upper.tri(x)</code> returns a logical matrix, which contains <code>TRUE</code> values above the diagonal and <code>FALSE</code> values everywhere else. In <code>upper.tri()</code> the positions for <code>TRUE</code> and <code>FALSE</code> values are determined by comparing <code>x</code>’s row and column indices via <code>.row(dim(x)) &lt; .col(dim(x))</code>.</p>
<p>When subsetting with logical matrices, all elements that correspond to <code>TRUE</code> will be selected. Matrices extend vectors with a dimension attribute, so the vector forms of subsetting can be used (including logical subsetting). We should take care, that the dimensions of the subsetting matrix match the object of interest — otherwise unintended selections due to vector recycling may occur. Please also note, that this form of subsetting returns a vector instead of a matrix, as the subsetting alters the dimensions of the object.</p>
<hr>
<ol start="4" type="1">
<li>Why does <code>mtcars[1:20]</code> return an error? How does it differ from the similar <code>mtcars[1:20, ]</code>?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb288" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb288-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in `[.data.frame`(mtcars, 1:20) : undefined columns selected</code></pre>
</div>
<div class="sourceCode cell-code" id="cb290" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb290-1">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb
#&gt; Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
#&gt; Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
#&gt; Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
#&gt; Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
#&gt; Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
#&gt; Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
#&gt; Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
#&gt; Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
#&gt; Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
#&gt; Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
#&gt; Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
#&gt; Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
#&gt; Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
#&gt; Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
#&gt; Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
#&gt; Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
#&gt; Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
#&gt; Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
#&gt; Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
#&gt; Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1</code></pre>
</div>
</div>
<p>Answer: <code>mtcars[1:20]</code> selects the first 20 columns, but there are only 11. <code>mtcars[1:20, ]</code> selects the first 20 rows of 32.</p>
<p>AR Solutions: When subsetting a data frame with a single vector, it behaves the same way as subsetting a list of columns. So, <code>mtcars[1:20]</code> would return a data frame containing the first 20 columns of the dataset. However, as <code>mtcars</code> has only 11 columns, the index will be out of bounds and an error is thrown. <code>mtcars[1:20, ]</code> is subsetted with two vectors, so 2d subsetting kicks in, and the first index refers to rows.</p>
<hr>
<ol start="5" type="1">
<li>Implement your own function that extracts the diagonal entries from a matrix (it should behave like <code>diag(x)</code> where <code>x</code> is a matrix).</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb292" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb292-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb292-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb292-3">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,</span>
<span id="cb292-4">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb292-5">))</span>
<span id="cb292-6">m</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      [,1] [,2] [,3]
#&gt; [1,]    1    4    7
#&gt; [2,]    2    5    8
#&gt; [3,]    3    6    9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb294" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb294-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 5 9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb296" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb296-1">my_diag <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb296-2">  diag_element <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(n, x) {</span>
<span id="cb296-3">    x[n, n]</span>
<span id="cb296-4">  }</span>
<span id="cb296-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(m)), diag_element, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x)</span>
<span id="cb296-6">}</span>
<span id="cb296-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_diag</span>(m)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 5 9</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: The elements in the diagonal of a matrix have the same row- and column indices. This characteristic can be used to create a suitable numeric matrix used for subsetting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb298" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb298-1">diag2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb298-2">  n <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(x), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(x))</span>
<span id="cb298-3">  idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cbind</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_len</span>(n))</span>
<span id="cb298-4">  x[idx]</span>
<span id="cb298-5">}</span>
<span id="cb298-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's check if it works</span></span>
<span id="cb298-7">(x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;      [,1] [,2] [,3] [,4] [,5] [,6]
#&gt; [1,]    1    6   11   16   21   26
#&gt; [2,]    2    7   12   17   22   27
#&gt; [3,]    3    8   13   18   23   28
#&gt; [4,]    4    9   14   19   24   29
#&gt; [5,]    5   10   15   20   25   30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb300" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb300-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  1  7 13 19 25</code></pre>
</div>
<div class="sourceCode cell-code" id="cb302" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb302-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag2</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  1  7 13 19 25</code></pre>
</div>
</div>
<hr>
<ol start="5" type="1">
<li>What does <code>df[is.na(df)] &lt;- 0</code> do? How does it work?</li>
</ol>
<p>Answer: sets the <code>NA</code> values in <code>df</code> to <code>0</code>, by first selecting <code>NA</code> values then assigning <code>0</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb304" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb304-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb304-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;    x  y  z
#&gt; 1  1  4 NA
#&gt; 2  2 NA  8
#&gt; 3 NA  6  9</code></pre>
</div>
<div class="sourceCode cell-code" id="cb306" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb306-1">df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.na</span>(df)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb306-2">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 1 1 4 0
#&gt; 2 2 0 8
#&gt; 3 0 6 9</code></pre>
</div>
</div>
<p>Correct!</p>
<p>AR Solutions: This expression replaces the <code>NA</code>s in <code>df</code> with <code>0</code>. Here <code>is.na(df)</code> returns a logical matrix that encodes the position of the missing values in <code>df</code>. Subsetting and assignment are then combined to replace only the missing values.</p>
<hr>
</section>
<section id="exercises-10" class="level2">
<h2 class="anchored" data-anchor-id="exercises-10">4.3.5 Exercises</h2>
<ol type="1">
<li>Brainstorm as many ways as possible to extract the third value from the <code>cyl</code> variable in the <code>mtcars</code> dataset.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb308" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb308-1">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb310" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb310-1">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb312" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb312-1">mtcars[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb314" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb314-1">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb316" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb316-1">mtcars[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb318" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb318-1">mtcars[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Datsun 710"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb320" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb320-1">mtcars[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>), <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
</div>
<p>Answer: code above (some variations omitted). There are many more.</p>
<p>AR Solutions: Base R already provides an abundance of possibilities:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb322" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb322-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select column first</span></span>
<span id="cb322-2">mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb324" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb324-1">mtcars[, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb326" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb326-1">mtcars[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]][[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb328" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb328-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with</span>(mtcars, cyl[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb330" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb330-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select row first</span></span>
<span id="cb330-2">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, ]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb332" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb332-1">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb334" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb334-1">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, ][, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb336" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb336-1">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, ][[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb338" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb338-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select simultaneously</span></span>
<span id="cb338-2">mtcars[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
<div class="sourceCode cell-code" id="cb340" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb340-1">mtcars[[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 4</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Given a linear model, e.g., <code>mod &lt;- lm(mpg ~ wt, data = mtcars)</code>, extract the residual degrees of freedom. Then extract the R squared from the model summary (<code>summary(mod)</code>)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb342" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb342-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb342-2">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df.residual</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb344" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb344-1">mod_sum <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mod)</span>
<span id="cb344-2">mod_sum<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.7528328</code></pre>
</div>
<div class="sourceCode cell-code" id="cb346" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb346-1">mod_sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; 
#&gt; Call:
#&gt; lm(formula = mpg ~ wt, data = mtcars)
#&gt; 
#&gt; Residuals:
#&gt;     Min      1Q  Median      3Q     Max 
#&gt; -4.5432 -2.3647 -0.1252  1.4096  6.8727 
#&gt; 
#&gt; Coefficients:
#&gt;             Estimate Std. Error t value Pr(&gt;|t|)    
#&gt; (Intercept)  37.2851     1.8776  19.858  &lt; 2e-16 ***
#&gt; wt           -5.3445     0.5591  -9.559 1.29e-10 ***
#&gt; ---
#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
#&gt; 
#&gt; Residual standard error: 3.046 on 30 degrees of freedom
#&gt; Multiple R-squared:  0.7528, Adjusted R-squared:  0.7446 
#&gt; F-statistic: 91.38 on 1 and 30 DF,  p-value: 1.294e-10</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: <code>mod</code> is of type list, which opens up several possibilities. We use <code>$</code> or <code>[[</code> to extract a single element:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb348" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb348-1">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(mpg <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> wt, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> mtcars)</span>
<span id="cb348-2"></span>
<span id="cb348-3">mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>df.residual</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 30</code></pre>
</div>
<div class="sourceCode cell-code" id="cb350" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb350-1">mod[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"df.residual"</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 30</code></pre>
</div>
</div>
<p>The same also applies to <code>summary(mod)</code>, so we could use, e.g.:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb352" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb352-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summary</span>(mod)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>r.squared</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.7528328</code></pre>
</div>
</div>
<p>(Tip: The <a href="https://github.com/tidymodels/broom"><code>broom</code> package</a> provides a very useful approach to work with models in a tidy way.)</p>
<hr>
</section>
<section id="exercises-11" class="level2">
<h2 class="anchored" data-anchor-id="exercises-11">4.5.9 Exercises</h2>
<ol type="1">
<li>How would you randomly permute the columns of a data frame? (This is an important technique in random forests.) Can you simultaneously permute the rows and columns in one step?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb354" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb354-1">df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">row.names =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb354-2"></span>
<span id="cb354-3">df[, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df))]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   z y x
#&gt; 1 a 5 1
#&gt; 2 b 4 2
#&gt; 3 c 3 3
#&gt; 4 d 2 4
#&gt; 5 e 1 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb356" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb356-1">df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(df))]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   y x z
#&gt; 5 1 5 e
#&gt; 3 3 3 c
#&gt; 4 2 4 d
#&gt; 1 5 1 a
#&gt; 2 4 2 b</code></pre>
</div>
</div>
<p>Answer: using <code>sample()</code>. Yes!</p>
<p>AR Solutions: This can be achieved by combining <code>[</code> and <code>sample()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb358" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb358-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Permute columns</span></span>
<span id="cb358-2">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mtcars))]</span>
<span id="cb358-3"></span>
<span id="cb358-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Permute columns and rows in one step</span></span>
<span id="cb358-5">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars)), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ncol</span>(mtcars))]</span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>How would you select a random sample of <code>m</code> rows from a data frame? What if the sample had to be contiguous (i.e., with an initial row, a final row, and every row in between)?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb359" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb359-1">sample_rows <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(df, m, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contiguous =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb359-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df)) {</span>
<span id="cb359-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample size '"</span>, m, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' is larger than the number of rows, '"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"'"</span>)</span>
<span id="cb359-4">  }</span>
<span id="cb359-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (contiguous) {</span>
<span id="cb359-6">    first_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb359-7">    last_row <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> first_row <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb359-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(df[first_row<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>last_row, ])</span>
<span id="cb359-9">  }</span>
<span id="cb359-10">  df[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(df), m), ]</span>
<span id="cb359-11">}</span>
<span id="cb359-12"></span>
<span id="cb359-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_rows</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 2 2 4 b
#&gt; 4 4 2 d
#&gt; 1 1 5 a</code></pre>
</div>
<div class="sourceCode cell-code" id="cb361" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb361-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_rows</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">contiguous =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;   x y z
#&gt; 2 2 4 b
#&gt; 3 3 3 c
#&gt; 4 4 2 d</code></pre>
</div>
<div class="sourceCode cell-code" id="cb363" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb363-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample_rows</span>(df, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in sample_rows(df, 6) : 
#&gt;   sample size '6' is larger than the number of rows, '5'</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: Selecting <code>m</code> random rows from a data frame can be achieved through subsetting.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb365" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb365-1">m <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb365-2">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars), m), ]</span></code></pre></div>
</div>
<p>Holding successive lines together as a blocked sample requires only a certain amount of caution in order to obtain the correct start and end index.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb366" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb366-1">start <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(mtcars) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb366-2">end <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> start <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb366-3">mtcars[start<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>end, , drop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>]</span></code></pre></div>
</div>
<hr>
<ol start="3" type="1">
<li>How could you put the columns in a data frame in alphabetical order?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb367" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb367-1">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colnames</span>(mtcars))]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                     am carb cyl  disp drat gear  hp  mpg  qsec vs    wt
#&gt; Mazda RX4            1    4   6 160.0 3.90    4 110 21.0 16.46  0 2.620
#&gt; Mazda RX4 Wag        1    4   6 160.0 3.90    4 110 21.0 17.02  0 2.875
#&gt; Datsun 710           1    1   4 108.0 3.85    4  93 22.8 18.61  1 2.320
#&gt; Hornet 4 Drive       0    1   6 258.0 3.08    3 110 21.4 19.44  1 3.215
#&gt; Hornet Sportabout    0    2   8 360.0 3.15    3 175 18.7 17.02  0 3.440
#&gt; Valiant              0    1   6 225.0 2.76    3 105 18.1 20.22  1 3.460
#&gt; Duster 360           0    4   8 360.0 3.21    3 245 14.3 15.84  0 3.570
#&gt; Merc 240D            0    2   4 146.7 3.69    4  62 24.4 20.00  1 3.190
#&gt; Merc 230             0    2   4 140.8 3.92    4  95 22.8 22.90  1 3.150
#&gt; Merc 280             0    4   6 167.6 3.92    4 123 19.2 18.30  1 3.440
#&gt; Merc 280C            0    4   6 167.6 3.92    4 123 17.8 18.90  1 3.440
#&gt; Merc 450SE           0    3   8 275.8 3.07    3 180 16.4 17.40  0 4.070
#&gt; Merc 450SL           0    3   8 275.8 3.07    3 180 17.3 17.60  0 3.730
#&gt; Merc 450SLC          0    3   8 275.8 3.07    3 180 15.2 18.00  0 3.780
#&gt; Cadillac Fleetwood   0    4   8 472.0 2.93    3 205 10.4 17.98  0 5.250
#&gt; Lincoln Continental  0    4   8 460.0 3.00    3 215 10.4 17.82  0 5.424
#&gt; Chrysler Imperial    0    4   8 440.0 3.23    3 230 14.7 17.42  0 5.345
#&gt; Fiat 128             1    1   4  78.7 4.08    4  66 32.4 19.47  1 2.200
#&gt; Honda Civic          1    2   4  75.7 4.93    4  52 30.4 18.52  1 1.615
#&gt; Toyota Corolla       1    1   4  71.1 4.22    4  65 33.9 19.90  1 1.835
#&gt; Toyota Corona        0    1   4 120.1 3.70    3  97 21.5 20.01  1 2.465
#&gt; Dodge Challenger     0    2   8 318.0 2.76    3 150 15.5 16.87  0 3.520
#&gt; AMC Javelin          0    2   8 304.0 3.15    3 150 15.2 17.30  0 3.435
#&gt; Camaro Z28           0    4   8 350.0 3.73    3 245 13.3 15.41  0 3.840
#&gt; Pontiac Firebird     0    2   8 400.0 3.08    3 175 19.2 17.05  0 3.845
#&gt; Fiat X1-9            1    1   4  79.0 4.08    4  66 27.3 18.90  1 1.935
#&gt; Porsche 914-2        1    2   4 120.3 4.43    5  91 26.0 16.70  0 2.140
#&gt; Lotus Europa         1    2   4  95.1 3.77    5 113 30.4 16.90  1 1.513
#&gt; Ford Pantera L       1    4   8 351.0 4.22    5 264 15.8 14.50  0 3.170
#&gt; Ferrari Dino         1    6   6 145.0 3.62    5 175 19.7 15.50  0 2.770
#&gt; Maserati Bora        1    8   8 301.0 3.54    5 335 15.0 14.60  0 3.570
#&gt; Volvo 142E           1    2   4 121.0 4.11    4 109 21.4 18.60  1 2.780</code></pre>
</div>
</div>
<p>Answer: using <code>sort(colnames)</code>.</p>
<p>AR Solutions: We combine <code>[</code> with <code>order()</code> or <code>sort()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb369" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb369-1">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(mtcars))]</span>
<span id="cb369-2">mtcars[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(mtcars))]</span></code></pre></div>
</div>
<hr>
</section>
</section>
<section id="control-flow" class="level1">
<h1>5 Control flow</h1>
<p>There are two primary tools of control flow: choices and loops. Choices, like <code>if</code> statements and <code>switch()</code> calls, allow you to run different code depending on the input. Loops, like <code>for</code> and <code>while</code>, allow you to repeatedly run code, typically with changing options. I’d expect that you’re already familiar with the basics of these functions so I’ll briefly cover some technical details and then introduce some useful, but lesser known, features.</p>
<p>The condition system (messages, warnings, and errors), which you’ll learn about in Chapter 8, also provides non-local control flow.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb370" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb370-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="exercises-12" class="level2">
<h2 class="anchored" data-anchor-id="exercises-12">5.2.4 Exercises</h2>
<ol type="1">
<li>What type of vector does each of the following calls to <code>ifelse()</code> return? Read the documentation and write down the rules in your own words.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb371" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb371-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb373" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb373-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># double</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "double"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb375" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb375-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "no"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb377" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb377-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># character</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "character"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb379" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb379-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb381" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb381-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">typeof</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># logical</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "logical"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb383" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb383-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ifelse</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; logical(0)</code></pre>
</div>
</div>
<p>Answer:</p>
<ul>
<li>if <code>test</code> is true, return a vector of the same length as <code>test</code> (1) populated with “yes” - here 1 is a double, 1L would be integer</li>
<li>if <code>test</code> is false, return a vector of the same length as <code>test</code> (1) populated with “no” - here “no” is a character</li>
<li>if <code>test</code> is <code>NA</code>, return <code>NA</code>, and if <code>test</code> is <code>NULL</code>, return <code>logical(0)</code></li>
</ul>
<p>AR Solutions: The arguments of <code>ifelse()</code> are named <code>test</code>, <code>yes</code> and <code>no</code>. In general, <code>ifelse()</code> returns the entry for <code>yes</code> when <code>test</code> is <code>TRUE</code>, the entry for <code>no</code> when <code>test</code> is <code>FALSE</code> and <code>NA</code> when <code>test</code> is <code>NA</code>. Therefore, the expressions above return vectors of type <code>double</code> (<code>1</code>), <code>character</code> (<code>"no"</code>) and <code>logical</code> (<code>NA</code>).</p>
<p>To be a little more precise, we will cite the part of the documentation on the return value of <code>ifelse()</code>:</p>
<blockquote class="blockquote">
<p>A vector of the same length and attributes (including dimensions and “class”) as test and data values from the values of yes or no. The mode of the answer will be coerced from logical to accommodate first any values taken from yes and then any values taken from no.</p>
</blockquote>
<p>This is surprising because it uses the type of <code>test</code>. In practice this means, that <code>test</code> is first converted to logical and if the result is neither <code>TRUE</code> nor <code>FALSE</code>, simply <code>as.logical(test)</code> is returned.</p>
<hr>
<ol start="2" type="1">
<li>Why does the following code work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb385" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb385-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb385-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not empty"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "not empty"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb387" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb387-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>()</span>
<span id="cb387-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not empty"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"empty"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "empty"</code></pre>
</div>
</div>
<p>Answer: in the first example, <code>length(x)</code> is nonzero, which evaluates to <code>TRUE</code>. In the second example, <code>numeric()</code> returns a vector of length 0 (the default), <code>length(x)</code> is zero, which evaluates to <code>FALSE</code>.</p>
<p>AR Solutions: <code>if()</code> expects a logical condition, but also accepts a numeric vector where <code>0</code> is treated as <code>FALSE</code> and all other numbers are treated as <code>TRUE</code>. Numerical missing values (including <code>NaN</code>) lead to an error in the same way that a logical missing, <code>NA</code>, does.</p>
<hr>
</section>
<section id="exercises-13" class="level2">
<h2 class="anchored" data-anchor-id="exercises-13">5.3.3 Exercises</h2>
<ol type="1">
<li>Why does this code succeed without errors or warnings?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb389" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb389-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">numeric</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is numeric(0)</span></span>
<span id="cb389-2">out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># out is list(0)</span></span>
<span id="cb389-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x)) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: seq_linter. i is 1, then 0.</span></span>
<span id="cb389-4">  out[i] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> x[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># when i = 1 x[1] is NA, sets out[1] to NA. when i = 0 nothing happens</span></span>
<span id="cb389-5">}</span>
<span id="cb389-6">out</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; [1] NA</code></pre>
</div>
</div>
<p>Answer: in addition to notes above, <code>out[0]</code> and <code>x[0]</code> return a zero-length vector.</p>
<p>AR Solutions: This loop is a delicate issue, and we have to consider a few points to explain why it is evaluated without raising any errors or warnings.</p>
<p>The beginning of this code smell is the statement <code>1:length(x)</code> which creates the index of the for loop. As <code>x</code> has length 0 <code>1:length(x)</code> counts down from 1 to 0. This issue is typically avoided via usage of <code>seq_along(x)</code> or similar helpers which would just generate <code>integer(0)</code> in this case.</p>
<p>As we use <code>[&lt;-</code> and <code>[</code> for indexing 0-length vectors at their first and zeroth position, we need to be aware of their subsetting behaviour for out-of-bounds and zero indices.</p>
<p>During the first iteration <code>x[1]</code> will generate an <code>NA</code> (out-of-bounds indexing for atomics). The resulting <code>NA</code> (from squaring) will be assigned to the empty length-1 list <code>out[1]</code> (out-of-bounds indexing for lists).</p>
<p>In the next iteration, <code>x[0]</code> will return <code>numeric(0)</code> (zero indexing for atomics). Again, squaring doesn’t change the value and <code>numeric(0)</code> is assigned to <code>out[0]</code> (zero indexing for lists). Assigning a 0-length vector to a 0-length subset works but doesn’t change the object.</p>
<p>Overall, the code works, because each step includes valid R operations (even though the result may not be what the user intended).</p>
<hr>
<ol start="2" type="1">
<li>When the following code is evaluated, what can you say about the vector being iterated?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb391" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb391-1">xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb391-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xs) {</span>
<span id="cb391-3">  xs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(xs, x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb391-4">}</span>
<span id="cb391-5">xs</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1 2 3 2 4 6</code></pre>
</div>
</div>
<p>Answer: <code>x</code> iterates from 1 to 3, and is not affected by changes to <code>xs</code> during the loop, while <code>xs</code> is updated.</p>
<p>AR Solution: In this loop <code>x</code> takes on the values of the initial <code>xs</code> (<code>1</code>, <code>2</code> and <code>3</code>), indicating that it is evaluated just once in the beginning of the loop, not after each iteration. (Otherwise, we would run into an infinite loop.)</p>
<hr>
<ol start="3" type="1">
<li>What does the following code tell you about when the index is updated?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb393" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb393-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) {</span>
<span id="cb393-2">  i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb393-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(i)</span>
<span id="cb393-4">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2
#&gt; [1] 4
#&gt; [1] 6</code></pre>
</div>
</div>
<p>Answer: the index is updated at the beginning of each loop.</p>
<p>AR Solutions: In a for loop the index is updated in the beginning of each iteration. Therefore, reassigning the index symbol during one iteration doesn’t affect the following iterations. (Again, we would otherwise run into an infinite loop.)</p>
<hr>
</section>
</section>
<section id="functions" class="level1">
<h1>6 Functions</h1>
<p>If you’re reading this book, you’ve probably already created many R functions and know how to use them to reduce duplication in your code. In this chapter, you’ll learn how to turn that informal, working knowledge into more rigorous, theoretical understanding. And while you’ll see some interesting tricks and techniques along the way, keep in mind that what you’ll learn here will be important for understanding the more advanced topics discussed later in the book.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb395" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb395-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="quiz-1" class="level2">
<h2 class="anchored" data-anchor-id="quiz-1">6 Quiz</h2>
<p>Answer the following questions to see if you can safely skip this chapter.</p>
<ol type="1">
<li><p>What are the three components of a function? a: arguments, code, return value [body, arguments, environment]</p></li>
<li><p>What does the following code return? a: 11 [correct!]</p></li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb396" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb396-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb396-2">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb396-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb396-4">    x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb396-5">  }</span>
<span id="cb396-6">}</span>
<span id="cb396-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 11</code></pre>
</div>
</div>
<ol start="3" type="1">
<li>How would you usually write this code? a: <code>1 + 2 * 3</code> [correct! … <code>1 + (2 * 3)</code>]</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb398" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb398-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">*</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
</div>
<ol start="4" type="1">
<li>How could you make this call easier to read? <code>mean(c(1:10, NA), na.rm = TRUE)</code> [correct!]</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb399" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb399-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
</div>
<ol start="5" type="1">
<li>Does the following code throw an error when executed? Why or why not? a: no, due to lazy evaluation, the <code>stop()</code> is never run [correct! … second argument is never used]</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb400" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb400-1">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb400-2">  a <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb400-3">}</span>
<span id="cb400-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is an error!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 100</code></pre>
</div>
</div>
<ol start="6" type="1">
<li><p>What is an infix function? How do you write it? What’s a replacement function? How do you write it? a: <code>function(x) x</code>. ??? [see 6.8.3 and 6.8.4]</p></li>
<li><p>How do you ensure that cleanup action occurs regardless of how a function exits? a: ??? [<code>on.exit()</code>]</p></li>
</ol>
</section>
<section id="exercises-14" class="level2">
<h2 class="anchored" data-anchor-id="exercises-14">6.2.5 Exercises</h2>
<ol type="1">
<li>Given a name, like <code>"mean"</code>, <code>match.fun()</code> lets you find a function. Given a function, can you find its name? Why doesn’t that make sense in R?</li>
</ol>
<p>Answer: a function is an object and could have multiple names pointing to it.</p>
<p>AR Solutions: In R there is no one-to-one mapping between functions and names. A name always points to a single object, but an object may have zero, one or many names.</p>
<hr>
<ol start="2" type="1">
<li>It’s possible (although typically not useful) to call an anonymous function. Which of the two approaches below is correct? Why?</li>
</ol>
<div class="cell" data-layout-align="center" data-result="hide">
<div class="sourceCode cell-code" id="cb402" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb402-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function(x) 3()</code></pre>
</div>
<div class="sourceCode cell-code" id="cb404" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb404-1">(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3</code></pre>
</div>
</div>
<p>Answer: The second is correct, as the first is the form of defining a function.</p>
<p>AR Solutions: The second approach is correct.</p>
<p>The anonymous function <code>function(x) 3</code> is surrounded by a pair of parentheses before it is called by <code>()</code>. These extra parentheses separate the function call from the anonymous function’s body. Without them a function with the invalid body <code>3()</code> is returned, which throws an error when we call it.</p>
<hr>
<ol start="3" type="1">
<li>A good rule of thumb is that an anonymous function should fit on one line and shouldn’t need to use <code>{}</code>. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?</li>
</ol>
<p>Answer: in <code>rdev::build_analysis_site()</code>, <code>analysis_menu_item()</code> is properly written as a named function, where <code>get_component()</code> could be written as an anonymous function, with <code>dir_check_copy()</code> and <code>dir_check_delete()</code> potentially either.</p>
<p>AR Solutions: The use of anonymous functions allows concise and elegant code in certain situations. However, they miss a descriptive name and when re-reading the code, it can take a while to figure out what they do. That’s why it’s helpful to give long and complex functions a descriptive name. It may be worthwhile to take a look at your own projects or other people’s code to reflect on this part of your coding style.</p>
<hr>
<ol start="4" type="1">
<li>What function allows you to tell if an object is a function? What function allows you to tell if a function is a primitive function?</li>
</ol>
<p>Answer: <code>is.function()</code> and <code>is.primitive()</code>.</p>
<p>AR Solutions: Use <code>is.function()</code> to test if an object is a function. Consider using <code>is.primitive()</code> to test specifically for primitive functions.</p>
<hr>
<ol start="5" type="1">
<li>This code makes a list of all functions in the base package.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb406" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb406-1">objs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mget</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package:base"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning in ls("package:base", all = TRUE): partial argument match of 'all' to
#&gt; 'all.names'</code></pre>
</div>
<div class="sourceCode cell-code" id="cb408" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb408-1">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(is.function, objs)</span></code></pre></div>
</div>
<p>Use it to answer the following questions:</p>
<ol type="a">
<li>Which base function has the most arguments?</li>
<li>How many base functions have no arguments? What’s special about those functions?</li>
<li>How could you adapt the code to find all primitive functions?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb409" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb409-1">fun_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb409-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(funs),</span>
<span id="cb409-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(funs, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(x)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L))</span>
<span id="cb409-4">)</span>
<span id="cb409-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(fun_args[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">order</span>(fun_args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>args, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>), ], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                  name args
#&gt; 1068             scan   22
#&gt; 570    format.default   16
#&gt; 1121           source   16
#&gt; 583           formatC   15
#&gt; 764           library   13
#&gt; 821  merge.data.frame   13
#&gt; 918         prettyNum   13
#&gt; 1231          system2   11
#&gt; 926     print.default   10
#&gt; 1063             save   10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb411" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb411-1">fun_args[fun_args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                          name args
#&gt; 1                           -    0
#&gt; 4                           :    0
#&gt; 5                          ::    0
#&gt; 6                         :::    0
#&gt; 7                           !    0
#&gt; 10                         !=    0
#&gt; 13                     ...elt    0
#&gt; 14                  ...length    0
#&gt; 15                   ...names    0
#&gt; 20                         .C    0
#&gt; 21               .cache_class    0
#&gt; 22                      .Call    0
#&gt; 23             .Call.graphics    0
#&gt; 25                    .class2    0
#&gt; 42                  .External    0
#&gt; 43         .External.graphics    0
#&gt; 44                 .External2    0
#&gt; 45                 .First.sys    0
#&gt; 48                   .Fortran    0
#&gt; 56                  .Internal    0
#&gt; 57       .isMethodsDispatchOn    0
#&gt; 68         .NotYetImplemented    0
#&gt; 70         .OptRequireMethods    0
#&gt; 76                 .Primitive    0
#&gt; 77                 .primTrace    0
#&gt; 78               .primUntrace    0
#&gt; 89          .standard_regexps    0
#&gt; 90                    .subset    0
#&gt; 91                   .subset2    0
#&gt; 94        .tryResumeInterrupt    0
#&gt; 96                          (    0
#&gt; 97                          [    0
#&gt; 115                        [[    0
#&gt; 122                      [[&lt;-    0
#&gt; 127                       [&lt;-    0
#&gt; 135                         {    0
#&gt; 136                         @    0
#&gt; 137                       @&lt;-    0
#&gt; 138                         *    0
#&gt; 140                         /    0
#&gt; 142                         &amp;    0
#&gt; 145                        &amp;&amp;    0
#&gt; 146                       %*%    0
#&gt; 147                       %/%    0
#&gt; 148                        %%    0
#&gt; 152                         ^    0
#&gt; 153                         +    0
#&gt; 156                         &lt;    0
#&gt; 157                        &lt;-    0
#&gt; 158                       &lt;&lt;-    0
#&gt; 159                        &lt;=    0
#&gt; 160                         =    0
#&gt; 161                        ==    0
#&gt; 162                         &gt;    0
#&gt; 163                        &gt;=    0
#&gt; 164                         |    0
#&gt; 167                        ||    0
#&gt; 168                         ~    0
#&gt; 169                         $    0
#&gt; 172                       $&lt;-    0
#&gt; 176                       abs    0
#&gt; 177                      acos    0
#&gt; 178                     acosh    0
#&gt; 185                       all    0
#&gt; 202                       any    0
#&gt; 208                     anyNA    0
#&gt; 217                       Arg    0
#&gt; 224                   as.call    0
#&gt; 225              as.character    0
#&gt; 236                as.complex    0
#&gt; 270                 as.double    0
#&gt; 273            as.environment    0
#&gt; 280                as.integer    0
#&gt; 292                as.logical    0
#&gt; 302                as.numeric    0
#&gt; 321                    as.raw    0
#&gt; 331                      asin    0
#&gt; 332                     asinh    0
#&gt; 338                      atan    0
#&gt; 340                     atanh    0
#&gt; 343                      attr    0
#&gt; 345                    attr&lt;-    0
#&gt; 346                attributes    0
#&gt; 347              attributes&lt;-    0
#&gt; 352                   baseenv    0
#&gt; 371                     break    0
#&gt; 372                   browser    0
#&gt; 381                         c    0
#&gt; 390                      call    0
#&gt; 397                   ceiling    0
#&gt; 410                     class    0
#&gt; 411                   class&lt;-    0
#&gt; 417       closeAllConnections    0
#&gt; 434                      Conj    0
#&gt; 435              contributors    0
#&gt; 436                       cos    0
#&gt; 437                      cosh    0
#&gt; 438                     cospi    0
#&gt; 440               Cstack_info    0
#&gt; 441                    cummax    0
#&gt; 442                    cummin    0
#&gt; 443                   cumprod    0
#&gt; 444                    cumsum    0
#&gt; 453                      date    0
#&gt; 457  default.stringsAsFactors    0
#&gt; 474                   digamma    0
#&gt; 475                       dim    0
#&gt; 477                     dim&lt;-    0
#&gt; 478                  dimnames    0
#&gt; 480                dimnames&lt;-    0
#&gt; 509                  emptyenv    0
#&gt; 510                enc2native    0
#&gt; 511                  enc2utf8    0
#&gt; 519             environment&lt;-    0
#&gt; 527                       exp    0
#&gt; 529                     expm1    0
#&gt; 530                expression    0
#&gt; 531            extSoftVersion    0
#&gt; 558                     floor    0
#&gt; 561                       for    0
#&gt; 563              forceAndCall    0
#&gt; 586                  function    0
#&gt; 587                     gamma    0
#&gt; 589                   gc.time    0
#&gt; 595         getAllConnections    0
#&gt; 603             geterrmessage    0
#&gt; 606             getLoadedDLLs    0
#&gt; 616               getRversion    0
#&gt; 618      getTaskCallbackNames    0
#&gt; 621                     getwd    0
#&gt; 624                 globalenv    0
#&gt; 636                 iconvlist    0
#&gt; 641                        if    0
#&gt; 643                        Im    0
#&gt; 649               interactive    0
#&gt; 654                 invisible    0
#&gt; 657                  is.array    0
#&gt; 658                 is.atomic    0
#&gt; 659                   is.call    0
#&gt; 660              is.character    0
#&gt; 661                is.complex    0
#&gt; 663                 is.double    0
#&gt; 665            is.environment    0
#&gt; 666             is.expression    0
#&gt; 668                 is.finite    0
#&gt; 670               is.function    0
#&gt; 671               is.infinite    0
#&gt; 673                is.integer    0
#&gt; 674               is.language    0
#&gt; 675                   is.list    0
#&gt; 677                is.logical    0
#&gt; 678                 is.matrix    0
#&gt; 679                     is.na    0
#&gt; 687                   is.name    0
#&gt; 688                    is.nan    0
#&gt; 690                   is.null    0
#&gt; 691                is.numeric    0
#&gt; 696                 is.object    0
#&gt; 699               is.pairlist    0
#&gt; 702                      is.R    0
#&gt; 703                    is.raw    0
#&gt; 704              is.recursive    0
#&gt; 705                 is.single    0
#&gt; 706                 is.symbol    0
#&gt; 722                      isS4    0
#&gt; 736                 l10n_info    0
#&gt; 737                La_library    0
#&gt; 738                La_version    0
#&gt; 745           lazyLoadDBfetch    0
#&gt; 748                    length    0
#&gt; 750                  length&lt;-    0
#&gt; 759                  levels&lt;-    0
#&gt; 762                    lgamma    0
#&gt; 763            libcurlVersion    0
#&gt; 767                   licence    0
#&gt; 768                   license    0
#&gt; 769                      list    0
#&gt; 775          loadedNamespaces    0
#&gt; 776      loadingNamespaceInfo    0
#&gt; 781                       log    0
#&gt; 782                     log10    0
#&gt; 783                     log1p    0
#&gt; 784                      log2    0
#&gt; 807                       max    0
#&gt; 819            memory.profile    0
#&gt; 825                       min    0
#&gt; 826                   missing    0
#&gt; 827                       Mod    0
#&gt; 838                     names    0
#&gt; 840                   names&lt;-    0
#&gt; 847                     nargs    0
#&gt; 853                      next    0
#&gt; 862                  nullfile    0
#&gt; 867                    nzchar    0
#&gt; 869                  oldClass    0
#&gt; 870                oldClass&lt;-    0
#&gt; 872                   on.exit    0
#&gt; 905               pcre_config    0
#&gt; 914                pos.to.env    0
#&gt; 957                 proc.time    0
#&gt; 958                      prod    0
#&gt; 981                     quote    0
#&gt; 982             R_compiled_by    0
#&gt; 985                 R.Version    0
#&gt; 986                     range    0
#&gt; 999                        Re    0
#&gt; 1018                      rep    0
#&gt; 1027                   repeat    0
#&gt; 1034               retracemem    0
#&gt; 1035                   return    0
#&gt; 1043                    round    0
#&gt; 1069                   search    0
#&gt; 1070              searchpaths    0
#&gt; 1074                seq_along    0
#&gt; 1075                  seq_len    0
#&gt; 1078                  seq.int    0
#&gt; 1094                     sign    0
#&gt; 1096                   signif    0
#&gt; 1102                      sin    0
#&gt; 1104                     sinh    0
#&gt; 1107                    sinpi    0
#&gt; 1131                     sqrt    0
#&gt; 1137          standardGeneric    0
#&gt; 1139                   stderr    0
#&gt; 1140                    stdin    0
#&gt; 1141                   stdout    0
#&gt; 1145           storage.mode&lt;-    0
#&gt; 1161               substitute    0
#&gt; 1166                      sum    0
#&gt; 1195                   switch    0
#&gt; 1197                sys.calls    0
#&gt; 1199                 Sys.Date    0
#&gt; 1201               sys.frames    0
#&gt; 1205               Sys.getpid    0
#&gt; 1207                 Sys.info    0
#&gt; 1209           Sys.localeconv    0
#&gt; 1210               sys.nframe    0
#&gt; 1211              sys.on.exit    0
#&gt; 1213              sys.parents    0
#&gt; 1222               sys.status    0
#&gt; 1223                 Sys.time    0
#&gt; 1237                      tan    0
#&gt; 1238                     tanh    0
#&gt; 1239                    tanpi    0
#&gt; 1254                 tracemem    0
#&gt; 1259                 trigamma    0
#&gt; 1261                    trunc    0
#&gt; 1270           unCfillPOSIXlt    0
#&gt; 1271                  unclass    0
#&gt; 1295               untracemem    0
#&gt; 1299                UseMethod    0
#&gt; 1315                    while    0
#&gt; 1332                    xtfrm    0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb413" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb413-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if all functions with 0 arguments are primitive</span></span>
<span id="cb413-2">fun_args2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data.frame</span>(</span>
<span id="cb413-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(funs),</span>
<span id="cb413-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(funs, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formals</span>(x)), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>L)),</span>
<span id="cb413-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prim =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unname</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vapply</span>(funs, is.primitive, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>))</span>
<span id="cb413-6">)</span>
<span id="cb413-7">fun_args2[fun_args2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                          name args  prim
#&gt; 1                           -    0  TRUE
#&gt; 4                           :    0  TRUE
#&gt; 5                          ::    0  TRUE
#&gt; 6                         :::    0  TRUE
#&gt; 7                           !    0  TRUE
#&gt; 10                         !=    0  TRUE
#&gt; 13                     ...elt    0  TRUE
#&gt; 14                  ...length    0  TRUE
#&gt; 15                   ...names    0  TRUE
#&gt; 20                         .C    0  TRUE
#&gt; 21               .cache_class    0  TRUE
#&gt; 22                      .Call    0  TRUE
#&gt; 23             .Call.graphics    0  TRUE
#&gt; 25                    .class2    0  TRUE
#&gt; 42                  .External    0  TRUE
#&gt; 43         .External.graphics    0  TRUE
#&gt; 44                 .External2    0  TRUE
#&gt; 45                 .First.sys    0 FALSE
#&gt; 48                   .Fortran    0  TRUE
#&gt; 56                  .Internal    0  TRUE
#&gt; 57       .isMethodsDispatchOn    0  TRUE
#&gt; 68         .NotYetImplemented    0 FALSE
#&gt; 70         .OptRequireMethods    0 FALSE
#&gt; 76                 .Primitive    0  TRUE
#&gt; 77                 .primTrace    0  TRUE
#&gt; 78               .primUntrace    0  TRUE
#&gt; 89          .standard_regexps    0 FALSE
#&gt; 90                    .subset    0  TRUE
#&gt; 91                   .subset2    0  TRUE
#&gt; 94        .tryResumeInterrupt    0 FALSE
#&gt; 96                          (    0  TRUE
#&gt; 97                          [    0  TRUE
#&gt; 115                        [[    0  TRUE
#&gt; 122                      [[&lt;-    0  TRUE
#&gt; 127                       [&lt;-    0  TRUE
#&gt; 135                         {    0  TRUE
#&gt; 136                         @    0  TRUE
#&gt; 137                       @&lt;-    0  TRUE
#&gt; 138                         *    0  TRUE
#&gt; 140                         /    0  TRUE
#&gt; 142                         &amp;    0  TRUE
#&gt; 145                        &amp;&amp;    0  TRUE
#&gt; 146                       %*%    0  TRUE
#&gt; 147                       %/%    0  TRUE
#&gt; 148                        %%    0  TRUE
#&gt; 152                         ^    0  TRUE
#&gt; 153                         +    0  TRUE
#&gt; 156                         &lt;    0  TRUE
#&gt; 157                        &lt;-    0  TRUE
#&gt; 158                       &lt;&lt;-    0  TRUE
#&gt; 159                        &lt;=    0  TRUE
#&gt; 160                         =    0  TRUE
#&gt; 161                        ==    0  TRUE
#&gt; 162                         &gt;    0  TRUE
#&gt; 163                        &gt;=    0  TRUE
#&gt; 164                         |    0  TRUE
#&gt; 167                        ||    0  TRUE
#&gt; 168                         ~    0  TRUE
#&gt; 169                         $    0  TRUE
#&gt; 172                       $&lt;-    0  TRUE
#&gt; 176                       abs    0  TRUE
#&gt; 177                      acos    0  TRUE
#&gt; 178                     acosh    0  TRUE
#&gt; 185                       all    0  TRUE
#&gt; 202                       any    0  TRUE
#&gt; 208                     anyNA    0  TRUE
#&gt; 217                       Arg    0  TRUE
#&gt; 224                   as.call    0  TRUE
#&gt; 225              as.character    0  TRUE
#&gt; 236                as.complex    0  TRUE
#&gt; 270                 as.double    0  TRUE
#&gt; 273            as.environment    0  TRUE
#&gt; 280                as.integer    0  TRUE
#&gt; 292                as.logical    0  TRUE
#&gt; 302                as.numeric    0  TRUE
#&gt; 321                    as.raw    0  TRUE
#&gt; 331                      asin    0  TRUE
#&gt; 332                     asinh    0  TRUE
#&gt; 338                      atan    0  TRUE
#&gt; 340                     atanh    0  TRUE
#&gt; 343                      attr    0  TRUE
#&gt; 345                    attr&lt;-    0  TRUE
#&gt; 346                attributes    0  TRUE
#&gt; 347              attributes&lt;-    0  TRUE
#&gt; 352                   baseenv    0  TRUE
#&gt; 371                     break    0  TRUE
#&gt; 372                   browser    0  TRUE
#&gt; 381                         c    0  TRUE
#&gt; 390                      call    0  TRUE
#&gt; 397                   ceiling    0  TRUE
#&gt; 410                     class    0  TRUE
#&gt; 411                   class&lt;-    0  TRUE
#&gt; 417       closeAllConnections    0 FALSE
#&gt; 434                      Conj    0  TRUE
#&gt; 435              contributors    0 FALSE
#&gt; 436                       cos    0  TRUE
#&gt; 437                      cosh    0  TRUE
#&gt; 438                     cospi    0  TRUE
#&gt; 440               Cstack_info    0 FALSE
#&gt; 441                    cummax    0  TRUE
#&gt; 442                    cummin    0  TRUE
#&gt; 443                   cumprod    0  TRUE
#&gt; 444                    cumsum    0  TRUE
#&gt; 453                      date    0 FALSE
#&gt; 457  default.stringsAsFactors    0 FALSE
#&gt; 474                   digamma    0  TRUE
#&gt; 475                       dim    0  TRUE
#&gt; 477                     dim&lt;-    0  TRUE
#&gt; 478                  dimnames    0  TRUE
#&gt; 480                dimnames&lt;-    0  TRUE
#&gt; 509                  emptyenv    0  TRUE
#&gt; 510                enc2native    0  TRUE
#&gt; 511                  enc2utf8    0  TRUE
#&gt; 519             environment&lt;-    0  TRUE
#&gt; 527                       exp    0  TRUE
#&gt; 529                     expm1    0  TRUE
#&gt; 530                expression    0  TRUE
#&gt; 531            extSoftVersion    0 FALSE
#&gt; 558                     floor    0  TRUE
#&gt; 561                       for    0  TRUE
#&gt; 563              forceAndCall    0  TRUE
#&gt; 586                  function    0  TRUE
#&gt; 587                     gamma    0  TRUE
#&gt; 589                   gc.time    0  TRUE
#&gt; 595         getAllConnections    0 FALSE
#&gt; 603             geterrmessage    0 FALSE
#&gt; 606             getLoadedDLLs    0 FALSE
#&gt; 616               getRversion    0 FALSE
#&gt; 618      getTaskCallbackNames    0 FALSE
#&gt; 621                     getwd    0 FALSE
#&gt; 624                 globalenv    0  TRUE
#&gt; 636                 iconvlist    0 FALSE
#&gt; 641                        if    0  TRUE
#&gt; 643                        Im    0  TRUE
#&gt; 649               interactive    0  TRUE
#&gt; 654                 invisible    0  TRUE
#&gt; 657                  is.array    0  TRUE
#&gt; 658                 is.atomic    0  TRUE
#&gt; 659                   is.call    0  TRUE
#&gt; 660              is.character    0  TRUE
#&gt; 661                is.complex    0  TRUE
#&gt; 663                 is.double    0  TRUE
#&gt; 665            is.environment    0  TRUE
#&gt; 666             is.expression    0  TRUE
#&gt; 668                 is.finite    0  TRUE
#&gt; 670               is.function    0  TRUE
#&gt; 671               is.infinite    0  TRUE
#&gt; 673                is.integer    0  TRUE
#&gt; 674               is.language    0  TRUE
#&gt; 675                   is.list    0  TRUE
#&gt; 677                is.logical    0  TRUE
#&gt; 678                 is.matrix    0  TRUE
#&gt; 679                     is.na    0  TRUE
#&gt; 687                   is.name    0  TRUE
#&gt; 688                    is.nan    0  TRUE
#&gt; 690                   is.null    0  TRUE
#&gt; 691                is.numeric    0  TRUE
#&gt; 696                 is.object    0  TRUE
#&gt; 699               is.pairlist    0  TRUE
#&gt; 702                      is.R    0 FALSE
#&gt; 703                    is.raw    0  TRUE
#&gt; 704              is.recursive    0  TRUE
#&gt; 705                 is.single    0  TRUE
#&gt; 706                 is.symbol    0  TRUE
#&gt; 722                      isS4    0  TRUE
#&gt; 736                 l10n_info    0 FALSE
#&gt; 737                La_library    0 FALSE
#&gt; 738                La_version    0 FALSE
#&gt; 745           lazyLoadDBfetch    0  TRUE
#&gt; 748                    length    0  TRUE
#&gt; 750                  length&lt;-    0  TRUE
#&gt; 759                  levels&lt;-    0  TRUE
#&gt; 762                    lgamma    0  TRUE
#&gt; 763            libcurlVersion    0 FALSE
#&gt; 767                   licence    0 FALSE
#&gt; 768                   license    0 FALSE
#&gt; 769                      list    0  TRUE
#&gt; 775          loadedNamespaces    0 FALSE
#&gt; 776      loadingNamespaceInfo    0 FALSE
#&gt; 781                       log    0  TRUE
#&gt; 782                     log10    0  TRUE
#&gt; 783                     log1p    0  TRUE
#&gt; 784                      log2    0  TRUE
#&gt; 807                       max    0  TRUE
#&gt; 819            memory.profile    0 FALSE
#&gt; 825                       min    0  TRUE
#&gt; 826                   missing    0  TRUE
#&gt; 827                       Mod    0  TRUE
#&gt; 838                     names    0  TRUE
#&gt; 840                   names&lt;-    0  TRUE
#&gt; 847                     nargs    0  TRUE
#&gt; 853                      next    0  TRUE
#&gt; 862                  nullfile    0 FALSE
#&gt; 867                    nzchar    0  TRUE
#&gt; 869                  oldClass    0  TRUE
#&gt; 870                oldClass&lt;-    0  TRUE
#&gt; 872                   on.exit    0  TRUE
#&gt; 905               pcre_config    0 FALSE
#&gt; 914                pos.to.env    0  TRUE
#&gt; 957                 proc.time    0  TRUE
#&gt; 958                      prod    0  TRUE
#&gt; 981                     quote    0  TRUE
#&gt; 982             R_compiled_by    0 FALSE
#&gt; 985                 R.Version    0 FALSE
#&gt; 986                     range    0  TRUE
#&gt; 999                        Re    0  TRUE
#&gt; 1018                      rep    0  TRUE
#&gt; 1027                   repeat    0  TRUE
#&gt; 1034               retracemem    0  TRUE
#&gt; 1035                   return    0  TRUE
#&gt; 1043                    round    0  TRUE
#&gt; 1069                   search    0 FALSE
#&gt; 1070              searchpaths    0 FALSE
#&gt; 1074                seq_along    0  TRUE
#&gt; 1075                  seq_len    0  TRUE
#&gt; 1078                  seq.int    0  TRUE
#&gt; 1094                     sign    0  TRUE
#&gt; 1096                   signif    0  TRUE
#&gt; 1102                      sin    0  TRUE
#&gt; 1104                     sinh    0  TRUE
#&gt; 1107                    sinpi    0  TRUE
#&gt; 1131                     sqrt    0  TRUE
#&gt; 1137          standardGeneric    0  TRUE
#&gt; 1139                   stderr    0 FALSE
#&gt; 1140                    stdin    0 FALSE
#&gt; 1141                   stdout    0 FALSE
#&gt; 1145           storage.mode&lt;-    0  TRUE
#&gt; 1161               substitute    0  TRUE
#&gt; 1166                      sum    0  TRUE
#&gt; 1195                   switch    0  TRUE
#&gt; 1197                sys.calls    0 FALSE
#&gt; 1199                 Sys.Date    0 FALSE
#&gt; 1201               sys.frames    0 FALSE
#&gt; 1205               Sys.getpid    0 FALSE
#&gt; 1207                 Sys.info    0 FALSE
#&gt; 1209           Sys.localeconv    0 FALSE
#&gt; 1210               sys.nframe    0 FALSE
#&gt; 1211              sys.on.exit    0 FALSE
#&gt; 1213              sys.parents    0 FALSE
#&gt; 1222               sys.status    0 FALSE
#&gt; 1223                 Sys.time    0 FALSE
#&gt; 1237                      tan    0  TRUE
#&gt; 1238                     tanh    0  TRUE
#&gt; 1239                    tanpi    0  TRUE
#&gt; 1254                 tracemem    0  TRUE
#&gt; 1259                 trigamma    0  TRUE
#&gt; 1261                    trunc    0  TRUE
#&gt; 1270           unCfillPOSIXlt    0  TRUE
#&gt; 1271                  unclass    0  TRUE
#&gt; 1295               untracemem    0  TRUE
#&gt; 1299                UseMethod    0  TRUE
#&gt; 1315                    while    0  TRUE
#&gt; 1332                    xtfrm    0  TRUE</code></pre>
</div>
</div>
<p>Answers:</p>
<ol type="a">
<li><code>scan()</code> has the most arguments, 22</li>
<li>most (but not all) are primitive functions (204 of 254)</li>
<li>the <code>ls()</code> in the original code could be expanded to search all packages</li>
</ol>
<p>AR Solutions: Let’s look at each sub-question separately:</p>
<ol type="a">
<li>To find the function with the most arguments, we first compute the length of <code>formals()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb415" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb415-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb415-2"></span>
<span id="cb415-3">n_args <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb415-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(formals) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb415-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(length)</span></code></pre></div>
</div>
<p>Then we sort <code>n_args</code> in decreasing order and look at its first entries.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb416" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb416-1">n_args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb416-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">decreasing =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb416-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb416-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; scan format.default source</span></span>
<span id="cb416-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 22 16 16</span></span>
<span id="cb416-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; formatC library merge.data.frame</span></span>
<span id="cb416-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 15 13 13</span></span></code></pre></div>
</div>
<ol start="2" type="a">
<li>We can further use <code>n_args</code> to find the number of functions with no arguments:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb417" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb417-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n_args <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 253</code></pre>
</div>
</div>
<p>However, this over counts because <code>formals()</code> returns <code>NULL</code> for primitive functions, and <code>length(NULL)</code> is 0. To fix this, we can first remove the primitive functions:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb419" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb419-1">n_args2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> funs <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb419-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">discard</span>(is.primitive) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb419-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(formals) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb419-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(length)</span>
<span id="cb419-5"></span>
<span id="cb419-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(n_args2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 48</code></pre>
</div>
</div>
<p>Indeed, most of the functions with no arguments are actually primitive functions.</p>
<ol start="3" type="a">
<li>To find all primitive functions, we can change the predicate in <code>Filter()</code> from <code>is.function()</code> to <code>is.primitive()</code>:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb421" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb421-1">funs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(is.primitive, objs)</span>
<span id="cb421-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(funs)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 205</code></pre>
</div>
</div>
<hr>
<ol start="6" type="1">
<li>What are the three important components of a function?</li>
</ol>
<p>Answer: the <code>formals()</code>, <code>body()</code> and <code>environment()</code>.</p>
<p>AR Solutions: These components are the function’s <code>body()</code>, <code>formals()</code> and <code>environment()</code>. However, as mentioned in <em>Advanced R</em>:</p>
<blockquote class="blockquote">
<p>There is one exception to the rule that functions have three components. Primitive functions, like <code>sum()</code>, call C code directly with <code>.Primitive()</code> and contain no R code. Therefore, their <code>formals()</code>, <code>body()</code>, and <code>environment()</code> are all <code>NULL</code>.</p>
</blockquote>
<hr>
<ol start="7" type="1">
<li>When does printing a function not show the environment it was created in?</li>
</ol>
<p>Answer: when it is created in the global environment.</p>
<p>AR Solutions: Primitive functions and functions created in the global environment do not print their environment.</p>
<hr>
</section>
<section id="exercises-15" class="level2">
<h2 class="anchored" data-anchor-id="exercises-15">6.4.5 Exercises</h2>
<ol type="1">
<li>What does the following code return? Why? Describe how each of the three <code>c</code>’s is interpreted.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb423" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb423-1">c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb423-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  c 
#&gt; 10</code></pre>
</div>
</div>
<p>Answer: a named vector, <code>c 10</code>. The first and final c is a variable. The second c is a function name. the third c is a name.</p>
<p>AR Solutions: This code returns a named numeric vector of length one — with one element of the value <code>10</code> and the name <code>"c"</code>. The first <code>c</code> represents the <code>c()</code> function, the second <code>c</code> is interpreted as a (quoted) name and the third <code>c</code> as a value.</p>
<hr>
<ol start="2" type="1">
<li>What are the four principles that govern how R looks for values?</li>
</ol>
<p>Answer: name masking, functions versus variables, a fresh start, dynamic lookup.</p>
<p>AR Solutions: R’s <a href="https://adv-r.hadley.nz/functions.html#lexical-scoping">lexical scoping</a> rules are based on these four principles: - <a href="https://adv-r.hadley.nz/functions.html#name-masking">Name masking</a> - <a href="https://adv-r.hadley.nz/functions.html#functions-versus-variables">Functions vs.&nbsp;variables</a> - <a href="https://adv-r.hadley.nz/functions.html#fresh-start">A fresh start</a> - <a href="https://adv-r.hadley.nz/functions.html#dynamic-lookup">Dynamic lookup</a></p>
<hr>
<ol start="3" type="1">
<li>What does the following function return? Make a prediction before running the code yourself.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb425" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb425-1">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb425-2">  f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return value of this is 101</span></span>
<span id="cb425-3">    f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb425-4">      x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb425-5">    }</span>
<span id="cb425-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb425-7">  }</span>
<span id="cb425-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb425-9">}</span>
<span id="cb425-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 202</code></pre>
</div>
</div>
<p>Answer: 202. Correct!</p>
<p>AR Solutions: Within this nested function two more functions also named <code>f</code> are defined and called. Because the functions are each executed in their own environment R will look up and use the functions defined last in these environments. The innermost <code>f()</code> is called last, though it is the first function to return a value. Therefore, the order of the calculation passes “from the inside to the outside” and the function returns <code>((10 ^ 2) + 1) * 2</code>, i.e.&nbsp;202.</p>
<hr>
</section>
<section id="exercises-16" class="level2">
<h2 class="anchored" data-anchor-id="exercises-16">6.5.4 Exercises</h2>
<ol type="1">
<li>What important property of <code>&amp;&amp;</code> makes <code>x_ok()</code> work?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb427" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb427-1">x_ok <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb427-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb427-3">}</span>
<span id="cb427-4"></span>
<span id="cb427-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb429" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb429-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb431" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb431-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>Answer: From the <code>&amp;&amp;</code> docs, “The longer forms evaluates left to right, proceeding only until the result is determined.”</p>
<p>What is different with this code? Why is this behaviour undesirable here?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb433" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb433-1">x_ok <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) {</span>
<span id="cb433-2">  <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb433-3">}</span>
<span id="cb433-4"></span>
<span id="cb433-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; logical(0)</code></pre>
</div>
<div class="sourceCode cell-code" id="cb435" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb435-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb437" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb437-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">x_ok</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE FALSE FALSE</code></pre>
</div>
</div>
<p>Answer: “The shorter forms performs elementwise comparisons in much the same way as arithmetic operators.” This is undesirable because the intent of the function is to return <code>TRUE</code> or <code>FALSE</code>.</p>
<p>AR Solutions: In summary: <code>&amp;&amp;</code> short-circuits which means that if the left-hand side is <code>FALSE</code> it doesn’t evaluate the right-hand side (because it doesn’t matter). Similarly, if the left-hand side of <code>||</code> is <code>TRUE</code> it doesn’t evaluate the right-hand side.</p>
<p>We expect <code>x_ok()</code> to validate its input via certain criteria: it must not be <code>NULL</code>, have length <code>1</code> and be greater than <code>0</code>. Meaningful outcomes for this assertion will be <code>TRUE</code>, <code>FALSE</code> or <code>NA</code>. The desired behaviour is reached by combining the assertions through <code>&amp;&amp;</code> instead of <code>&amp;</code>.</p>
<p><code>&amp;&amp;</code> does not perform elementwise comparisons; instead it uses the first element of each value only. It also uses lazy evaluation, in the sense that evaluation “proceeds only until the result is determined” (from <code>?Logic</code>). This means that the RHS of <code>&amp;&amp;</code> won’t be evaluated if the LHS already determines the outcome of the comparison (e.g.&nbsp;evaluate to <code>FALSE</code>). This behaviour is also known as “short-circuiting”. For some situations (<code>x = 1</code>) both operators will lead to the same result. But this is not always the case. For <code>x = NULL</code>, the <code>&amp;&amp;</code>-operator will stop after the <code>!is.null</code> statement and return the result. The following conditions won’t even be evaluated! (If the other conditions are also evaluated (by the use of <code>&amp;</code>), the outcome would change. <code>NULL &gt; 0</code> returns <code>logical(0)</code>, which is not helpful in this case.)</p>
<p>We can also see the difference in behaviour, when we set <code>x = 1:3</code>. The <code>&amp;&amp;</code>-operator returns the result from <code>length(x) == 1</code>, which is <code>FALSE</code>. Using <code>&amp;</code> as the logical operator leads to the (vectorised) <code>x &gt; 0</code> condition being evaluated and also returned.</p>
<hr>
<ol start="2" type="1">
<li>What does this function return? Why? Which principle does it illustrate?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb439" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb439-1">f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> z) {</span>
<span id="cb439-2">  z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb439-3">  x</span>
<span id="cb439-4">}</span>
<span id="cb439-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 100</code></pre>
</div>
</div>
<p>Answer: 100, lazy evaluation. <code>x = z</code> isn’t evaluated until <code>x</code>.</p>
<p>AR Solutions: The function returns 100. The default argument (<code>x = z</code>) gets lazily evaluated within the function environment when <code>x</code> gets accessed. At this time <code>z</code> has already been bound to the value <code>100</code>. The illustrated principle here is <em>lazy evaluation</em>.</p>
<hr>
<ol start="3" type="1">
<li>What does this function return? Why? Which principle does it illustrate?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb441" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb441-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb441-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: off</span></span>
<span id="cb441-3">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> {y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>; <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint: semicolon_linter.</span></span>
<span id="cb441-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># styler: on</span></span>
<span id="cb441-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(x, y)</span>
<span id="cb441-6">}</span>
<span id="cb441-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb443" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb443-1">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 10</code></pre>
</div>
</div>
<p>Answer: <code>c(2, 1)</code>. default arguments.</p>
<p>AR Solutions: The function returns <code>c(2, 1)</code> which is due to <em>name masking</em>. When <code>x</code> is accessed within <code>c()</code>, the promise <code>x = {y &lt;- 1; 2}</code> is evaluated inside <code>f1()</code>’s environment. <code>y</code> gets bound to the value <code>1</code> and the return value of <code>{()</code> (<code>2</code>) gets assigned to <code>x</code>. When <code>y</code> gets accessed next within <code>c()</code>, it has already the value <code>1</code> and R doesn’t need to look it up any further. Therefore, the promise <code>y = 0</code> won’t be evaluated. Also, as <code>y</code> is assigned within <code>f1()</code>’s environment, the value of the global variable <code>y</code> is left untouched.</p>
<hr>
<ol start="4" type="1">
<li>In <code>hist()</code>, the default value of <code>xlim</code> is <code>range(breaks)</code>, the default value for <code>breaks</code> is <code>"Sturges"</code>, and</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb445" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb445-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">range</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sturges"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "Sturges" "Sturges"</code></pre>
</div>
</div>
<p>Explain how <code>hist()</code> works to get a correct <code>xlim</code> value.</p>
<p>Answer: from the docs, “Note that <code>xlim</code> is <em>not</em> used to define the histogram (breaks), but only for plotting (when <code>plot = TRUE</code>).” So, the breakpoints are calculated when the object is created, and <code>xlim</code> is calculated when the histogram is plotted, in the second step.</p>
<p>AR Solutions: The <code>xlim</code> argument of <code>hist()</code> defines the range of the histogram’s x-axis. In order to provide a valid axis <code>xlim</code> must contain a numeric vector of exactly two unique values. Consequently, for the default <code>xlim = range(breaks)</code>), <code>breaks</code> must evaluate to a vector with at least two unique values.</p>
<p>During execution <code>hist()</code> overwrites the <code>breaks</code> argument. The <code>breaks</code> argument is quite flexible and allows the users to provide the breakpoints directly or compute them in several ways. Therefore, the specific behaviour depends highly on the input. But <code>hist</code> ensures that <code>breaks</code> evaluates to a numeric vector containing at least two unique elements before <code>xlim</code> is computed.</p>
<hr>
<ol start="5" type="1">
<li>Explain why this function works. Why is it confusing?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb447" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb447-1">show_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Error!"</span>)) {</span>
<span id="cb447-2">  stop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb447-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb447-4">}</span>
<span id="cb447-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_time</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "2023-12-04 15:10:35 CST"</code></pre>
</div>
</div>
<p>Answer: <code>stop</code> is redefined before <code>x</code> is evaluated. This is a confusing use of lazy evaluation.</p>
<p>AR Solutions: Before <code>show_time()</code> accesses <code>x</code> (default <code>stop("Error")</code>), the <code>stop()</code> function is masked by <code>function(...) Sys.time()</code>. As default arguments are evaluated in the function environment, <code>print(x)</code> will be evaluated as <code>print(Sys.time())</code>.</p>
<p>This function is confusing because its behaviour changes when <code>x</code>’s value is supplied directly. Now the value from the calling environment will be used and the overwriting of <code>stop()</code> won’t affect <code>x</code> anymore.</p>
<hr>
<ol start="6" type="1">
<li>How many arguments are required when calling <code>library()</code>?</li>
</ol>
<p>Answer: zero. <code>library()</code> uses <code>missing()</code> to return the list of available packages if there are no arguments.</p>
<p>AR Solutions: <code>library()</code> doesn’t require any arguments. When called without arguments <code>library()</code> invisibly returns a list of class <code>libraryIQR</code>, which contains a results matrix with one row and three columns per installed package. These columns contain entries for the name of the package (“Package”), the path to the package (“LibPath”) and the title of the package (“Title”). <code>library()</code> also has its own print method (<code>print.libraryIQR()</code>), which displays this information conveniently in its own window.</p>
<p>This behaviour is also documented under the details section of <code>library()</code>’s help page (<code>?library</code>):</p>
<blockquote class="blockquote">
<p>If library is called with no package or help argument, it lists all available packages in the libraries specified by lib.loc, and returns the corresponding information in an object of class “libraryIQR”. (The structure of this class may change in future versions.) Use .packages(all = TRUE) to obtain just the names of all available packages, and installed.packages() for even more information.</p>
</blockquote>
<p>Because the <code>package</code> and <code>help</code> argument from <code>library()</code> do not show a default value, it’s easy to overlook the possibility to call <code>library()</code> without these arguments. (Instead of providing <code>NULL</code>s as default values <code>library()</code> uses <code>missing()</code> to check if these arguments were provided.)</p>
<hr>
</section>
<section id="exercises-17" class="level2">
<h2 class="anchored" data-anchor-id="exercises-17">6.6.1 Exercises</h2>
<ol type="1">
<li>Explain the following results:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb449" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb449-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb451" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb451-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb453" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb453-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.omit =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 7</code></pre>
</div>
<div class="sourceCode cell-code" id="cb455" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb455-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.omit =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
</div>
<p>Answer:</p>
<ul>
<li>“<code>sum()</code> returns the sum of all the values present in its arguments.” The first example is straightforward. In the second sum example, <code>na.omit</code> isn’t a valid argument (<code>na.rm</code> is), so the <code>TRUE</code> value is passed to <code>...</code>, coerced to 1, and included in the sum.</li>
<li><code>mean()</code> takes a single parameter, and passes on remaining arguments to <code>...</code>. In both cases, the arguments after the <code>1</code> are silently dropped. The correct form would be <code>mean(c(1, 2, 3))</code>.</li>
</ul>
<p>AR Solutions: Let’s inspect the arguments and their order for both functions. For <code>sum()</code> these are <code>...</code> and <code>na.rm</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb457" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb457-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(sum)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (..., na.rm = FALSE)</code></pre>
</div>
</div>
<p>For the <code>...</code> argument <code>sum()</code> expects numeric, complex, or logical vector input (see <code>?sum</code>). Unfortunately, when <code>...</code> is used, misspelled arguments (!) like <code>na.omit</code> won’t raise an error (in case of no further input checks). So instead, <code>na.omit</code> is treated as a logical and becomes part of the <code>...</code> argument. It will be coerced to <code>1</code> and be part of the sum. All other arguments are left unchanged. Therefore <code>sum(1, 2, 3)</code> returns <code>6</code> and <code>sum(1, 2, 3, na.omit = TRUE)</code> returns <code>7</code>.</p>
<p>In contrast, the generic function <code>mean()</code> expects <code>x</code>, <code>trim</code>, <code>na.rm</code> and <code>...</code> for its default method.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb459" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb459-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(mean.default)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, trim = 0, na.rm = FALSE, ...)</code></pre>
</div>
</div>
<p>As <code>na.omit</code> is not one of <code>mean()</code>’s named arguments (<code>x</code>; and no candidate for partial matching), <code>na.omit</code> again becomes part of the <code>...</code> argument. However, in contrast to <code>sum()</code> the elements of <code>...</code> are not “part” of the mean. The other supplied arguments are matched by their order, i.e.&nbsp;<code>x = 1</code>, <code>trim = 2</code> and <code>na.rm = 3</code>. As <code>x</code> is of length 1 and not <code>NA</code>, the settings of <code>trim</code> and <code>na.rm</code> do not affect the calculation of the mean. Both calls (<code>mean(1, 2, 3)</code> and <code>mean(1, 2, 3, na.omit = TRUE)</code>) return <code>1</code>.</p>
<hr>
<ol start="2" type="1">
<li>Explain how to find the documentation for the named arguments in the following function call:</li>
</ol>
<!-- TODO: bugfix: the figure below renders incorrectly,
     possibly due to https://github.com/rstudio/rstudio/issues/4521
     see also: https://github.com/hadley/adv-r/blob/master/common.R
     and: https://yihui.org/knitr/options/#plots
     workaround: use {r, fig.asp = 1}.
     {r, fig.asp = 1, fig.width = 3} looks correct in RStudio, but doesn't render properly for
     build_analysis_site(). {r, fig.asp = 1} works with build_analysis_site() but is not sized
     properly in RStudio. {r, fig.asp = 1} is the best option for now.
  -->
<div class="cell" data-layout-align="center" data-small_mar="true" data-fig.asp="1">
<div class="sourceCode cell-code" id="cb461" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb461-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col.lab =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/advanced-r-1_files/figure-html/unnamed-chunk-102-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
<p>Answer: in other functions, specifically <code>par()</code> and <code>plot.default()</code>.</p>
<p>AR Solutions: First we type <code>?plot</code> in the console and check the “Usage” section which contains:</p>
<div class="sourceCode" id="cb462" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb462-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(x, y, ...)</span></code></pre></div>
<p>The arguments we want to learn more about (<code>col</code>, <code>pch</code>, <code>xlab</code>, <code>col.lab</code>) are part of the <code>...</code> argument. There we can find information for the <code>xlab</code> argument and a recommendation to visit <code>?par</code> for the other arguments. Under <code>?par</code> we type “col” into the search bar, which leads us to the section “Color Specification”. We also search for the <code>pch</code> argument, which leads to the recommendation to check <code>?points</code>. Finally, <code>col.lab</code> is also directly documented within <code>?par</code>.</p>
<hr>
<ol start="3" type="1">
<li>Why does <code>plot(1:10, col = "red")</code> only colour the points, not the axes or labels? Read the source code of <code>plot.default()</code> to find out.</li>
</ol>
<div class="sourceCode" id="cb463" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb463-1">localAxis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., col, bg, pch, cex, lty, lwd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Axis</span>(...)</span>
<span id="cb463-2">localBox <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., col, bg, pch, cex, lty, lwd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">box</span>(...)</span>
<span id="cb463-3">localWindow <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., col, bg, pch, cex, lty, lwd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot.window</span>(...)</span>
<span id="cb463-4">localTitle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., col, bg, pch, cex, lty, lwd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(...)</span></code></pre></div>
<p>Answer: <code>plot.default()</code> discards <code>col</code> and several other arguments when calling <code>Axis()</code>, <code>box()</code>, <code>plot.window()</code>, and <code>title()</code>.</p>
<p>AR Solutions: To learn about the internals of <code>plot.default()</code> we add <code>browser()</code> to the first line of the code and interactively run <code>plot(1:10, col = "red")</code>. This way we can see how the plot is built and learn where the axes are added. This leads us to the function call</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb464" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb464-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">localTitle</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">main =</span> main, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sub =</span> sub, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xlab =</span> xlab, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ylab =</span> ylab, ...)</span></code></pre></div>
</div>
<p>The <code>localTitle()</code> function was defined in the first lines of <code>plot.default()</code> as:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb465" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb465-1">localTitle <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(..., col, bg, pch, cex, lty, lwd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span>(...)</span></code></pre></div>
</div>
<p>The call to <code>localTitle()</code> passes the <code>col</code> parameter as part of the <code>...</code> argument to <code>title()</code>. <code>?title</code> tells us that the <code>title()</code> function specifies four parts of the plot: Main (title of the plot), sub (sub-title of the plot) and both axis labels. Therefore, it would introduce ambiguity inside <code>title()</code> to use <code>col</code> directly. Instead, one has the option to supply <code>col</code> via the <code>...</code> argument, via <code>col.lab</code> or as part of <code>xlab</code> in the form <code>xlab = list(c("index"), col = "red")</code> (similar for <code>ylab</code>).</p>
<hr>
</section>
<section id="exercises-18" class="level2">
<h2 class="anchored" data-anchor-id="exercises-18">6.7.5 Exercises</h2>
<ol type="1">
<li>What does <code>load()</code> return? Why don’t you normally see these values?</li>
</ol>
<p>Answer: from the docs, <code>load()</code> returns “A character vector of the names of objects created, invisibly.”</p>
<p>AR Solutions: <code>load()</code> loads objects saved to disk in <code>.Rdata</code> files by <code>save()</code>. When run successfully, <code>load()</code> invisibly returns a character vector containing the names of the newly loaded objects. To print these names to the console, one can set the argument <code>verbose</code> to <code>TRUE</code> or surround the call in parentheses to trigger R’s auto-printing mechanism.</p>
<hr>
<ol start="2" type="1">
<li>What does <code>write.table()</code> return? What would be more useful?</li>
</ol>
<p>Answer: it returns <code>invisible(NULL)</code>. Returning the written table or the argument <code>x</code> would be more useful.</p>
<p>AR Solutions: <code>write.table()</code> writes an object, usually a data frame or a matrix, to disk. The function invisibly returns <code>NULL</code>. It would be more useful if <code>write.table()</code> would (invisibly) return the input data, <code>x</code>. This would allow to save intermediate results and directly take on further processing steps without breaking the flow of the code (i.e.&nbsp;breaking it into different lines). One package which uses this pattern is the <code>{readr}</code> package, which is part of the <a href="https://www.tidyverse.org/">tidyverse-ecosystem</a>.</p>
<hr>
<ol start="3" type="1">
<li>How does the <code>chdir</code> parameter of <code>source()</code> compare to <code>with_dir()</code>? Why might you prefer one to the other?</li>
</ol>
<p>Answer: both temporarily change the working directory. <code>chdir</code> is preferable since this is expected behavior for the function, unless you need to set a working directory other than the directory containing <code>file</code>.</p>
<p>AR Solutions: <code>with_dir()</code> takes a path for a working directory (<code>dir</code>) as its first argument. This is the directory where the provided code (<code>code</code>) should be executed. Therefore, the current working directory is changed in <code>with_dir()</code> via <code>setwd()</code>. Then, <code>on.exit()</code> ensures that the modification of the working directory is reset to the initial value when the function exits. By passing the path explicitly, the user has full control over the directory to execute the code in.</p>
<p>In <code>source()</code> the code is passed via the <code>file</code> argument (a path to a file). The <code>chdir</code> argument specifies if the working directory should be changed to the directory containing the file. The default for <code>chdir</code> is <code>FALSE</code>, so you don’t have to provide a value. However, as you can only provide <code>TRUE</code> or <code>FALSE</code>, you are also less flexible in choosing the working directory for the code execution.</p>
<hr>
<ol start="4" type="1">
<li>Write a function that opens a graphics device, runs the supplied code, and closes the graphics device (always, regardless of whether or not the plotting code works).</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb466" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb466-1">with_png <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code, ...) {</span>
<span id="cb466-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">png</span>(...)</span>
<span id="cb466-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">after =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb466-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(code)</span>
<span id="cb466-5">}</span>
<span id="cb466-6"></span>
<span id="cb466-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_png</span>(</span>
<span id="cb466-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb466-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">filename =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rendered/withpng-example.png"</span>,</span>
<span id="cb466-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use 3 times default resolution which is close to retina display ppi (218-254 depending on model)</span></span>
<span id="cb466-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://support.apple.com/en-us/HT202471</span></span>
<span id="cb466-12">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">res =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">72</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb466-13">)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/rendered/withpng-example.png" class="img-fluid figure-img"></p>
<figcaption>with_png output</figcaption>
</figure>
</div>
<p>Answer: code example above.</p>
<p>AR Solutions: To control the graphics device we use <code>pdf()</code> and <code>dev.off()</code>. To ensure a clean termination <code>on.exit()</code> is used.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb467" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb467-1">plot_pdf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb467-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pdf</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test.pdf"</span>)</span>
<span id="cb467-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dev.off</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb467-4">  code</span>
<span id="cb467-5">}</span></code></pre></div>
</div>
<hr>
<ol start="5" type="1">
<li>We can use <code>on.exit()</code> to implement a simple version of <code>capture.output()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb468" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb468-1">capture.output2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb468-2">  temp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb468-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(temp), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">after =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb468-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sink</span>(temp)</span>
<span id="cb468-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">on.exit</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sink</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">add =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">after =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb468-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(code)</span>
<span id="cb468-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readLines</span>(temp)</span>
<span id="cb468-8">}</span>
<span id="cb468-9"></span>
<span id="cb468-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capture.output2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sep =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b" "c"</code></pre>
</div>
</div>
<p>Compare <code>capture.output()</code> to <code>capture.output2()</code>. How do the functions differ? What features have I removed to make the key ideas easier to see? How have I rewritten the key ideas so they’re easier to understand?</p>
<p>Answer: <code>capture.output2()</code> has fewer features and uses two separate calls to <code>on.exit()</code>. It simply returns the output (by line) from the executed code, and highlights the key idea, using <code>sink()</code> to capture output to a temporary file.</p>
<p>AR Solutions: Using <code>body(capture.output)</code> we inspect the source code of the original <code>capture.output()</code> function: The implementation for <code>capture.output()</code> is quite a bit longer (39 lines vs.&nbsp;7 lines).</p>
<p>In <code>capture_output2()</code> the code is simply forced, and the output is caught via <code>sink()</code> in a temporary file. An additional feature of <code>capture_output()</code> is that one can also capture messages by setting <code>type = "message"</code>. As this is internally forwarded to <code>sink()</code>, this behaviour (and also <code>sink()</code>’s <code>split</code> argument) could be easily introduced within <code>capture_output2()</code> as well.</p>
<p>The main difference is that <code>capture.output()</code> calls print.</p>
<hr>
</section>
<section id="exercises-19" class="level2">
<h2 class="anchored" data-anchor-id="exercises-19">6.8.6 Exercises</h2>
<ol type="1">
<li>Rewrite the following code snippets into prefix form:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb470" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb470-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb472" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb472-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb474" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb474-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb476" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb476-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 6</code></pre>
</div>
<div class="sourceCode cell-code" id="cb478" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb478-1">fxn <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, n) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) x[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> x[[n]]</span>
<span id="cb478-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fxn</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb480" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb480-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fxn</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb482" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb482-1">fxn2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, n) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">if</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x, n))</span>
<span id="cb482-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fxn2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb484" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb484-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fxn2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 2</code></pre>
</div>
</div>
<p>Answer: inline above.</p>
<p>AR Solutions: Let’s rewrite the expressions to match the exact syntax from the code above. Because prefix functions already define the execution order, we may omit the parentheses in the second expression.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb486" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb486-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb486-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span>
<span id="cb486-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb486-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">if</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&lt;=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x, n))</span></code></pre></div>
</div>
<hr>
<ol start="2" type="1">
<li>Clarify the following list of odd function calls:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb487" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb487-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span>
<span id="cb487-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb487-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">m =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">u =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"p"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x)</span></code></pre></div>
</div>
<p>Answers: improved code below.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb488" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb488-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb488-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb488-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pairwise.complete.obs"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kendall"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 0.07347184</code></pre>
</div>
</div>
<p>AR Solutions: None of these functions provides a <code>...</code> argument. Therefore, the function arguments are first matched exactly, then via partial matching and finally by position. This leads us to the following explicit function calls:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb490" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb490-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb490-2">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">runif</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb490-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cor</span>(x, y, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">use =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pairwise.complete.obs"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kendall"</span>)</span></code></pre></div>
</div>
<hr>
<ol start="3" type="1">
<li>Explain why the following code fails:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb491" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb491-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">modify&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, position, value) {</span>
<span id="cb491-2">  x[position] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb491-3">  x</span>
<span id="cb491-4">}</span>
<span id="cb491-5"></span>
<span id="cb491-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modify</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in modify(get("x"), 1) &lt;- 10 : 
#&gt;   target of assignment expands to non-language object</code></pre>
</div>
<div class="sourceCode cell-code" id="cb493" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb493-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Error: target of assignment expands to non-language object</span></span></code></pre></div>
</div>
<p>Answer: as explained on <a href="https://stackoverflow.com/questions/27662162/error-in-my-code-target-of-assignment-expands-to-non-language-object">stack overflow</a>, the error is caused when assigning to an object directly, instead of a name that refers to the object (like <code>x</code>).</p>
<p>AR Solutions: First, let’s define <code>x</code> and recall the definition of <code>modify()</code> from <em>Advanced R</em>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb494" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb494-1">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb494-2"></span>
<span id="cb494-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">modify&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, position, value) {</span>
<span id="cb494-4">  x[position] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb494-5">  x</span>
<span id="cb494-6">}</span></code></pre></div>
</div>
<p>R internally transforms the code, and the transformed code reproduces the error above:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb495" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb495-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">modify&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb495-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Error in get("x") &lt;- `modify&lt;-`(get("x"), 1, 10) :</span></span>
<span id="cb495-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   target of assignment expands to non-language object</span></span></code></pre></div>
</div>
<p>The error occurs during the assignment because no corresponding replacement function, i.e.&nbsp;<code>get&lt;-</code>, exists for <code>get()</code>. To confirm this, we reproduce the error via the following simplified example.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb496" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb496-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb496-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Error in get("x") &lt;- 2 :</span></span>
<span id="cb496-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;   target of assignment expands to non-language object</span></span></code></pre></div>
</div>
<hr>
<ol start="4" type="1">
<li>Create a replacement function that modifies a random location in a vector.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb497" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb497-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">modrand&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb497-2">  x[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb497-3">  x</span>
<span id="cb497-4">}</span>
<span id="cb497-5"></span>
<span id="cb497-6">v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb497-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">modrand</span>(v) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span></span>
<span id="cb497-8">v</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  1  2  3  4  5  6  7  8  9 NA 11 12 13 14 15 16 17 18 19 20</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: Let’s define <code>random&lt;-</code> like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb499" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb499-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">random&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, value) {</span>
<span id="cb499-2">  idx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb499-3">  x[idx] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb499-4">  x</span>
<span id="cb499-5">}</span></code></pre></div>
</div>
<hr>
<ol start="5" type="1">
<li>Write your own version of <code>+</code> that pastes its inputs together if they are character vectors but behaves as usual otherwise. In other words, make this code work:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb500" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb500-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) {</span>
<span id="cb500-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(x) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(y)) {</span>
<span id="cb500-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(x, y))</span>
<span id="cb500-4">  }</span>
<span id="cb500-5">  base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(x, y)</span>
<span id="cb500-6">}</span>
<span id="cb500-7"></span>
<span id="cb500-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb502" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb502-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] 3</span></span>
<span id="cb502-2"></span>
<span id="cb502-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "ab"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb504" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb504-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; [1] "ab"</span></span>
<span id="cb504-2"></span>
<span id="cb504-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: To achieve this behaviour, we need to override the <code>+</code> operator. We need to take care to not use the <code>+</code> operator itself inside of the function definition, as this would lead to an undesired infinite recursion. We also add <code>b = 0L</code> as a default value to keep the behaviour of <code>+</code> as a unary operator, i.e.&nbsp;to keep <code>+ 1</code> working and not throwing an error.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb505" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb505-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>L) {</span>
<span id="cb505-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(a) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(b)) {</span>
<span id="cb505-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(a, b)</span>
<span id="cb505-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb505-5">    base<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(a, b)</span>
<span id="cb505-6">  }</span>
<span id="cb505-7">}</span>
<span id="cb505-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb505-9"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb507" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb507-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb509" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb509-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "ab"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb511" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb511-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return back to the original `+` operator</span></span>
<span id="cb511-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>)</span></code></pre></div>
</div>
<hr>
<ol start="6" type="1">
<li>Create a list of all the replacement functions found in the base package. Which ones are primitive functions? (Hint: use <code>apropos()</code>.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb512" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb512-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all replacement functions in base</span></span>
<span id="cb512-2">fun_args2[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endsWith</span>(fun_args2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>), ]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] ".rowNamesDF&lt;-"    "[[&lt;-"             "[&lt;-"              "@&lt;-"             
#&gt;  [5] "&lt;-"               "&lt;&lt;-"              "$&lt;-"              "attr&lt;-"          
#&gt;  [9] "attributes&lt;-"     "body&lt;-"           "class&lt;-"          "colnames&lt;-"      
#&gt; [13] "comment&lt;-"        "diag&lt;-"           "dim&lt;-"            "dimnames&lt;-"      
#&gt; [17] "Encoding&lt;-"       "environment&lt;-"    "formals&lt;-"        "is.na&lt;-"         
#&gt; [21] "length&lt;-"         "levels&lt;-"         "mode&lt;-"           "mostattributes&lt;-"
#&gt; [25] "names&lt;-"          "oldClass&lt;-"       "parent.env&lt;-"     "regmatches&lt;-"    
#&gt; [29] "row.names&lt;-"      "rownames&lt;-"       "split&lt;-"          "storage.mode&lt;-"  
#&gt; [33] "substr&lt;-"         "substring&lt;-"      "units&lt;-"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb514" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb514-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all replacement primitive functions in base</span></span>
<span id="cb514-2">fun_args2[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">endsWith</span>(fun_args2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> fun_args2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>prim, ]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>name</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "[[&lt;-"           "[&lt;-"            "@&lt;-"            "&lt;-"            
#&gt;  [5] "&lt;&lt;-"            "$&lt;-"            "attr&lt;-"         "attributes&lt;-"  
#&gt;  [9] "class&lt;-"        "dim&lt;-"          "dimnames&lt;-"     "environment&lt;-" 
#&gt; [13] "length&lt;-"       "levels&lt;-"       "names&lt;-"        "oldClass&lt;-"    
#&gt; [17] "storage.mode&lt;-"</code></pre>
</div>
</div>
<p>Answer: while you could use <code>apropos("&lt;-")</code>, I leveraged the existing code from 6.2.5 #5.</p>
<p>AR Solutions: The hint suggests to look for functions with a specific naming pattern: Replacement functions conventionally end on “&lt;-”. We can search for these objects by supplying the regular expression <code>"&lt;-$"</code> to <code>apropos()</code>. <code>apropos()</code> also allows to return the position on the search path (<code>search()</code>) for each of its matches via setting <code>where = TRUE</code>. Finally, we can set <code>mode = function</code> to narrow down our search to relevant objects only. This gives us the following statement to begin with:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb516" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb516-1">repls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apropos</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;-"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"function"</span>)</span>
<span id="cb516-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(repls, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                     14                     14                     14 
#&gt;        ".rowNamesDF&lt;-"                 "[[&lt;-"      "[[&lt;-.data.frame" 
#&gt;                     14                     14                     14 
#&gt;          "[[&lt;-.factor" "[[&lt;-.numeric_version"         "[[&lt;-.POSIXlt" 
#&gt;                     14                     14                     14 
#&gt;                  "[&lt;-"       "[&lt;-.data.frame"             "[&lt;-.Date" 
#&gt;                     14                     14                     14 
#&gt;         "[&lt;-.difftime"           "[&lt;-.factor"  "[&lt;-.numeric_version" 
#&gt;                     14                     14                     14 
#&gt;          "[&lt;-.POSIXct"          "[&lt;-.POSIXlt"                  "@&lt;-" 
#&gt;                      3                     14                     14 
#&gt;                "%@%&lt;-"                   "&lt;-"                  "&lt;&lt;-" 
#&gt;                     14                     14                     14 
#&gt;                  "$&lt;-"       "$&lt;-.data.frame"          "$&lt;-.POSIXlt" 
#&gt;                     12                     14                     14 
#&gt;                 "as&lt;-"               "attr&lt;-"         "attributes&lt;-" 
#&gt;                     12                     14                     14 
#&gt;               "body&lt;-"               "body&lt;-"              "class&lt;-" 
#&gt;                     12                     14                     14 
#&gt;             "coerce&lt;-"           "colnames&lt;-"            "comment&lt;-"</code></pre>
</div>
</div>
<p>To restrict <code>repl</code> to names of replacement functions from the <code>{base}</code> package, we select only matches containing the relevant position on the search path.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb518" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb518-1">repls_base <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> repls[<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(repls) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">search</span>())]</span>
<span id="cb518-2">repls_base</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;                        14                        14                        14 
#&gt;           ".rowNamesDF&lt;-"                    "[[&lt;-"         "[[&lt;-.data.frame" 
#&gt;                        14                        14                        14 
#&gt;             "[[&lt;-.factor"    "[[&lt;-.numeric_version"            "[[&lt;-.POSIXlt" 
#&gt;                        14                        14                        14 
#&gt;                     "[&lt;-"          "[&lt;-.data.frame"                "[&lt;-.Date" 
#&gt;                        14                        14                        14 
#&gt;            "[&lt;-.difftime"              "[&lt;-.factor"     "[&lt;-.numeric_version" 
#&gt;                        14                        14                        14 
#&gt;             "[&lt;-.POSIXct"             "[&lt;-.POSIXlt"                     "@&lt;-" 
#&gt;                        14                        14                        14 
#&gt;                      "&lt;-"                     "&lt;&lt;-"                     "$&lt;-" 
#&gt;                        14                        14                        14 
#&gt;          "$&lt;-.data.frame"             "$&lt;-.POSIXlt"                  "attr&lt;-" 
#&gt;                        14                        14                        14 
#&gt;            "attributes&lt;-"                  "body&lt;-"                 "class&lt;-" 
#&gt;                        14                        14                        14 
#&gt;              "colnames&lt;-"               "comment&lt;-"                  "diag&lt;-" 
#&gt;                        14                        14                        14 
#&gt;                   "dim&lt;-"              "dimnames&lt;-"   "dimnames&lt;-.data.frame" 
#&gt;                        14                        14                        14 
#&gt;              "Encoding&lt;-"           "environment&lt;-"               "formals&lt;-" 
#&gt;                        14                        14                        14 
#&gt;                 "is.na&lt;-"         "is.na&lt;-.default"          "is.na&lt;-.factor" 
#&gt;                        14                        14                        14 
#&gt; "is.na&lt;-.numeric_version"                "length&lt;-"           "length&lt;-.Date" 
#&gt;                        14                        14                        14 
#&gt;       "length&lt;-.difftime"         "length&lt;-.factor"        "length&lt;-.POSIXct" 
#&gt;                        14                        14                        14 
#&gt;        "length&lt;-.POSIXlt"                "levels&lt;-"         "levels&lt;-.factor" 
#&gt;                        14                        14                        14 
#&gt;                  "mode&lt;-"        "mostattributes&lt;-"                 "names&lt;-" 
#&gt;                        14                        14                        14 
#&gt;         "names&lt;-.POSIXlt"              "oldClass&lt;-"            "parent.env&lt;-" 
#&gt;                        14                        14                        14 
#&gt;            "regmatches&lt;-"             "row.names&lt;-"  "row.names&lt;-.data.frame" 
#&gt;                        14                        14                        14 
#&gt;     "row.names&lt;-.default"              "rownames&lt;-"                 "split&lt;-" 
#&gt;                        14                        14                        14 
#&gt;      "split&lt;-.data.frame"         "split&lt;-.default"          "storage.mode&lt;-" 
#&gt;                        14                        14                        14 
#&gt;                "substr&lt;-"             "substring&lt;-"                 "units&lt;-" 
#&gt;                        14 
#&gt;        "units&lt;-.difftime"</code></pre>
</div>
</div>
<p>To find out which of these functions are primitives, we first search for these functions via <code>mget()</code> and then subset the result using <code>Filter()</code> and <code>is.primitive()</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb520" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb520-1">repls_base_prim <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mget</span>(repls_base, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">envir =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">baseenv</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb520-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Filter</span>(is.primitive, .) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb520-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>()</span>
<span id="cb520-4">repls_base_prim</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "[[&lt;-"           "[&lt;-"            "@&lt;-"            "&lt;-"            
#&gt;  [5] "&lt;&lt;-"            "$&lt;-"            "attr&lt;-"         "attributes&lt;-"  
#&gt;  [9] "class&lt;-"        "dim&lt;-"          "dimnames&lt;-"     "environment&lt;-" 
#&gt; [13] "length&lt;-"       "levels&lt;-"       "names&lt;-"        "oldClass&lt;-"    
#&gt; [17] "storage.mode&lt;-"</code></pre>
</div>
</div>
<p>Overall the <code>base</code> package contains 63 replacement functions of which 17 are primitive functions.</p>
<hr>
<ol start="7" type="1">
<li>What are valid names for user-created infix functions?</li>
</ol>
<p>Answer: they must begin and end with <code>%</code>, and can contain any sequence of characters except <code>%</code>.</p>
<hr>
<ol start="8" type="1">
<li>Create an infix <code>xor()</code> operator.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb522" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb522-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%xor%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(x, y)</span>
<span id="cb522-2"></span>
<span id="cb522-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb524" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb524-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb526" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb526-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb528" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb528-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%xor%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb530" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb530-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%xor%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb532" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb532-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%xor%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: We could create an infix <code>%xor%</code> like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb534" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb534-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%xor%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb534-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">xor</span>(a, b)</span>
<span id="cb534-3">}</span>
<span id="cb534-4"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%xor%</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb536" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb536-1"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%xor%</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
</div>
<hr>
<ol start="9" type="1">
<li>Create infix versions of the set functions <code>intersect()</code>, <code>union()</code>, and <code>setdiff()</code>. You might call them <code>%n%</code>, <code>%u%</code>, and <code>%/%</code> to match conventions from mathematics.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb538" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb538-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%n%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intersect</span>(x, y)</span>
<span id="cb538-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%u%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(x, y)</span>
<span id="cb538-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%s%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, y) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(x, y)</span>
<span id="cb538-4"></span>
<span id="cb538-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># taken from docs examples</span></span>
<span id="cb538-6">(x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  2  4  6  7 10 11 13 15 20 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb540" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb540-1">(y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)), <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  4  6  9 10 19 20 22 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb542" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb542-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%u%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1]  2  4  6  7 10 11 13 15 20 NA  9 19 22</code></pre>
</div>
<div class="sourceCode cell-code" id="cb544" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb544-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%n%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  4  6 10 20 NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb546" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb546-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  2  7 11 13 15</code></pre>
</div>
<div class="sourceCode cell-code" id="cb548" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb548-1">y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%s%</span> x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1]  9 19 22</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: These infix operators could be defined in the following way. (<code>%/%</code> is chosen instead of <code>%\%</code>, because <code>\</code> serves as an escape character.)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb550" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb550-1"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%n%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb550-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">intersect</span>(a, b)</span>
<span id="cb550-3">}</span>
<span id="cb550-4"></span>
<span id="cb550-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%u%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb550-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">union</span>(a, b)</span>
<span id="cb550-7">}</span>
<span id="cb550-8"></span>
<span id="cb550-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">%/%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(a, b) {</span>
<span id="cb550-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setdiff</span>(a, b)</span>
<span id="cb550-11">}</span>
<span id="cb550-12"></span>
<span id="cb550-13">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb550-14">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb550-15"></span>
<span id="cb550-16">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%u%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b" "d" "c"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb552" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb552-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%n%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "d"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb554" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb554-1">x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%/%</span> y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "b"</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="environments" class="level1">
<h1>7 Environments</h1>
<p>The environment is the data structure that powers scoping. This chapter dives deep into environments, describing their structure in depth, and using them to improve your understanding of the four scoping rules described in Section 6.4. Understanding environments is not necessary for day-to-day use of R. But they are important to understand because they power many important R features like lexical scoping, namespaces, and R6 classes, and interact with evaluation to give you powerful tools for making domain specific languages, like dplyr and ggplot2.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb556" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb556-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="exercises-20" class="level2">
<h2 class="anchored" data-anchor-id="exercises-20">7.2.7 Exercises</h2>
<ol type="1">
<li>List three ways in which an environment differs from a list.</li>
</ol>
<p>Answer:</p>
<ul>
<li>Every name in an environment must be unique</li>
<li>Environment names are not ordered</li>
<li>Environments have parents (except the empty environment)</li>
<li>Environments are not copied when modified</li>
</ul>
<p>AR Solutions: The most important differences between environments and lists are:</p>
<ul>
<li>environments have reference semantics (i.e.&nbsp;they don’t copy-on-modify)</li>
<li>environments have parents</li>
<li>the contents of an environment must have unique names</li>
<li>the contents of an environment are not ordered</li>
<li>(environments can only be compared via <code>identical()</code>; not with <code>==</code>)</li>
<li>(environments can contain themselves)</li>
</ul>
<hr>
<ol start="2" type="1">
<li>Create an environment as illustrated by this picture.</li>
</ol>
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/assets/recursive-1.png" class="img-fluid"></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb557" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb557-1">e1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb557-2">e1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e1</span></code></pre></div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: Let’s create an environment that contains itself.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb558" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb558-1">e1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb558-2">e1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e1</span>
<span id="cb558-3"></span>
<span id="cb558-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the environment</span></span>
<span id="cb558-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_print</span>(e1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: 0x11807d350&gt;
#&gt; Parent: &lt;environment: global&gt;
#&gt; Bindings:
#&gt; • loop: &lt;env&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb560" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb560-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify that it contains itself</span></span>
<span id="cb560-2">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(e1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █ [1:0x11807d350] &lt;env&gt; 
#&gt; └─loop = [1:0x11807d350]</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Create a pair of environments as illustrated by this picture.</li>
</ol>
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/assets/recursive-2.png" class="img-fluid"></p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb562" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb562-1">e2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb562-2">e3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb562-3"></span>
<span id="cb562-4">e2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e3</span>
<span id="cb562-5">e3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dedoop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e2</span></code></pre></div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: These two environments contain each other:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb563" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb563-1">e1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb563-2">e2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>()</span>
<span id="cb563-3"></span>
<span id="cb563-4">e1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>loop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e2</span>
<span id="cb563-5">e2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>dedoop <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> e1</span>
<span id="cb563-6"></span>
<span id="cb563-7">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(e1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █ [1:0x12ab115e8] &lt;env&gt; 
#&gt; └─loop = █ [2:0x10ec39568] &lt;env&gt; 
#&gt;          └─dedoop = [1:0x12ab115e8]</code></pre>
</div>
<div class="sourceCode cell-code" id="cb565" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb565-1">lobstr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ref</span>(e2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; █ [1:0x10ec39568] &lt;env&gt; 
#&gt; └─dedoop = █ [2:0x12ab115e8] &lt;env&gt; 
#&gt;            └─loop = [1:0x10ec39568]</code></pre>
</div>
</div>
<hr>
<ol start="4" type="1">
<li>Explain why <code>e[[1]]</code> and <code>e[c("a", "b")]</code> don’t make sense when <code>e</code> is an environment.</li>
</ol>
<p>Answer: environment names are not ordered, and aren’t copied when modified, so they aren’t subsettable.</p>
<p>AR Solutions: The first option doesn’t make sense, because elements of an environment are not ordered. The second option would return two objects at the same time. What data structure would they be contained inside?</p>
<hr>
<ol start="5" type="1">
<li>Create a version of <code>env_poke()</code> that will only bind new names, never re-bind old names. Some programming languages only do this, and are known as <a href="https://en.wikipedia.org/wiki/Assignment_(computer_science)#Single_assignment">single assignment languages</a>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb567" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb567-1">env_poke_new <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(env, nm, value) {</span>
<span id="cb567-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.environment</span>(env)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"env is not an enviornment"</span>)</span>
<span id="cb567-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (nm <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%in%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(env)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nm '"</span>, nm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' already bound"</span>)</span>
<span id="cb567-4">  env[[nm]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> value</span>
<span id="cb567-5">}</span>
<span id="cb567-6"></span>
<span id="cb567-7">e_test <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>)</span>
<span id="cb567-8"></span>
<span id="cb567-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke_new</span>(e_test, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>)</span>
<span id="cb567-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke_new</span>(e_test, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fail"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in env_poke_new(e_test, "a", "fail") : nm 'a' already bound</code></pre>
</div>
<div class="sourceCode cell-code" id="cb569" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb569-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_print</span>(e_test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: 0x10e216bc0&gt;
#&gt; Parent: &lt;environment: global&gt;
#&gt; Bindings:
#&gt; • a: &lt;NULL&gt;
#&gt; • b: &lt;dbl&gt;
#&gt; • c: &lt;chr&gt;
#&gt; • d: &lt;chr&gt;</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: As described in <em>Advanced R</em> <code>rlang::env_poke()</code> takes a name (as string) and a value to assign (or reassign) a binding in an environment.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb571" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb571-1">e3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new.env</span>()</span>
<span id="cb571-2"></span>
<span id="cb571-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke</span>(e3, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb571-4">e3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb573" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb573-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke</span>(e3, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb573-2">e3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 200</code></pre>
</div>
</div>
<p>So, we want <code>env_poke2()</code> to test, if the supplied name is already present in the given environment. This can be checked via <code>env_has()</code>. If this is the case, an (informative) error is thrown.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb575" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb575-1">env_poke2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(env, name, value) {</span>
<span id="cb575-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb575-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> is already assigned to a value."</span>))</span>
<span id="cb575-4">  }</span>
<span id="cb575-5"></span>
<span id="cb575-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke</span>(env, name, value)</span>
<span id="cb575-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(env)</span>
<span id="cb575-8">}</span>
<span id="cb575-9"></span>
<span id="cb575-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb575-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke2</span>(e3, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb575-12">e3<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>b</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb577" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb577-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke2</span>(e3, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in env_poke2(e3, "b", 200) : "b" is already assigned to a value.</code></pre>
</div>
</div>
<hr>
<ol start="6" type="1">
<li>What does this function do? How does it differ from <code>&lt;&lt;-</code> and why might you prefer it?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb579" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb579-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(a)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning in rm(a): object 'a' not found</code></pre>
</div>
<div class="sourceCode cell-code" id="cb581" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb581-1">rebind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, value, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb581-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>())) {</span>
<span id="cb581-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't find `"</span>, name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb581-4">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb581-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_poke</span>(env, name, value)</span>
<span id="cb581-6">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb581-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rebind</span>(name, value, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env))</span>
<span id="cb581-8">  }</span>
<span id="cb581-9">}</span>
<span id="cb581-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rebind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Can't find `a`</code></pre>
</div>
<div class="sourceCode cell-code" id="cb583" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb583-1">(a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb585" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb585-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rebind</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb585-2">a</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] 10</code></pre>
</div>
</div>
<p>Answer: <code>&lt;&lt;-</code> will assign a value to the name in the global environment if the name is not found, <code>rebind()</code> does not.</p>
<p>AR Solutions: The primary difference between <code>rebind()</code> and <code>&lt;&lt;-</code> is that <code>rebind()</code> will only carry out an assignment when it finds an existing binding; unlike <code>&lt;&lt;-</code> it will never create a new one in the global environment. This behaviour of <code>&lt;&lt;-</code> is usually undesirable because global variables introduce non-obvious dependencies between functions.</p>
<hr>
</section>
<section id="exercises-21" class="level2">
<h2 class="anchored" data-anchor-id="exercises-21">7.3.1 Exercises</h2>
<ol type="1">
<li>Modify <code>where()</code> to return <em>all</em> environments that contain a binding for <code>name</code>. Carefully think through what type of object the function will need to return.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb587" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb587-1">where <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb587-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>())) {</span>
<span id="cb587-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb587-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't find "</span>, name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb587-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb587-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Success case</span></span>
<span id="cb587-7">    env</span>
<span id="cb587-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb587-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive case</span></span>
<span id="cb587-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env))</span>
<span id="cb587-11">  }</span>
<span id="cb587-12">}</span>
<span id="cb587-13"></span>
<span id="cb587-14">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb587-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yyy"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Can't find yyy</code></pre>
</div>
<div class="sourceCode cell-code" id="cb589" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb589-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb591" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb591-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb593" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb593-1">all_where <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">found =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()) {</span>
<span id="cb593-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>())) {</span>
<span id="cb593-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb593-4">    found</span>
<span id="cb593-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb593-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Success case</span></span>
<span id="cb593-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_where</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">append</span>(env, found, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">after =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb593-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb593-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive case</span></span>
<span id="cb593-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_where</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env), found)</span>
<span id="cb593-11">  }</span>
<span id="cb593-12">}</span>
<span id="cb593-13"></span>
<span id="cb593-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_where</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb595" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb595-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb595-2">  x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb595-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all_where</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>)</span>
<span id="cb595-4">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; &lt;environment: 0x10e2dfa68&gt;
#&gt; 
#&gt; [[2]]
#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: <code>where()</code> searches (recursively) for a given name within a given environment and its ancestors. If <code>where()</code> finds the name in one of these environments, it returns the environment’s name. Otherwise, it throws an error.</p>
<p>Our modified version of <code>where()</code> will always recurse until it reaches the empty environment. No matter if it has already found the name or not. Along the way, it will check each environment for the given <code>name</code>. Finally, it will return a list of environments where the binding was found; if no binding was found, the list will be empty.</p>
<p>Please also note how the list is initialised via the default argument, when the function is called for the first time. This is a bit confusing, which is why it’s common to wrap a recursive function inside another, more user friendly, function.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb597" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb597-1">where2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">results =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>()) {</span>
<span id="cb597-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>())) {</span>
<span id="cb597-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb597-4">    results</span>
<span id="cb597-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb597-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive case</span></span>
<span id="cb597-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb597-8">      results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(results, env)</span>
<span id="cb597-9">    }</span>
<span id="cb597-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where2</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env), results)</span>
<span id="cb597-11">  }</span>
<span id="cb597-12">}</span>
<span id="cb597-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb597-14">e1a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb597-15">e1b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(e1a, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">c =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb597-16">e1c <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(e1b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">d =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)</span>
<span id="cb597-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">where2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, e1c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [[1]]
#&gt; &lt;environment: 0x10ff16a58&gt;
#&gt; 
#&gt; [[2]]
#&gt; &lt;environment: 0x10fe428d0&gt;</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Write a function called <code>fget()</code> that finds only function objects. It should have two arguments, <code>name</code> and <code>env</code>, and should obey the regular scoping rules for functions: if there’s an object with a matching name that’s not a function, look in the parent. For an added challenge, also add an <code>inherits</code> argument which controls whether the function recurses up the parents or only looks in one environment.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb599" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb599-1">fget <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb599-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">empty_env</span>())) {</span>
<span id="cb599-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb599-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't find "</span>, name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb599-5">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(env[[name]])) {</span>
<span id="cb599-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Success case</span></span>
<span id="cb599-7">    env</span>
<span id="cb599-8">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (inherits) {</span>
<span id="cb599-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive case</span></span>
<span id="cb599-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env))</span>
<span id="cb599-11">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb599-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't find "</span>, name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb599-13">  }</span>
<span id="cb599-14">}</span>
<span id="cb599-15"></span>
<span id="cb599-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Can't find x</code></pre>
</div>
<div class="sourceCode cell-code" id="cb601" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb601-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"print"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb603" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb603-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"print"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Can't find print</code></pre>
</div>
<div class="sourceCode cell-code" id="cb605" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb605-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"all_where"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: We follow a similar approach to the previous exercise. This time we additionally check if the found object is a function and implement an argument to turn off the recursion, if desired.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb607" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb607-1">fget <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb607-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb607-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb607-4">    obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_get</span>(env, name)</span>
<span id="cb607-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(obj)) {</span>
<span id="cb607-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(obj)</span>
<span id="cb607-7">    }</span>
<span id="cb607-8">  }</span>
<span id="cb607-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emptyenv</span>()) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>inherits) {</span>
<span id="cb607-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Could not find a function called </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">."</span>,</span>
<span id="cb607-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb607-12">    )</span>
<span id="cb607-13">  }</span>
<span id="cb607-14"></span>
<span id="cb607-15">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive Case</span></span>
<span id="cb607-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env))</span>
<span id="cb607-17">}</span>
<span id="cb607-18"></span>
<span id="cb607-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb607-20">mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb607-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inherits =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...) 
#&gt; UseMethod("mean")
#&gt; &lt;bytecode: 0x12c39a5e0&gt;
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<hr>
</section>
<section id="exercises-22" class="level2">
<h2 class="anchored" data-anchor-id="exercises-22">7.4.5 Exercises</h2>
<ol type="1">
<li>How is <code>search_envs()</code> different from <code>env_parents(global_env())</code>?</li>
</ol>
<p>Answer: <code>search_envs()</code> includes the global environment. <code>env_parents(global_env())</code> doesn’t include the global environment and also returns the empty environment (the top parent).</p>
<p>AR Solutions: <code>search_envs()</code> returns all the environments on the search path, which is “a chain of environments containing exported functions of attached packages” (from <code>?search_envs</code>). Every time you attach a new package, this search path will grow. The search path ends with the base-environment. The global environment is included, because functions present in the global environment will always be part of the search path.</p>
<p><code>env_parents(global_env())</code> will list all the ancestors of the global environment, therefore the global environment itself is not included. This also includes the “ultimate ancestor”, the empty environment. This environment is not considered part of the search path because it contains no objects.</p>
<hr>
<ol start="2" type="1">
<li>Draw a diagram that shows the enclosing environments of this function:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb609" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb609-1">f1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x1) {</span>
<span id="cb609-2">  f2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x2) {</span>
<span id="cb609-3">    f3 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x3) {</span>
<span id="cb609-4">      x1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x2 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x3</span>
<span id="cb609-5">    }</span>
<span id="cb609-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f3</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb609-7">  }</span>
<span id="cb609-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb609-9">}</span>
<span id="cb609-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Answer: No.</p>
<hr>
<ol start="3" type="1">
<li>Write an enhanced version of <code>str()</code> that provides more information about functions. Show where the function was found and what environment it was defined in.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb610" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb610-1">e_str <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(object, ...) {</span>
<span id="cb610-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(object, ...)</span>
<span id="cb610-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(object)) {</span>
<span id="cb610-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fn_env():"</span>)</span>
<span id="cb610-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fn_env</span>(object))</span>
<span id="cb610-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"environment():"</span>)</span>
<span id="cb610-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span>(object))</span>
<span id="cb610-8">  }</span>
<span id="cb610-9">}</span>
<span id="cb610-10"></span>
<span id="cb610-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">e_str</span>(print)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (x, ...)</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; fn_env():</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; environment():</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb616" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb616-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">e_str</span>(fget)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (name, env = caller_env(), inherits = TRUE)  
#&gt;  - attr(*, "srcref")= 'srcref' int [1:8] 1 9 17 1 9 1 1 17
#&gt;   ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' &lt;environment: 0x118712dd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; fn_env():</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; environment():</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;environment: R_GlobalEnv&gt;</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: To solve this problem, we need to write a function that takes the name of a function and looks for that function returning both the function and the environment that it was found in.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb622" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb622-1">fget2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb622-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base case</span></span>
<span id="cb622-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_has</span>(env, name)) {</span>
<span id="cb622-4">    obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_get</span>(env, name)</span>
<span id="cb622-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.function</span>(obj)) {</span>
<span id="cb622-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fun =</span> obj, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> env))</span>
<span id="cb622-7">    }</span>
<span id="cb622-8">  }</span>
<span id="cb622-9">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">identical</span>(env, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">emptyenv</span>())) {</span>
<span id="cb622-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Could not find a function called </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb622-11">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb622-12">    )</span>
<span id="cb622-13">  }</span>
<span id="cb622-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursive Case</span></span>
<span id="cb622-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget2</span>(name, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_parent</span>(env))</span>
<span id="cb622-16">}</span>
<span id="cb622-17"></span>
<span id="cb622-18">fstr <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fun_name, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb622-19">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.character</span>(fun_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(fun_name) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) {</span>
<span id="cb622-20">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"`fun_name` must be a string."</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb622-21">  }</span>
<span id="cb622-22">  fun_env <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fget2</span>(fun_name, env)</span>
<span id="cb622-23">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb622-24">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">where =</span> fun_env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>env,</span>
<span id="cb622-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">enclosing =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fn_env</span>(fun_env<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>fun)</span>
<span id="cb622-26">  )</span>
<span id="cb622-27">}</span>
<span id="cb622-28"></span>
<span id="cb622-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb622-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fstr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; $where
#&gt; &lt;environment: base&gt;
#&gt; 
#&gt; $enclosing
#&gt; &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>Once you have learned about tidy evaluation, you could rewrite <code>fstr()</code> to use <code>enquo()</code> so that you’d call it more like <code>str()</code>, i.e.&nbsp;<code>fstr(sum)</code>.</p>
<hr>
</section>
<section id="exercises-23" class="level2">
<h2 class="anchored" data-anchor-id="exercises-23">7.5.5 Exercises</h2>
<ol type="1">
<li>Write a function that lists all the variables defined in the environment in which it was called. It should return the same results as <code>ls()</code>.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb624" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb624-1">my_ls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb624-2">  vars <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parent.frame</span>()))</span>
<span id="cb624-3">  vars[<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">startsWith</span>(vars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)]</span>
<span id="cb624-4">}</span>
<span id="cb624-5"></span>
<span id="cb624-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "a"            "all_where"    "e_str"        "e_test"       "e1"          
#&gt;  [6] "e1a"          "e1b"          "e1c"          "e2"           "e3"          
#&gt; [11] "env_poke_new" "env_poke2"    "fget"         "fget2"        "fstr"        
#&gt; [16] "mean"         "my_ls"        "rebind"       "where"        "where2"      
#&gt; [21] "x"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb626" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb626-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_ls</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] "a"            "all_where"    "e_str"        "e_test"       "e1"          
#&gt;  [6] "e1a"          "e1b"          "e1c"          "e2"           "e3"          
#&gt; [11] "env_poke_new" "env_poke2"    "fget"         "fget2"        "fstr"        
#&gt; [16] "mean"         "my_ls"        "rebind"       "where"        "where2"      
#&gt; [21] "x"</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: We can implement this dynamic scoping behaviour by explicitly referencing the caller environment. Please note that this approach returns also variables starting with a dot, an option that <code>ls()</code> usually requires.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb628" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb628-1">ls2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">env =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">caller_env</span>()) {</span>
<span id="cb628-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sort</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_names</span>(env))</span>
<span id="cb628-3">}</span>
<span id="cb628-4"></span>
<span id="cb628-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test in global environment</span></span>
<span id="cb628-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">all.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] ".main"        ".Random.seed" "a"            "all_where"    "e_str"       
#&gt;  [6] "e_test"       "e1"           "e1a"          "e1b"          "e1c"         
#&gt; [11] "e2"           "e3"           "env_poke_new" "env_poke2"    "fget"        
#&gt; [16] "fget2"        "fstr"         "ls2"          "mean"         "my_ls"       
#&gt; [21] "rebind"       "where"        "where2"       "x"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb630" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb630-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls2</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt;  [1] ".main"        ".Random.seed" "a"            "all_where"    "e_str"       
#&gt;  [6] "e_test"       "e1"           "e1a"          "e1b"          "e1c"         
#&gt; [11] "e2"           "e3"           "env_poke_new" "env_poke2"    "fget"        
#&gt; [16] "fget2"        "fstr"         "ls2"          "mean"         "my_ls"       
#&gt; [21] "rebind"       "where"        "where2"       "x"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb632" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb632-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test in "sandbox" environment</span></span>
<span id="cb632-2">e1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">b =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb632-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>(e1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb634" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb634-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls2</span>(e1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "a" "b"</code></pre>
</div>
</div>
<hr>
</section>
</section>
<section id="conditions" class="level1">
<h1>8 Conditions</h1>
<p>The <strong>condition</strong> system provides a paired set of tools that allow the author of a function to indicate that something unusual is happening, and the user of that function to deal with it. The function author <strong>signals</strong> conditions with functions like <code>stop()</code> (for errors), <code>warning()</code> (for warnings), and <code>message()</code> (for messages), then the function user can handle them with functions like <code>tryCatch()</code> and <code>withCallingHandlers()</code>. Understanding the condition system is important because you’ll often need to play both roles: signalling conditions from the functions you create, and handle conditions signalled by the functions you call.</p>
<p>R offers a very powerful condition system based on ideas from Common Lisp. Like R’s approach to object-oriented programming, it is rather different to currently popular programming languages so it is easy to misunderstand, and there has been relatively little written about how to use it effectively. Historically, this has meant that few people (myself included) have taken full advantage of its power. The goal of this chapter is to remedy that situation. Here you will learn about the big ideas of R’s condition system, as well as learning a bunch of practical tools that will make your code stronger.</p>
<p>I found two resources particularly useful when writing this chapter. You may also want to read them if you want to learn more about the inspirations and motivations for the system:</p>
<ul>
<li><p><a href="https://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html"><em>A prototype of a condition system for R</em></a> by Robert Gentleman and Luke Tierney. This describes an early version of R’s condition system. While the implementation has changed somewhat since this document was written, it provides a good overview of how the pieces fit together, and some motivation for its design.</p></li>
<li><p><a href="https://gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html"><em>Beyond exception handling: conditions and restarts</em></a> by Peter Seibel. This describes exception handling in Lisp, which happens to be very similar to R’s approach. It provides useful motivation and more sophisticated examples. I have provided an R translation of the chapter at <a href="http://adv-r.had.co.nz/beyond-exception-handling.html" class="uri">http://adv-r.had.co.nz/beyond-exception-handling.html</a>.</p></li>
</ul>
<p>I also found it helpful to work through the underlying C code that implements these ideas. If you’re interested in understanding how it all works, you might find <a href="https://gist.github.com/hadley/4278d0a6d3a10e42533d59905fbed0ac">my notes</a> to be useful.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb636" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb636-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">list =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ls</span>())</span></code></pre></div>
</div>
<section id="exercises-24" class="level2">
<h2 class="anchored" data-anchor-id="exercises-24">8.2.4 Exercises</h2>
<ol type="1">
<li>Write a wrapper around <code>file.remove()</code> that throws an error if the file to be deleted does not exist.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb637" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb637-1">safe_file_remove <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) {</span>
<span id="cb637-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(...)) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file '"</span>, ..., <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' does not exist"</span>)</span>
<span id="cb637-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(...)</span>
<span id="cb637-4">}</span>
<span id="cb637-5"></span>
<span id="cb637-6">tmp <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempfile</span>()</span>
<span id="cb637-7"></span>
<span id="cb637-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.create</span>(tmp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb639" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb639-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_file_remove</span>(tmp)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb641" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb641-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(tmp)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Warning in file.remove(tmp): cannot remove file
#&gt; '/var/folders/vn/cw5f9gws42v9m8mdsds_zbl00000gp/T//RtmpXZ1Q0P/file12f2836943044',
#&gt; reason 'No such file or directory'</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] FALSE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb644" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb644-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">safe_file_remove</span>(tmp))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in safe_file_remove(tmp) : 
#&gt;   file '/var/folders/vn/cw5f9gws42v9m8mdsds_zbl00000gp/T//RtmpXZ1Q0P/file12f2836943044' does not exist</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: We prefer the following solution for its clarity and simplicity:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb646" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb646-1">file_remove_strict <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(path) {</span>
<span id="cb646-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.exists</span>(path)) {</span>
<span id="cb646-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Can't delete the file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, path,</span>
<span id="cb646-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> because it doesn't exist."</span>,</span>
<span id="cb646-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb646-6">    )</span>
<span id="cb646-7">  }</span>
<span id="cb646-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.remove</span>(path)</span>
<span id="cb646-9">}</span>
<span id="cb646-10"></span>
<span id="cb646-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb646-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">saveRDS</span>(mtcars, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars.rds"</span>)</span>
<span id="cb646-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_remove_strict</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars.rds"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb648" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb648-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file_remove_strict</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mtcars.rds"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error : Can't delete the file "mtcars.rds" because it doesn't exist.</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>What does the <code>appendLF</code> argument to <code>message()</code> do? How is it related to <code>cat()</code>?</li>
</ol>
<p>Answer: <code>appendLF</code> controls whether or not a newline is added to the message; by default, <code>cat()</code> does not add a newline.</p>
<p>AR Solutions: The <code>appendLF</code> argument automatically appends a new line to the message.</p>
<p>Comparable behaviour regarding line breaks for <code>cat()</code> can be achieved via setting its <code>sep</code> argument to <code>"\n"</code>.</p>
<hr>
</section>
<section id="exercises-25" class="level2">
<h2 class="anchored" data-anchor-id="exercises-25">8.4.5 Exercises</h2>
<ol type="1">
<li>What extra information does the condition generated by <code>abort()</code> contain compared to the condition generated by <code>stop()</code> i.e.&nbsp;what’s the difference between these two objects? Read the help for <code>?abort</code> to learn more.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb650" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb650-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">catch_cnd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An error"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;simpleError in force(expr): An error&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb652" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb652-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">catch_cnd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An error"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;error/rlang_error&gt;
#&gt; Error:
#&gt; ! An error
#&gt; ---
#&gt; Backtrace:
#&gt; ▆</code></pre>
</div>
</div>
<p>Answer: <code>abort()</code> includes the error message and backtrace in the condition object. <code>abort()</code> uses the custom class <code>rlang_error</code>.</p>
<p>AR Solutions: In contrast to <code>stop()</code>, which contains the call, <code>abort()</code> stores the whole backtrace generated by <code>rlang::trace_back()</code>. This is a lot of extra data!</p>
<hr>
<ol start="2" type="1">
<li>Predict the results of evaluating the following code</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb654" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb654-1">show_condition <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb654-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb654-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>,</span>
<span id="cb654-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">warning =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span>,</span>
<span id="cb654-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>,</span>
<span id="cb654-6">    {</span>
<span id="cb654-7">      code</span>
<span id="cb654-8">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb654-9">    }</span>
<span id="cb654-10">  )</span>
<span id="cb654-11">}</span>
<span id="cb654-12"></span>
<span id="cb654-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "error"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "error"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb656" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb656-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 10 [NULL]</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb658" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb658-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "warning"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "warning"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb660" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb660-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>({</span>
<span id="cb660-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb660-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>)</span>
<span id="cb660-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)</span>
<span id="cb660-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "message"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb662" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb662-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 10</span></span>
<span id="cb662-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "message"</span></span>
<span id="cb662-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; "warning"</span></span></code></pre></div>
</div>
<p>Answer: predictions in comments. The prediction for <code>show_condition(10)</code> was incorrect; the correct answer is <code>NULL</code> as that’s what’s returned when there is no condition. The final prediction was also incorrect; the <code>tryCatch()</code> call stops further execution when the <code>message()</code> is caught.</p>
<p>AR Solutions: The first three examples are straightforward:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb663" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb663-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stop raises an error</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "error"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb665" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb665-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no condition is signalled</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb667" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb667-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># warning raises a warning</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "warning"</code></pre>
</div>
</div>
<p>The last example is the most interesting and makes us aware of the exiting qualities of <code>tryCatch()</code>; it will terminate the evaluation of the code as soon as it is called.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb669" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb669-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition</span>({</span>
<span id="cb669-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb669-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>)</span>
<span id="cb669-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)</span>
<span id="cb669-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "message"</code></pre>
</div>
</div>
<hr>
<ol start="3" type="1">
<li>Explain the results of running this code:</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb671" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb671-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withCallingHandlers</span>(</span>
<span id="cb671-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handler 1</span></span>
<span id="cb671-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withCallingHandlers</span>(</span>
<span id="cb671-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># handler 2</span></span>
<span id="cb671-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span>
<span id="cb671-6">  )</span>
<span id="cb671-7">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; b</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; a</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; b</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; c</code></pre>
</div>
</div>
<p>Answer:</p>
<ol type="1">
<li><code>message("c")</code> is caught, handler 2 is called</li>
<li>in handler 2, <code>message("a")</code> is caught and handler 1 is called</li>
<li>handler 1 writes message <code>b</code></li>
<li>code resumes and handler 2 writes message <code>a</code></li>
<li><code>message("c")</code> propagates to the parent, is caught, and handler 1 is called</li>
<li>handler 1 writes message <code>b</code></li>
<li>code resumes and the code writes message <code>c</code></li>
</ol>
<p>AR Solutions: It’s a little tricky to untangle the flow here: First, <code>message("c")</code> is run, and it’s caught by (1). It then calls <code>message("a")</code>, which is caught by (2), which calls <code>message("b")</code>. <code>message("b")</code> isn’t caught by anything, so we see a <code>b</code> on the console, followed by <code>a</code>. But why do we get another <code>b</code> before we see <code>c</code>? That’s because we haven’t handled the message, so it bubbles up to the outer calling handler.</p>
<hr>
<ol start="4" type="1">
<li>Read the source code for <code>catch_cnd()</code> and explain how it works.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb676" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb676-1">catch_cnd</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; function (expr, classes = "condition") 
#&gt; {
#&gt;     stopifnot(is_character(classes))
#&gt;     handlers &lt;- rep_named(classes, list(identity))
#&gt;     eval_bare(rlang::expr(tryCatch(!!!handlers, {
#&gt;         force(expr)
#&gt;         return(NULL)
#&gt;     })))
#&gt; }
#&gt; &lt;bytecode: 0x10a06f398&gt;
#&gt; &lt;environment: namespace:rlang&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb678" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb678-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">catch_cnd</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;simpleError in force(expr): error&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb680" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb680-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># replicate the core functionality</span></span>
<span id="cb680-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) x, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;simpleError in force(stop("error")): error&gt;</code></pre>
</div>
</div>
<p>Answer: <code>catch_cnd()</code> uses <code>tryCatch()</code> to catch any condition and return itself using <code>identity()</code>.</p>
<p>AR Solutions: At the time <em>Advanced R</em> was written, the source for <code>catch_cnd()</code> was a little simpler:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb682" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb682-1">catch_cnd <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr) {</span>
<span id="cb682-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb682-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) cnd,</span>
<span id="cb682-4">    {</span>
<span id="cb682-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">force</span>(expr)</span>
<span id="cb682-6">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>)</span>
<span id="cb682-7">    }</span>
<span id="cb682-8">  )</span>
<span id="cb682-9">}</span></code></pre></div>
</div>
<p><code>catch_cnd()</code> is a simple wrapper around <code>tryCatch()</code>. If a condition is signalled, it’s caught and returned. If no condition is signalled, execution proceeds sequentially and the function returns <code>NULL</code>.</p>
<p>The current version of <code>catch_cnd()</code> is a little more complex because it allows you to specify which classes of condition you want to capture. This requires some manual code generation because the interface of <code>tryCatch()</code> provides condition classes as argument names.</p>
<hr>
<ol start="5" type="1">
<li>How could you rewrite <code>show_condition()</code> to use a single handler?</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb683" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb683-1">show_condition2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb683-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb683-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) {</span>
<span id="cb683-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_error</span>(cnd)) {</span>
<span id="cb683-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span>
<span id="cb683-6">      }</span>
<span id="cb683-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_warning</span>(cnd)) {</span>
<span id="cb683-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span>)</span>
<span id="cb683-9">      }</span>
<span id="cb683-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_message</span>(cnd)) {</span>
<span id="cb683-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)</span>
<span id="cb683-12">      }</span>
<span id="cb683-13">    },</span>
<span id="cb683-14">    {</span>
<span id="cb683-15">      code</span>
<span id="cb683-16">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb683-17">    }</span>
<span id="cb683-18">  )</span>
<span id="cb683-19">}</span>
<span id="cb683-20"></span>
<span id="cb683-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "error"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb685" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb685-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb687" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb687-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "warning"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb689" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb689-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>({</span>
<span id="cb689-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb689-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>)</span>
<span id="cb689-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)</span>
<span id="cb689-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "message"</code></pre>
</div>
</div>
<p>Answer: code above.</p>
<p>AR Solutions: <code>show_condition()</code> was defined in one of the previous questions. Let’s use the <code>condition</code> argument of <code>tryCatch()</code> as shown in <code>rlang::catch_cond()</code> above for our re-implementation:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb691" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb691-1">show_condition2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb691-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb691-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) {</span>
<span id="cb691-4">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(cnd, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)) {</span>
<span id="cb691-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span>
<span id="cb691-6">      }</span>
<span id="cb691-7">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(cnd, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span>)) {</span>
<span id="cb691-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span>)</span>
<span id="cb691-9">      }</span>
<span id="cb691-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">inherits</span>(cnd, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)) {</span>
<span id="cb691-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)</span>
<span id="cb691-12">      }</span>
<span id="cb691-13">    },</span>
<span id="cb691-14">    {</span>
<span id="cb691-15">      code</span>
<span id="cb691-16">      <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb691-17">    }</span>
<span id="cb691-18">  )</span>
<span id="cb691-19">}</span>
<span id="cb691-20"></span>
<span id="cb691-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb691-22"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "error"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb693" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb693-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; NULL</code></pre>
</div>
<div class="sourceCode cell-code" id="cb695" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb695-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "warning"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb697" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb697-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">show_condition2</span>({</span>
<span id="cb697-2">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb697-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?"</span>)</span>
<span id="cb697-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"?!"</span>)</span>
<span id="cb697-5">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "message"</code></pre>
</div>
</div>
<p><code>tryCatch()</code> executes the code and captures any condition raised. The function provided as the <code>condition</code> handles this condition. In this case it dispatches on the class of the condition.</p>
<hr>
</section>
<section id="exercises-26" class="level2">
<h2 class="anchored" data-anchor-id="exercises-26">8.5.4 Exercises</h2>
<ol type="1">
<li>Inside a package, it’s occasionally useful to check that a package is installed before using it. Write a function that checks if a package is installed (with <code>requireNamespace("pkg", quietly = FALSE))</code> and if not, throws a custom condition that includes the package name in the metadata.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb699" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb699-1">my_check_installed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb699-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)) {</span>
<span id="cb699-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(</span>
<span id="cb699-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error_not_found"</span>,</span>
<span id="cb699-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' not found"</span>),</span>
<span id="cb699-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg</span>
<span id="cb699-7">    )</span>
<span id="cb699-8">  }</span>
<span id="cb699-9">}</span>
<span id="cb699-10"></span>
<span id="cb699-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_check_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlang"</span>)</span>
<span id="cb699-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">NOTE</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: this code causes renv::dependencies() to mistakenly report package 'pkg' as a dependency</span></span>
<span id="cb699-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requireNamespace("pkg", quietly = FALSE)</span></span>
<span id="cb699-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># err &lt;- catch_cnd(my_check_installed("pkg"))</span></span>
<span id="cb699-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># err</span></span>
<span id="cb699-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># err$pkg</span></span>
<span id="cb699-17"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_check_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pkg"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in my_check_installed("pkg") : package 'pkg' not found</code></pre>
</div>
</div>
<p>Answer: code above. The question specifies to use <code>quietly = FALSE</code>, but this approach makes more sense (to me). The alternative is to catch the ‘Failed with error:’ message which seems less reliable.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb701" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb701-1">my_check_installed2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(pkg) {</span>
<span id="cb701-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb701-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) {</span>
<span id="cb701-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(</span>
<span id="cb701-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error_not_found"</span>,</span>
<span id="cb701-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package '"</span>, pkg, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' not found"</span>),</span>
<span id="cb701-7">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pkg =</span> pkg</span>
<span id="cb701-8">      )</span>
<span id="cb701-9">    },</span>
<span id="cb701-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(pkg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb701-11">  )</span>
<span id="cb701-12">}</span>
<span id="cb701-13"></span>
<span id="cb701-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_check_installed2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlang"</span>)</span>
<span id="cb701-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">my_check_installed2</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pkg"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in value[[3L]](cond) : package 'pkg' not found</code></pre>
</div>
</div>
<p>The alternative version, <code>my_check_installed2()</code> works but its Backtrace is harder to read.</p>
<p>AR Solutions: We use <code>rlang::abort()</code> to supply error metadata:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb703" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb703-1">check_installed <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(package) {</span>
<span id="cb703-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">requireNamespace</span>(package, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quietly =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)) {</span>
<span id="cb703-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(</span>
<span id="cb703-4">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error_pkg_not_found"</span>,</span>
<span id="cb703-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"package '"</span>, package, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"' not installed."</span>),</span>
<span id="cb703-6">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">package =</span> package</span>
<span id="cb703-7">    )</span>
<span id="cb703-8">  }</span>
<span id="cb703-9">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></span>
<span id="cb703-10">}</span>
<span id="cb703-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rlang"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] TRUE</code></pre>
</div>
<div class="sourceCode cell-code" id="cb705" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb705-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">try</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_installed</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot3"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>#&gt; Loading required namespace: ggplot3</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; Error in check_installed("ggplot3") : package 'ggplot3' not installed.</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Inside a package you often need to stop with an error when something is not right. Other packages that depend on your package might be tempted to check these errors in their unit tests. How could you help these packages to avoid relying on the error message which is part of the user interface rather than the API and might change without notice?</li>
</ol>
<p>Answer: return custom error objects that aren’t dependent on the error text (like in 8.5.3)</p>
<p>AR Solutions: Instead of returning an error it might be preferable to throw a customised condition and place a standardised error message inside the metadata. Then the downstream package could check for the class of the condition, rather than inspecting the message.</p>
<hr>
</section>
<section id="exercises-27" class="level2">
<h2 class="anchored" data-anchor-id="exercises-27">8.6.6 Exercises</h2>
<ol type="1">
<li>Create <code>suppressConditions()</code> that works like <code>suppressMessages()</code> and <code>suppressWarnings()</code> but suppresses everything. Think carefully about how you should handle errors.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb708" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb708-1">suppressConditions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr) {</span>
<span id="cb708-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb708-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(cnd),</span>
<span id="cb708-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withCallingHandlers</span>(</span>
<span id="cb708-5">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">condition =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) {</span>
<span id="cb708-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cnd_muffle</span>(cnd)</span>
<span id="cb708-7">      },</span>
<span id="cb708-8">      expr</span>
<span id="cb708-9">    )</span>
<span id="cb708-10">  )</span>
<span id="cb708-11">}</span>
<span id="cb708-12"></span>
<span id="cb708-13">sup <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressConditions</span>({</span>
<span id="cb708-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"processing..."</span>)</span>
<span id="cb708-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"something went wrong"</span>)</span>
<span id="cb708-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"still running"</span>)</span>
<span id="cb708-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span>
<span id="cb708-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"this shouldn't run"</span>)</span>
<span id="cb708-19">})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; [1] "still running"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb710" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb710-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str</span>(sup)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; List of 2
#&gt;  $ message: chr "error"
#&gt;  $ call   : language withCallingHandlers(condition = function(cnd) {     cnd_muffle(cnd) ...
#&gt;  - attr(*, "class")= chr [1:3] "simpleError" "error" "condition"</code></pre>
</div>
</div>
<p>Answer: code above. Errors are not printed, but are returned, invisibly.</p>
<p>AR Solutions: In general, we would like to catch errors, since they contain important information for debugging. To suppress the error message and hide the returned error object from the console, we handle errors within a <code>tryCatch()</code> and return the error object invisibly:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb712" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb712-1">suppressErrors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr) {</span>
<span id="cb712-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb712-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invisible</span>(cnd),</span>
<span id="cb712-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interrupt =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(cnd) {</span>
<span id="cb712-5">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terminated by the user."</span>,</span>
<span id="cb712-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">call. =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span></span>
<span id="cb712-7">      )</span>
<span id="cb712-8">    },</span>
<span id="cb712-9">    expr</span>
<span id="cb712-10">  )</span>
<span id="cb712-11">}</span></code></pre></div>
</div>
<p>After we defined the error handling, we can just combine it with the other handlers to create <code>suppressConditions()</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb713" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb713-1">suppressConditions <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(expr) {</span>
<span id="cb713-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressErrors</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressWarnings</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressMessages</span>(expr)))</span>
<span id="cb713-3">}</span></code></pre></div>
</div>
<p>To test the new function, we apply it to a set of conditions and inspect the returned error object.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb714" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb714-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The messages/warnings/conditions are suppressed successfully</span></span>
<span id="cb714-2">error_obj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">suppressConditions</span>({</span>
<span id="cb714-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"message"</span>)</span>
<span id="cb714-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">warning</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warning"</span>)</span>
<span id="cb714-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abort</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span>
<span id="cb714-6">})</span>
<span id="cb714-7">error_obj</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>#&gt; &lt;error/rlang_error&gt;
#&gt; Error:
#&gt; ! error
#&gt; ---
#&gt; Backtrace:
#&gt; ▆</code></pre>
</div>
</div>
<hr>
<ol start="2" type="1">
<li>Compare the following two implementations of <code>message2error()</code>. What is the main advantage of <code>withCallingHandlers()</code> in this scenario? (Hint: look carefully at the traceback.)</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb716" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb716-1">message2error <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb716-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withCallingHandlers</span>(code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(e))</span>
<span id="cb716-3">}</span>
<span id="cb716-4"></span>
<span id="cb716-5">message2error2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb716-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(e))</span>
<span id="cb716-7">}</span></code></pre></div>
</div>
<p>Answer: <code>message2error()</code> shows the invocation of <code>message()</code> in the traceback, but <code>message2error2()</code> does not.</p>
<p>AR Solutions: Both functions differ in the way conditions are handled. <code>withCallingHandlers()</code> creates a <em>calling handler</em>, which is executed from within the signalling function. This makes it possible to record a detailed call stack, which helps us identify the signalling condition.</p>
<p><code>tryCatch()</code> defines an <em>exiting handler</em>, which means that the signalling function is terminated as soon as a condition is raised. It also returns control to the context where <code>tryCatch()</code> was called.</p>
<p>In this example the use of <code>withCallingHandlers()</code> returns more information than the use of <code>tryCatch()</code>. This allows us to determine the exact call that raised the condition.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb717" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb717-1">message2error1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb717-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">withCallingHandlers</span>(code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>))</span>
<span id="cb717-3">}</span>
<span id="cb717-4"></span>
<span id="cb717-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message2error1</span>({</span>
<span id="cb717-6">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb717-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden error"</span>)</span>
<span id="cb717-8">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb717-9">})</span>
<span id="cb717-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Error in (function (e) : error</span></span>
<span id="cb717-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traceback</span>()</span>
<span id="cb717-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 9: stop("error") at #2</span></span>
<span id="cb717-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 8: (function (e)</span></span>
<span id="cb717-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;    stop("error"))(list(message = "hidden error\n",</span></span>
<span id="cb717-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;      call = message("hidden error")))</span></span>
<span id="cb717-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 7: signalCondition(cond)</span></span>
<span id="cb717-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 6: doWithOneRestart(return(expr), restart)</span></span>
<span id="cb717-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 5: withOneRestart(expr, restarts[[1L]])</span></span>
<span id="cb717-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 4: withRestarts({</span></span>
<span id="cb717-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        signalCondition(cond)</span></span>
<span id="cb717-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        defaultHandler(cond)</span></span>
<span id="cb717-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;    }, muffleMessage = function() NULL)</span></span>
<span id="cb717-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3: message("hidden error") at #1</span></span>
<span id="cb717-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2: withCallingHandlers(code,</span></span>
<span id="cb717-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;      message = function(e) stop("error")) at #2</span></span>
<span id="cb717-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1: message2error1({</span></span>
<span id="cb717-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        1</span></span>
<span id="cb717-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        message("hidden error")</span></span>
<span id="cb717-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        NULL</span></span>
<span id="cb717-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;    })</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb718" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb718-1">message2error2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(code) {</span>
<span id="cb718-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(code, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">message =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)))</span>
<span id="cb718-3">}</span>
<span id="cb718-4"></span>
<span id="cb718-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message2error2</span>({</span>
<span id="cb718-6">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb718-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden error"</span>)</span>
<span id="cb718-8">  <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span></span>
<span id="cb718-9">})</span>
<span id="cb718-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Error in value[[3L]](cond) : error</span></span>
<span id="cb718-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traceback</span>()</span>
<span id="cb718-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 6: stop("error") at #2</span></span>
<span id="cb718-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 5: value[[3L]](cond)</span></span>
<span id="cb718-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 4: tryCatchOne(expr, names, parentenv, handlers[[1L]])</span></span>
<span id="cb718-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 3: tryCatchList(expr, classes, parentenv, handlers)</span></span>
<span id="cb718-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 2: tryCatch(code, message = function(e) (stop("error"))) at #2</span></span>
<span id="cb718-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; 1: message2error2({</span></span>
<span id="cb718-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        1</span></span>
<span id="cb718-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        message("hidden error")</span></span>
<span id="cb718-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;        NULL</span></span>
<span id="cb718-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;    })</span></span></code></pre></div>
</div>
<hr>
<ol start="3" type="1">
<li>How would you modify the <code>catch_cnds()</code> definition if you wanted to recreate the original intermingling of warnings and messages?</li>
</ol>
<p>Answer: as noted in <a href="https://advanced-r-solutions.rbind.io/conditions.html#applications-1">Advanced R Solutions</a>, “It looks like Hadley wrote a part of the chapter after the exercises, as the <code>catch_cnds()</code> function defined in the chapter already solves this problem by storing all messages and warnings in their original order within a list.”</p>
<hr>
<ol start="4" type="1">
<li>Why is catching interrupts dangerous? Run this code to find out.</li>
</ol>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb719" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb719-1">bottles_of_beer <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>) {</span>
<span id="cb719-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(</span>
<span id="cb719-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"There are "</span>, i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" bottles of beer on the wall, "</span>,</span>
<span id="cb719-4">    i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" bottles of beer."</span></span>
<span id="cb719-5">  )</span>
<span id="cb719-6">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb719-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(</span>
<span id="cb719-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb719-9">      <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">interrupt =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(err) {</span>
<span id="cb719-10">        i <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb719-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) {</span>
<span id="cb719-12">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(</span>
<span id="cb719-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Take one down, pass it around, "</span>, i,</span>
<span id="cb719-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" bottle"</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (i <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" of beer on the wall."</span></span>
<span id="cb719-15">          )</span>
<span id="cb719-16">        }</span>
<span id="cb719-17">      }</span>
<span id="cb719-18">    )</span>
<span id="cb719-19">  }</span>
<span id="cb719-20">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">message</span>(</span>
<span id="cb719-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No more bottles of beer on the wall, "</span>,</span>
<span id="cb719-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no more bottles of beer."</span></span>
<span id="cb719-23">  )</span>
<span id="cb719-24">}</span></code></pre></div>
</div>
<p>Answer: this prevents user interrupts (control-c) from halting the code, which in this case can be pretty annoying if run with the defaults, requiring 99 interrupts (or just “Restart R”).</p>
<p>AR Solutions: When running the <code>bottles_of_beer()</code> function in your console, the output should look somehow like the following:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb720" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb720-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bottles_of_beer</span>()</span>
<span id="cb720-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; There are 99 bottles of beer on the wall, 99 bottles of beer.</span></span>
<span id="cb720-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Take one down, pass it around, 98 bottles of beer on the wall.</span></span>
<span id="cb720-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Take one down, pass it around, 97 bottles of beer on the wall.</span></span>
<span id="cb720-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Take one down, pass it around, 96 bottles of beer on the wall.</span></span>
<span id="cb720-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt; Take one down, pass it around, 95 bottles of beer on the wall.</span></span>
<span id="cb720-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#&gt;</span></span></code></pre></div>
</div>
<p>At this point you’ll probably recognise how hard it is to get the number of bottles down from <code>99</code> to <code>0</code>. There’s no way to break out of the function because we’re capturing the interrupt that you’d usually use!</p>
<hr>


</section>
</section>

 ]]></description>
  <category>exercises</category>
  <category>advanced-r</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/advanced-r-1.html</guid>
  <pubDate>Sun, 12 Jun 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>FaultTree.widget Test</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/FaultTree.html</link>
  <description><![CDATA[ 




<p>Notebook for testing FaultTree.widget rendering fixes.</p>
<section id="example" class="level1">
<h1>Example</h1>
<p>The fault tree below is centered in-frame when viewed in RStudio, but is partially off-frame when viewed in a browser, and completely off-frame if the browser window is wide enough. This is true for both <code>html_notebook</code> and <code>html_document</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(FaultTree)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(FaultTree.widget)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint start</span></span>
<span id="cb1-5">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftree.make</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"priority"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">reversible_cond =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Site power loss"</span>)</span>
<span id="cb1-6">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLogic</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"or"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"neither emergency"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"generator operable"</span>)</span>
<span id="cb1-7">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLogic</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent failure"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of generators"</span>)</span>
<span id="cb1-8">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLatent</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttf =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttr =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8760</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inspect =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e-gen set fails"</span>)</span>
<span id="cb1-9">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLatent</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttf =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttr =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8760</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inspect =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e-gen set fails"</span>)</span>
<span id="cb1-10">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLogic</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inhibit"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Common cause"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"failure of generators"</span>)</span>
<span id="cb1-11">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addProbability</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> .<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">05</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Common cause"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"beta factor"</span>)</span>
<span id="cb1-12">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addLatent</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttf =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttr =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8760</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">inspect =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"e-gen set fails"</span>)</span>
<span id="cb1-13">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addDemand</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">at =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mttf =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"External power"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name2 =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"interruption"</span>)</span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nolint end</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">tree1 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftree.calc</span>(tree1)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftree2widget</span>(tree1, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">height =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">width =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">800</span>)</span></code></pre></div>
<div class="cell-output-display">
<div id="htmlwidget-f52b4f4d1e82413ba2a1" style="width:100%;height:406px;" class="ftree_widget1 html-widget"></div>
<script type="application/json" data-for="htmlwidget-f52b4f4d1e82413ba2a1">{"x":{"root":{"id":1,"gparent":-1,"tag":"top","type":14,"cfr":0.000222339590217002,"pbf":3.04575275244065e-07,"crt":0.00136986565331405,"moe":0,"condition":0,"cond_code":1,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Site power loss","name2":"","children":[{"id":2,"gparent":1,"tag":"G_2","type":10,"cfr":-1,"pbf":0.000222339590217002,"crt":0.00136986565331405,"moe":0,"condition":1,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"neither emergency","name2":"generator operable","children":[{"id":3,"gparent":2,"tag":"G_3","type":11,"cfr":0.00163690899152319,"pbf":1.68851766373046e-05,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Independent failure","name2":"of generators","children":[{"id":4,"gparent":3,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""},{"id":5,"gparent":3,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""}]},{"id":6,"gparent":2,"tag":"G_6","type":12,"cfr":0.01,"pbf":0.000205457882772264,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Common cause","name2":"failure of generators","children":[{"id":7,"gparent":6,"tag":"E_7","type":4,"cfr":-1,"pbf":0.05,"crt":-1,"moe":0,"condition":1,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Common cause","name2":"beta factor"},{"id":8,"gparent":6,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""}]}]},{"id":9,"gparent":1,"tag":"E_9","type":3,"cfr":1,"pbf":-1,"crt":-1,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"External power","name2":"interruption"}]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Check rendering without height and width specified:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ftree2widget</span>(tree1)</span></code></pre></div>
<div class="cell-output-display">
<div class="ftree_widget1 html-widget html-fill-item" id="htmlwidget-de88ad41a62fc533341a" style="width:100%;height:382px;"></div>
<script type="application/json" data-for="htmlwidget-de88ad41a62fc533341a">{"x":{"root":{"id":1,"gparent":-1,"tag":"top","type":14,"cfr":0.000222339590217002,"pbf":3.04575275244065e-07,"crt":0.00136986565331405,"moe":0,"condition":0,"cond_code":1,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Site power loss","name2":"","children":[{"id":2,"gparent":1,"tag":"G_2","type":10,"cfr":-1,"pbf":0.000222339590217002,"crt":0.00136986565331405,"moe":0,"condition":1,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"neither emergency","name2":"generator operable","children":[{"id":3,"gparent":2,"tag":"G_3","type":11,"cfr":0.00163690899152319,"pbf":1.68851766373046e-05,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Independent failure","name2":"of generators","children":[{"id":4,"gparent":3,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""},{"id":5,"gparent":3,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""}]},{"id":6,"gparent":2,"tag":"G_6","type":12,"cfr":0.01,"pbf":0.000205457882772264,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Common cause","name2":"failure of generators","children":[{"id":7,"gparent":6,"tag":"E_7","type":4,"cfr":-1,"pbf":0.05,"crt":-1,"moe":0,"condition":1,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"Common cause","name2":"beta factor"},{"id":8,"gparent":6,"tag":"","type":2,"cfr":0.2,"pbf":0.00410915765544528,"crt":0.00136986301369863,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":0.000273897562311695,"p2":0.0384615384615385,"collapse":0,"name":"e-gen set fails","name2":""}]}]},{"id":9,"gparent":1,"tag":"E_9","type":3,"cfr":1,"pbf":-1,"crt":-1,"moe":0,"condition":0,"cond_code":0,"etype":0,"p1":-1,"p2":-1,"collapse":0,"name":"External power","name2":"interruption"}]}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
</section>
<section id="solution" class="level1">
<h1>Solution</h1>
<p>A partial fix is to change the line in <code>inst/htmlwidgets/ftree_widget1.js</code> and <code>inst/htmlwidgets/ftree_widget2.js</code></p>
<p>from (which sets the position based on the width of the browser window):</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> width_initial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">window</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>to (which sets the position based on the width of the div containing the widget):</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">var</span> width_initial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">$</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"div"</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">width</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Then the fault tree will position itself within view, but not always centered. A complete fix would render the fault tree centered within the widget.</p>
<p>Other approaches tested:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode javascript code-with-copy"><code class="sourceCode javascript"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// var width_initial = $('div:contains("htmlwidget")').width()/2-60;</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// var width_initial = $("div").filter(function(){ return this.children.length === 0; }).width()/2-60;</span></span></code></pre></div>


</section>

 ]]></description>
  <category>notes</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/FaultTree.html</guid>
  <pubDate>Thu, 30 Sep 2021 05:00:00 GMT</pubDate>
</item>
<item>
  <title>R Setup Log</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/r-setup-log.html</link>
  <description><![CDATA[ 




<p>My notes on my personal R setup. I started my R journey in <a href="https://www.information-safety.org/2020/09/11/working-with-r/">September 2020</a> after <a href="https://societyinforisk.org/event-3899786">SIRACon 2020</a>. <strong>Important:</strong> this historical setup is outdated and differs from my current approach, which is documented in <a href="https://jabenninghoff.github.io/rdev/articles/rdev.html">rdev</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no libraries</span></span></code></pre></div>
</div>
<section id="installing-r" class="level1">
<h1>Installing R</h1>
<p>I prefer installing R and RStudio using <a href="https://brew.sh">Homebrew</a>. I use <a href="https://github.com/Homebrew/homebrew-bundle">Homebrew Bundle</a> to install all software on my systems, but installing R and RStudio is simple enough using the command line:</p>
<!-- note: lintr version <= 2.0.1 throws an error when using language identifiers: <https://github.com/r-lib/lintr/issues/505> -->
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--formula</span> r <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> rstudio</span></code></pre></div>
<section id="r-variants" class="level2">
<h2 class="anchored" data-anchor-id="r-variants">R Variants</h2>
<p><strong>TL;DR: just use homebrew.</strong></p>
<p>I don’t recommend installing the <code>cask</code> variant of r because it creates problems with <code>brew doctor</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> info <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--cask</span> r</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>==&gt; r: 4.3.2
https://www.r-project.org/
Not installed
From: https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/r/r.rb
==&gt; Name
R
==&gt; Description
Environment for statistical computing and graphics
==&gt; Artifacts
R-4.3.2-arm64.pkg (Pkg)
==&gt; Analytics
install: 762 (30 days), 2,484 (90 days), 6,499 (365 days)</code></pre>
</div>
</div>
<p>I tried “<a href="https://luispuerto.net/blog/2018/05/11/installing-r-with-homebrew-with-all-the-capabilities/">installing all the things</a>” with <a href="https://github.com/sethrfore/homebrew-r-srf">homebrew-r-srf</a> but didn’t like how the uninstall doesn’t clean up, and frankly, I haven’t found a need for more than the capabilities included with homebrew R:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">capabilities</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       jpeg         png        tiff       tcltk         X11        aqua 
       TRUE        TRUE        TRUE        TRUE        TRUE        TRUE 
   http/ftp     sockets      libxml        fifo      cledit       iconv 
       TRUE        TRUE       FALSE        TRUE       FALSE        TRUE 
        NLS       Rprof     profmem       cairo         ICU long.double 
       TRUE        TRUE        TRUE        TRUE        TRUE       FALSE 
    libcurl 
       TRUE </code></pre>
</div>
</div>
<p>Currently, this is everything except the X11 dependencies, which aren’t really needed:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">?capabilities</span></code></pre></div>
<blockquote class="blockquote">
<p><strong>Note to macOS users</strong></p>
<p>Capabilities “jpeg”, “png” and “tiff” refer to the X11-based versions of these devices. If capabilities(“aqua”) is true, then these devices with type = “quartz” will be available, and out-of-the-box will be the default type. Thus for example the tiff device will be available if capabilities(“aqua”) || capabilities(“tiff”) if the defaults are unchanged.</p>
</blockquote>
<p>As an active contributor to Homebrew, I <em>strongly</em> recommend using it for any/all software; their quality control is excellent.</p>
</section>
</section>
<section id="r-workspace" class="level1">
<h1>R Workspace</h1>
<p>Once R and RStudio have been installed, you’ll need a development environment and some packages.</p>
<section id="development-environment" class="level2">
<h2 class="anchored" data-anchor-id="development-environment">Development Environment</h2>
<p>Well, obviously, I use <a href="https://posit.co/download/rstudio-desktop/">RStudio</a>. There are other IDEs available, and it’s also possible to develop using the command line, but RStudio provides a pleasant, integrated experience for R development, and actively supports the R community. I don’t typically use the built-in Git client, instead using the GitHub Desktop client and git command-line tool.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install github</span></code></pre></div>
<p>I also occasionally use <code>vim</code> (mainly for shell scripts) and <a href="https://atom.io">atom</a> (mainly for vanilla <code>.md</code> files using <a href="https://atom.io/packages/markdown-preview-enhanced">markdown-preview-enhanced</a>).</p>
</section>
<section id="packages" class="level2">
<h2 class="anchored" data-anchor-id="packages">Packages</h2>
<p>Managing packages and environments are a challenge for most modern languages. Thankfully R doesn’t have the same level of challenge as python, or even ruby, managing packages available within a project is a best practice. I use <a href="https://github.com/rstudio/renv">renv</a> for this purpose. (I originally discovered <a href="https://rstudio.github.io/packrat/">packrat</a> but quickly discovered RStudio is replacing it with renv)</p>
<p>Here is my package maintenance approach:</p>
<section id="base-r-packages" class="level3">
<h3 class="anchored" data-anchor-id="base-r-packages">Base R Packages</h3>
<p>With no projects open, I periodically check for updates to the base R packages using the RStudio Packages “Update” function. These are the only packages I install to the base directory <code>/usr/local/Cellar/r/4.0.3_2/lib/R/library</code>. <em>Note: upgrading or reinstalling r through homebrew may ‘downgrade’ the base packages.</em></p>
</section>
<section id="development-packages" class="level3">
<h3 class="anchored" data-anchor-id="development-packages">Development Packages</h3>
<p>The only other tools I install outside of projects are for supporting development. Originally this was just renv, but now it includes a number of development tools needed to create projects. I use the R site library used by <a href="https://github.com/Homebrew/homebrew-core/blob/master/Formula/r/r.rb">homebrew</a>, currently <code>/usr/local/lib/R/4.0/site-library</code>. I’ve developed a shell script to install development packages that you can find in the tools directory of <a href="https://github.com/jabenninghoff/rtraining">this repository</a>.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/bin/sh</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install development packages to site repository</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># thanks to https://blog.sellorm.com/2017/10/21/quick-script-to-install-an-r-package-from-the-command-line/</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and https://github.com/Homebrew/homebrew-core/blob/master/Formula/r/r.rb</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># designed to work with homebrew: `brew install --formula r &amp;&amp; brew install --cask rstudio`</span></span>
<span id="cb9-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-ex</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># halt script on error, echo on</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PREFIX</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--prefix</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb9-9"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">RVERSION</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PREFIX}</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">/bin/Rscript</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-e</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cat(as.character(getRversion()[1,1:2]))'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb9-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">SITELIB</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PREFIX}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/lib/R/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${RVERSION}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/site-library"</span></span>
<span id="cb9-11"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">DEVPKG</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c("renv", "styler", "lintr", "miniUI", "devtools", "available")'</span></span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">[</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">-d</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${SITELIB}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb9-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fatal error: </span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${SITELIB}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not exist - not using </span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">brew install --formula r</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\`</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span></span>
<span id="cb9-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exit</span> 1</span>
<span id="cb9-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">fi</span></span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">brew</span> install libgit2 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required by devtools</span></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"install.packages(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${DEVPKG}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, repos=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">https://cran.rstudio.com</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, lib=</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${SITELIB}</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">R</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-save</span></span></code></pre></div>
</section>
<section id="project-packages" class="level3">
<h3 class="anchored" data-anchor-id="project-packages">Project Packages</h3>
<p>Any packages <em>not</em> needed to create projects I install within a project using renv - here are some good intros:</p>
<ul>
<li>A <a href="https://www.rstudio.com/resources/rstudioconf-2020/renv-project-environments-for-r/">presentation at rstudio::conf 2020</a></li>
<li>The <a href="https://posit.co/blog/renv-project-environments-for-r/">RStudio Blog post</a></li>
<li>An <a href="https://rstudio.github.io/renv/articles/renv.html">Introduction to renv</a></li>
<li><a href="https://github.com/rstudio/renv">renv</a> on GitHub</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">init</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to set up renv in the project</span></span>
<span id="cb10-2">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rtraining"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># to install a package</span></span>
<span id="cb10-3">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">status</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># checks if renv.lock is in sync</span></span>
<span id="cb10-4">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">snapshot</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save libraries in renv.lock</span></span>
<span id="cb10-5">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restore</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># restore libraries from renv.lock - use when first using an existing project</span></span>
<span id="cb10-6">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">clean</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove extra libraries</span></span>
<span id="cb10-7">renv<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">update</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check for unpdated versions of installed libraries</span></span></code></pre></div>
<p>If you’re installing (development) versions of packages from GitHub, you’ll be prompted to set up a personal access token using <code>create_github_token()</code> and adding it to your <code>.Renviron</code> as <code>GITHUB_PAT=</code> using <code>usethis::edit_r_environ()</code>. I had to install the development versions of both <code>styler</code> and <code>lintr</code> due to bugs not yet fixed in the released (CRAN) versions. I did also look at using <a href="https://pak.r-lib.org">pak</a> but found it too buggy to use.</p>
<p><em>Note:</em> I came across an odd quirk where renv will prompt you to upgrade base R projects, even if they’re not used. I resolved these by just upgrading the base packages with RStudio with no project open.</p>
<p>I’ve included some comments on useful packages in my <em>R Training Log</em> notebook.</p>
</section>
</section>
</section>
<section id="using-r" class="level1">
<h1>Using R</h1>
<p>So - what have I learned about using R? I won’t cover the actual Data Science part here, but have some recommended reading in my <em>R Training Log</em>.</p>
<section id="use-git" class="level2">
<h2 class="anchored" data-anchor-id="use-git">Use git!</h2>
<p>This wasn’t really something I learned with R, but use of version control for any kind of code/script is crucial. These days, I keep all scripts and configuration files in some flavor of public or private version control. Mostly that means GitHub, but also private git servers (via ssh) are easy to set up for work that you want to keep off of GitHub.</p>
<p>I don’t want to get too much into managing code via version control, but I favor trunk-based development with short-lived branches, small commits of working code, and rebase and merge for linear commit history. There’s a lot of good research on this topic from Google’s <a href="https://cloud.google.com/devops">Dev Ops Research and Assessment</a> team.</p>
</section>
<section id="using-rstudio-with-github" class="level2">
<h2 class="anchored" data-anchor-id="using-rstudio-with-github">Using RStudio with GitHub</h2>
<p>RStudio has good integration with GitHub. I’ve adopted the convention of “one RStudio Project (.Rproj) per repository” and storing the Rproj file in the repository. That seems to be the norm.</p>
</section>
<section id="r-notebooks" class="level2">
<h2 class="anchored" data-anchor-id="r-notebooks">R Notebooks</h2>
<p>R Notebooks are my preferred file format for data analysis, as they allow an easy mixing of text (using pandoc markdown) and R code chunks. This allows me to document what I’m doing as I go, both for reproducibility as well as recording my observations, thoughts and conclusions. It especially lends itself to iterative development:</p>
<ol type="1">
<li>Write code</li>
<li>Run code</li>
<li>See results</li>
<li>Update code</li>
</ol>
<p>This method of development is not always appropriate, but fits well with exploratory analysis. Once I get to writing functions, I’m starting to adopt the formal structure of <a href="https://r-pkgs.org/index.html">packages</a>, <a href="https://testthat.r-lib.org">testthat</a>, and <a href="https://roxygen2.r-lib.org">roxygen2</a>.</p>
<p>Specifically, I use <code>html_notebook</code>, which was recommended to me. RStudio handles this differently than <code>html_document</code>:</p>
<table class="table">
<colgroup>
<col style="width: 21%">
<col style="width: 39%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>Behavior</th>
<th><code>html_notebook</code></th>
<th><code>html_document</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Quick View</td>
<td>Preview Button</td>
<td>No Preview Button</td>
</tr>
<tr class="even">
<td>Saving Files</td>
<td>Automatically knits file on save</td>
<td>Manually knit file</td>
</tr>
<tr class="odd">
<td>Rendering Files</td>
<td>Renders R output as it exists in the IDE on save</td>
<td>Renders R output by running all R code</td>
</tr>
<tr class="even">
<td>Default Options</td>
<td>Includes options for readability, hiding and downloading code, and paged tables</td>
<td>Higher-quality rendering of PNG graphics</td>
</tr>
</tbody>
</table>
<p>Essentially, R Notebooks are generally faster and more convenient when <em>doing</em> analysis, and <code>html_document</code> R Markdown files offer higher-quality output. This site uses a custom framework to convert html_notebooks to html_documents for publishing (see the next section for details). They are also a convenient way to share analysis with peers - just email the <code>.nb.html</code> file, which will include all of the output, as well as embedding the <code>.Rmd</code> source code for easy editing. This also allows people who don’t have R/RStudio to see the results of an analysis.</p>
<p>There are some drawbacks to using R Notebooks:</p>
<ul>
<li>Because R Notebooks are render-on-save, you can inadvertently end up with missing or outdated R output from your notebook when saving, if you’ve made updates and haven’t re-run the entire document. My habit is to do the following at the end of a writing session, before committing to git, which ensures a “clean” notebook:
<ol type="1">
<li>Clear the Global Environment</li>
<li>“Restart R and Clear Output”</li>
<li>“Run All”</li>
<li>Save</li>
</ol></li>
<li><a href="https://support.posit.co/hc/en-us/articles/205612627-Debugging-with-RStudio#debugging-in-r-markdown-documents">Debug breakpoints don’t work in R Markdown documents</a>. To fix this, <a href="https://bookdown.org/yihui/rmarkdown-cookbook/purl.html">convert R Markdown documents to R Scripts using purl</a> for debugging.</li>
<li>Not really a drawback, but…<code>Rcpp</code> and <code>rprojroot</code> are erroneously listed in RStudio as required to create R Markdown, which can also cause problems with <code>renv</code>. This is a <a href="https://github.com/rstudio/rstudio/issues/7935">bug in RStudio</a>, which will be fixed in version 1.4.944.</li>
</ul>
</section>
<section id="publishing-r-notebooks" class="level2">
<h2 class="anchored" data-anchor-id="publishing-r-notebooks">Publishing R Notebooks</h2>
<p>Since R Notebooks are saved as html files, it’s possible to publish them on GitHub using GitHub pages. GitHub published a <a href="https://resources.github.com/github-and-rstudio/">tutorial</a> in 2018 on getting RStudio integrated with GitHub, and I started working on that. Quickly I discovered that while the tutorial was helpful, it wasn’t quite the setup I wanted; it published R Markdown through GitHub pages, but wouldn’t directly support the automatically generated html of R Notebooks. After more searching, I was able to get Notebooks working on GitHub, but I used the method described in <a href="https://github.com/rstudio/rmarkdown/issues/1020">rstudio/rmarkdown #1020</a> - checking in the .nb.html into git, and using GitHub Pages so that you can view the rendered HTML instead of just the HTML code.</p>
<section id="publishing-with-rmarkdown" class="level3">
<h3 class="anchored" data-anchor-id="publishing-with-rmarkdown">Publishing with rmarkdown</h3>
<p>After using <code>README.md</code> and GitHub pages to publish notebooks, I found I wanted an easier way to publish and navigate across collections of notebooks. Publishing R Notebooks on GitHub pages works fine, but doesn’t offer an easy navigation structure, like <a href="https://pkgdown.r-lib.org">pkgdown</a>. I tried using pkgdown to display notebooks, but pkgdown only supports building <code>vignettes</code>, which have a distinctly different look and feel than R Notebooks. The <a href="https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html">rmarkdown site generator</a>, <a href="https://rdrr.io/cran/rmarkdown/man/render_site.html">render_site</a>, allows more flexible building of websites from R Markdown files with a simple navigation bar at the top, but doesn’t support <code>html_notebook</code> files OOB.</p>
<p>To work around this, I created a simple framework for converting <code>html_notebook</code> files to <code>html_document</code> and building a <code>_site.yml</code> from a list of notebooks stored in the non-standard <code>notebooks/</code> directory, initially using a shell script, <code>build_site</code> (stored at the root of this <a href="https://github.com/jabenninghoff/rtraining">repo</a>). It does the following:</p>
<ol type="1">
<li>Creates a working directory, <code>.build-site</code></li>
<li>Builds a <code>rmarkdown::render_site()</code> <code>_site.yml</code> file that includes a menu with all notebooks in the <code>notebooks/</code> directory</li>
<li>Copies all <code>.Rmd</code> files to <code>.build-site</code> changing their type from <code>html_notebook</code> to <code>html_document</code></li>
<li>Includes some configuration to make <code>html_documents</code> work more like <code>html_notebook</code></li>
<li>Calls <code>rmarkdown::render_site()</code> to render the site in the <code>docs/</code> directory</li>
</ol>
<p>I typically rebuild a site with the following command, run from the top-level directory of the project:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> .build-site <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sh</span> build-site <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">open</span> docs/index.html</span></code></pre></div>
<p>This approach leverages the <a href="https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch">docs functionality</a> of GitHub pages, like pkgdown.</p>
</section>
<section id="update-on-publishing" class="level3">
<h3 class="anchored" data-anchor-id="update-on-publishing">Update on Publishing</h3>
<p><code>build-site</code> has been replaced with <code>build_analysis_site()</code>! At its core, it is functionally the same: builds a <code>pkgdown</code> site, adding an “Analysis” menu with all notebooks in the (renamed) <code>analysis/</code> directory, then converts and builds the notebooks using <code>rmarkdown</code>, and moves them into the <code>docs/</code> directory. Since it is now an R Script, it’s more portable and can be more easily bundled with packages. I will be migrating its functionality to <a href="https://jabenninghoff.github.io/rdev/">rdev</a> shortly, so that it’s usable across multiple analysis projects.</p>
</section>
</section>
<section id="r-package-layout" class="level2">
<h2 class="anchored" data-anchor-id="r-package-layout">R Package Layout</h2>
<p>Here is my package layout - the table shows the path, whether it’s part of the formal R package definition, and my notes on its use.</p>
<table class="table">
<thead>
<tr class="header">
<th>Path</th>
<th style="text-align: center;">R</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>.Rbuildignore</td>
<td style="text-align: center;"><code>x</code></td>
<td>Exclude files from package</td>
</tr>
<tr class="even">
<td>.Rprofile</td>
<td style="text-align: center;"><code>x</code></td>
<td>Used by <code>renv</code> and to <a href="https://r-pkgs.org/setup.html?#personal-startup-configuration">attach development tools</a></td>
</tr>
<tr class="odd">
<td>.github</td>
<td style="text-align: center;"></td>
<td>GitHub templates and workflows</td>
</tr>
<tr class="even">
<td>.gitignore</td>
<td style="text-align: center;"><code>x</code></td>
<td>I use <a href="https://github.com/github/gitignore/blob/master/R.gitignore">R</a> and macOS exclusions, and <strong>always</strong> exclude generated files outside of <code>docs/</code></td>
</tr>
<tr class="odd">
<td>.lintr</td>
<td style="text-align: center;"></td>
<td><a href="https://github.com/r-lib/lintr">lintr</a> default linters with 100 columns: <code>linters: with_defaults(line_length_linter(100))</code></td>
</tr>
<tr class="even">
<td>DESCRIPTION</td>
<td style="text-align: center;"><code>x</code></td>
<td>use “Suggests” for development tools, per <a href="https://rstudio.github.io/renv/articles/faq.html#how-should-i-handle-development-dependencies-">renv</a></td>
</tr>
<tr class="odd">
<td>LICENSE</td>
<td style="text-align: center;"><code>x</code></td>
<td>Generated with <a href="https://usethis.r-lib.org/reference/licenses.html"><code>use_mit_license()</code></a></td>
</tr>
<tr class="even">
<td>LICENSE.md</td>
<td style="text-align: center;"></td>
<td>See above, used by <a href="https://pkgdown.r-lib.org">pkgdown</a></td>
</tr>
<tr class="odd">
<td>NAMESPACE</td>
<td style="text-align: center;"><code>x</code></td>
<td>Generated with <a href="https://roxygen2.r-lib.org">roxygen2</a></td>
</tr>
<tr class="even">
<td>NEWS.md</td>
<td style="text-align: center;"></td>
<td>Release notes, used by <a href="https://pkgdown.r-lib.org">pkgdown</a></td>
</tr>
<tr class="odd">
<td>README.Rmd</td>
<td style="text-align: center;"><code>x</code></td>
<td>Generated with <a href="https://usethis.r-lib.org/reference/use_readme_rmd.html"><code>use_readme_md()</code></a></td>
</tr>
<tr class="even">
<td>README.md</td>
<td style="text-align: center;"><code>x</code></td>
<td>Generated with <a href="https://devtools.r-lib.org/reference/build_rmd.html"><code>build_readme()</code></a></td>
</tr>
<tr class="odd">
<td>R</td>
<td style="text-align: center;"><code>x</code></td>
<td>All project functions go here, with <a href="https://roxygen2.r-lib.org">roxygen2</a> comments</td>
</tr>
<tr class="even">
<td>TODO.md</td>
<td style="text-align: center;"></td>
<td>To-do list, inspired by renv’s <a href="https://github.com/rstudio/renv/blob/99737730ea69730b211770ba2bfa78301cf0e7b2/TODO.md">historical TODO.md</a></td>
</tr>
<tr class="odd">
<td>analysis</td>
<td style="text-align: center;"></td>
<td>Exploratory data analysis in R Notebooks and R Presentations</td>
</tr>
<tr class="even">
<td>analysis/data</td>
<td style="text-align: center;"></td>
<td>When appropriate, analysis data lives here</td>
</tr>
<tr class="odd">
<td>analysis/assets</td>
<td style="text-align: center;"></td>
<td>External assets (images, other files) included in R Notebooks</td>
</tr>
<tr class="even">
<td>analysis/rendered</td>
<td style="text-align: center;"></td>
<td>Manually rendered html versions of <code>analysis/</code> files to be included in <code>docs/</code>, ie <a href="https://stackoverflow.com/questions/27930127/render-r-presentation-from-the-command-line">.Rpres files</a>, not stored in git</td>
</tr>
<tr class="odd">
<td><del>demos</del></td>
<td style="text-align: center;"><code>x</code></td>
<td>I don’t use demos, as recommended by <a href="https://r-pkgs.org/misc.html">R Packages</a></td>
</tr>
<tr class="even">
<td>docs</td>
<td style="text-align: center;"></td>
<td>Used by <a href="https://pkgdown.r-lib.org/reference/build_site.html"><code>pkgdown::build_site()</code></a> and R Notebooks rendered as <code>html_document</code> using <a href="https://rdrr.io/cran/rmarkdown/man/render_site.html"><code>rmarkdown::render_site()</code></a> via <a href="https://jabenninghoff.github.io/rdev/reference/build_analysis_site.html"><code>build_analysis_site()</code></a></td>
</tr>
<tr class="odd">
<td><em>exec</em></td>
<td style="text-align: center;"><code>x</code></td>
<td>In theory this is where command line executable scrips reside</td>
</tr>
<tr class="even">
<td>inst/templates/rmarkdown</td>
<td style="text-align: center;"><code>x</code></td>
<td><em>Planned location for <a href="https://rstudio.github.io/rstudio-extensions/rmarkdown_templates.html">R Markdown Templates</a></em></td>
</tr>
<tr class="odd">
<td>man</td>
<td style="text-align: center;"><code>x</code></td>
<td>Generated with <a href="https://roxygen2.r-lib.org">roxygen2</a></td>
</tr>
<tr class="even">
<td>package.Rproj</td>
<td style="text-align: center;"></td>
<td>I use the same name for the package, .Rproj, directory, and GitHub repo</td>
</tr>
<tr class="odd">
<td>pkgdown</td>
<td style="text-align: center;"></td>
<td>I store all <a href="https://pkgdown.r-lib.org">pkgdown</a> files here</td>
</tr>
<tr class="even">
<td><em>po</em></td>
<td style="text-align: center;"><code>x</code></td>
<td>Used for <a href="https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Internationalization">Internationalization</a></td>
</tr>
<tr class="odd">
<td>renv</td>
<td style="text-align: center;"></td>
<td>Used by <a href="https://rstudio.github.io/renv/">renv</a></td>
</tr>
<tr class="even">
<td>renv.lock</td>
<td style="text-align: center;"></td>
<td>The renv <a href="https://rstudio.github.io/renv/reference/lockfiles.html">lockfile</a></td>
</tr>
<tr class="odd">
<td>tests</td>
<td style="text-align: center;"><code>x</code></td>
<td>Tests using <a href="https://testthat.r-lib.org">testthat</a></td>
</tr>
<tr class="even">
<td>tools</td>
<td style="text-align: center;"><code>x</code></td>
<td>I use <code>tools/</code> for shell scripts that support development, like <code>setup-r</code></td>
</tr>
<tr class="odd">
<td>vignettes</td>
<td style="text-align: center;"><code>x</code></td>
<td>More typical package articles, used by <a href="https://pkgdown.r-lib.org">pkgdown</a></td>
</tr>
</tbody>
</table>
</section>
<section id="r-workflow" class="level2">
<h2 class="anchored" data-anchor-id="r-workflow">R Workflow</h2>
<p>Here is the typical workflow I’m settling into (or at least trying to…I still don’t have TDD down just yet), once a project is created. Projects are either vanilla packages and don’t contain <code>analysis/</code>, like <a href="https://jabenninghoff.github.io/rdev/">rdev</a>, or “analysis packages” and bundle analysis notebooks as a project, like <a href="https://jabenninghoff.github.io/rtraining/">rtraining</a>.</p>
<ol type="1">
<li>Check for updated packages when starting to work, (I created <a href="https://jabenninghoff.github.io/rdev/reference/check_renv.html"><code>check_renv()</code></a> for this) and check for errors using local CI checks (<a href="https://jabenninghoff.github.io/rdev/reference/ci.html"><code>ci()</code></a>).</li>
<li>When creating a new function, write the documentation first, using Roxygen - this helps encourage up-front design and clarifies goals/requirements.</li>
<li>Write tests next - both happy path and negative test cases whenever possible. 100% test coverage is overkill, but I try to write a ‘data validity checker’ which also helps define the expected format of the data.</li>
<li><a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a>: run tests, write code that fails tests, fix code, repeat. (Don’t forget to refactor)</li>
<li>I use trunk-based development, which I learned from <a href="https://brew.sh">Homebrew</a>. I try to keep commits small, related, and implementing changes that don’t break code, merge back to main frequently - before the end of the day - and require linear commit history (ie rebase and merge).</li>
<li>Before pushing commits, I run <a href="https://jabenninghoff.github.io/rdev/reference/style_all.html"><code>style_all()</code></a> and <a href="https://jabenninghoff.github.io/rdev/reference/ci.html"><code>ci()</code></a> to fix any problems locally (just “undo” in GitHub Desktop, fix, and re-commit).</li>
</ol>
<p>One thing that annoys me is that by default, devtools just writes new lines to the end of <code>.Rbuildignore</code>, so I wrote <a href="https://jabenninghoff.github.io/rdev/reference/sort_rbuildignore.html"><code>sort_rbuildignore()</code></a>.</p>
</section>
</section>
<section id="next-steps" class="level1">
<h1>Next Steps</h1>
<p>I’ll keep adding to this document as I go, and will likely eventually migrate this notebook to a <code>vignette</code> and switch to <code>pkgdown</code>.</p>


</section>

 ]]></description>
  <category>notes</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/r-setup-log.html</guid>
  <pubDate>Wed, 30 Dec 2020 06:00:00 GMT</pubDate>
</item>
<item>
  <title>R Training Log</title>
  <dc:creator>John Benninghoff</dc:creator>
  <link>https://jabenninghoff.github.io/rtraining/analysis/r-training-log.html</link>
  <description><![CDATA[ 




<p>Original notes on learning R and RStudio. An updated reading list of R books and other recommended resources is available in <a href="r-books.html">R Books</a>.</p>
<section id="libraries" class="level1">
<h1>Libraries</h1>
<p>Load libraries and suppress warning and error messages. Thanks to this tidyverse <a href="https://reprex.tidyverse.org/articles/articles/suppress-startup-messages.html">article</a>. Also load rdev and set default theme and color scales.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jbplot)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(caTools)</span></code></pre></div>
</div>
</section>
<section id="files" class="level1">
<h1>Files</h1>
<p>Files in this project:</p>
<ul>
<li><code>.Rbuildignore</code>:</li>
<li><code>.Rhistory</code>:</li>
<li><code>.Rprofile</code>:</li>
<li><code>.Rproj.user</code>:</li>
<li><code>.git</code>:</li>
<li><code>.gitignore</code>:</li>
<li><code>.lintr</code>: <a href="https://github.com/r-lib/lintr">lintr</a> configuration file</li>
<li><code>DESCRIPTION</code>:</li>
<li><code>LICENSE</code>:</li>
<li><code>LICENSE.md</code>:</li>
<li><code>NAMESPACE</code>:</li>
<li><code>README.Rmd</code>:</li>
<li><code>README.md</code>:</li>
<li><code>man</code>:</li>
<li><code>r-training-log.Rmd</code>:</li>
<li><code>r-training-log.nb.html</code>:</li>
<li><code>renv</code>:</li>
<li><code>renv.lock</code>:</li>
<li><code>rtraining.Rproj</code>:</li>
<li><code>setup-r</code>:</li>
<li><code>tests</code>:</li>
</ul>
</section>
<section id="not-r" class="level1">
<h1>Not R</h1>
<p>Not R, but has advice on git best practices and a guide to fixing commit mistakes: <a href="https://sethrobertson.github.io" class="uri">https://sethrobertson.github.io</a></p>
</section>
<section id="learning-r" class="level1">
<h1>Learning R</h1>
<p>Resources for learning R.</p>
<p><strong>Already using:</strong> these are packages I’m already using in R. <em>Note:</em> much of this has been influenced by the work of <a href="https://hadley.nz/">Hadley Wickham</a>, who seems to be one of the (if not the most) significant contributors to the modern R and RStudio environment. Most of these have good integration with RStudio.</p>
<ul>
<li><a href="https://github.com/rstudio/renv">renv</a> - for package version management by project</li>
<li><a href="https://styler.r-lib.org/">styler</a> and <a href="https://github.com/r-lib/lintr">lintr</a> - for implementing the <a href="https://style.tidyverse.org/">tidyverse style guide</a></li>
<li>Various <a href="https://www.tidyverse.org/">tidyverse</a> packages, including:
<ul>
<li>dplyr</li>
<li>ggplot2</li>
<li>glue</li>
<li>lubridate</li>
<li>readr</li>
<li>stringr</li>
<li>tibble</li>
<li>tidyr</li>
</ul></li>
<li>Other packages:
<ul>
<li>gt</li>
<li>kableExtra</li>
<li>miniUI (for RStudio plugins)</li>
<li>openxlsx</li>
<li>knitr: there is a useful <a href="https://github.com/yihui/knitr/blob/master/inst/examples/knitr-spin.R">knitr-spin.R</a> demo script that shows how to knit an R script (from <a href="https://yihui.org/knitr/demo/stitch/" class="uri">https://yihui.org/knitr/demo/stitch/</a>) - I briefly explored this as an alternative to notebooks</li>
</ul></li>
<li>R Notebooks leveraging GitHub Pages</li>
</ul>
<p>When in doubt, start with the tidyverse, or RStudio sponsored projects, or built-in R.</p>
<p><strong>Completed:</strong> I’ve read these.</p>
<ul>
<li><a href="https://r4ds.had.co.nz/">R for Data Science</a> - Hadley’s intro book</li>
</ul>
<p><strong>In progress:</strong> I’m reading these now.</p>
<ul>
<li><a href="https://r-pkgs.org/">R Packages</a> - even more Hadley</li>
<li><a href="https://testthat.r-lib.org/">testthat</a> - R testing framework</li>
<li><a href="https://github.com/r-lib/roxygen2">roxygen2</a> - document functions inline</li>
</ul>
<p><strong>Future:</strong> I’m planning on adopting these to improve my code quality.</p>
<ul>
<li>Full <a href="https://ggplot2.tidyverse.org/reference/index.html">ggplot2</a> documentation OR</li>
<li>ggplot2 book, 3rd edition draft: <a href="https://ggplot2-book.org" class="uri">https://ggplot2-book.org</a></li>
<li><a href="https://adv-r.hadley.nz/">Advanced R</a> - more Hadley</li>
</ul>
<p><strong>Also helpful:</strong> some additional helpful links, either from me or recommended by others.</p>
<ul>
<li><a href="https://education.rstudio.com/learn/beginner/">RStudio Education</a> - the Beginners page</li>
<li><a href="https://sfirke.github.io/janitor/">janitor</a> - automate data cleanup</li>
<li><a href="https://purrr.tidyverse.org/">purrr</a> - for list iteration</li>
<li><a href="https://github.com/tidymodels/broom">broom</a> - for getting classic stats objects into tidy shapes that are easier to work with</li>
</ul>
<p><strong>References:</strong> other good reference sites.</p>
<ul>
<li><a href="https://www.yan-holtz.com">Yan Holtz</a> has some good sites for data visualization:
<ul>
<li><a href="https://r-graph-gallery.com/">the R Graph Gallery</a> - charts made with R and ggplot2</li>
<li><a href="https://www.data-to-viz.com">from Data to Viz</a> - recommendations on data visualization</li>
<li>He also has some tips on <a href="https://holtzy.github.io/Pimp-my-rmd/">R Markdown</a></li>
</ul></li>
<li><a href="https://stuff.mit.edu/afs/athena/software/r/current/RStudio/resources/roxygen_help.html">MIT Roxygen Quick Reference</a></li>
</ul>
<section id="r-for-data-science" class="level2">
<h2 class="anchored" data-anchor-id="r-for-data-science">R for Data Science</h2>
<p>Selected highlights from the book:</p>
<section id="patterns-and-models" class="level3">
<h3 class="anchored" data-anchor-id="patterns-and-models">Patterns and models</h3>
<p><a href="https://r4ds.had.co.nz/exploratory-data-analysis.html#patterns-and-models">7.6 Patterns and models</a> covers models and residuals, here showing how to reveal the expected relationship between cut and price:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(modelr)</span>
<span id="cb2-2"></span>
<span id="cb2-3">mod <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(price) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(carat), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds)</span>
<span id="cb2-4"></span>
<span id="cb2-5">diamonds2 <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> diamonds <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">add_residuals</span>(mod) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">resid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(resid))</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> carat, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> resid)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/r-training-log_files/figure-html/models-1.png" class="img-fluid figure-img" width="816"></p>
</figure>
</div>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> diamonds2) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_boxplot</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mapping =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> cut, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> resid)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_quo</span>()</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/r-training-log_files/figure-html/models-2.png" class="img-fluid figure-img" width="816"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="non-tidy-data" class="level3">
<h3 class="anchored" data-anchor-id="non-tidy-data">Non-Tidy Data</h3>
<p>Hadley advocates for “tidy” data, but there are times when data is usefully <a href="https://web.archive.org/web/20220520132417/https://simplystatistics.org/posts/2016-02-17-non-tidy-data/">non-tidy</a>.</p>
</section>
<section id="graphics-learning-more" class="level3">
<h3 class="anchored" data-anchor-id="graphics-learning-more">Graphics: Learning more</h3>
<p>From <a href="https://r4ds.had.co.nz/graphics-for-communication.html#learning-more-4">28.8 Learning more</a>:</p>
<p>“The absolute best place to learn more is the ggplot2 book: <a href="https://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/331924275X/"><em>ggplot2: Elegant graphics for data analysis</em></a>. It goes into much more depth about the underlying theory, and has many more examples of how to combine the individual pieces to solve practical problems. Unfortunately, the book is not available online for free, although you can find the source code at <a href="https://github.com/hadley/ggplot2-book" class="uri">https://github.com/hadley/ggplot2-book</a>.</p>
<p>Another great resource is the ggplot2 extensions gallery <a href="https://exts.ggplot2.tidyverse.org/gallery/" class="uri">https://exts.ggplot2.tidyverse.org/gallery/</a>. This site lists many of the packages that extend ggplot2 with new geoms and scales. It’s a great place to start if you’re trying to do something that seems hard with ggplot2.”</p>
</section>
<section id="r-markdown-websites" class="level3">
<h3 class="anchored" data-anchor-id="r-markdown-websites">R Markdown Websites</h3>
<p>From <a href="https://r4ds.had.co.nz/r-markdown-formats.html#websites">29.8 Websites</a>:</p>
<p>“With a little additional infrastructure you can use R Markdown to generate a complete website:</p>
<ul>
<li>Put your <code>.Rmd</code> files in a single directory. <code>index.Rmd</code> will become the home page.</li>
<li>Add a YAML file named <code>_site.yml</code> provides the navigation for the site. For example:</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my-website"</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">navbar</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">title</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My Website"</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Home"</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> index.html</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Viridis Colors"</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 1-example.html</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">text</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Terrain Colors"</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">href</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 3-inline.html</span></span></code></pre></div>
<p>Execute <code>rmarkdown::render_site()</code> to build <code>_site</code>, a directory of files ready to deploy as a standalone static website, or if you use an RStudio Project for your website directory. RStudio will add a Build tab to the IDE that you can use to build and preview your site.</p>
<p>Read more at <a href="https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html" class="uri">https://bookdown.org/yihui/rmarkdown/rmarkdown-site.html</a>.”</p>
</section>
<section id="r-notebook-advice" class="level3">
<h3 class="anchored" data-anchor-id="r-notebook-advice">R Notebook Advice</h3>
<p>Hadley has some good suggestions for R Notebooks in <a href="https://r4ds.had.co.nz/r-markdown-workflow.html">30 R Markdown workflow</a>.</p>
</section>
</section>
<section id="r-packages" class="level2">
<h2 class="anchored" data-anchor-id="r-packages">R Packages</h2>
<p>Notes from the book. I’ve started writing all code in the package structure described in the book and used by Hadley and the tidyverse. Doing so makes it easier to write tests, documentation, track dependencies, and provides convenient continuous integration through <code>R CMD check</code>.</p>
<section id="system-setup" class="level3">
<h3 class="anchored" data-anchor-id="system-setup">System Setup</h3>
<p><a href="https://r-pkgs.org/setup.html">Chapter 3</a> has good coverage of setting up a system for R development, I’ve incorporated what I learned from this into my “R Setup Log”.</p>
</section>
<section id="naming-things" class="level3">
<h3 class="anchored" data-anchor-id="naming-things">Naming Things</h3>
<p>Package names are pretty restricted, but Hadley has some good recommendation on <a href="https://r-pkgs.org/Workflow101.html#naming">naming</a> them, including the “<a href="https://github.com/r-lib/available">available</a>” package, which I’ve started using.</p>
</section>
<section id="rstudio" class="level3">
<h3 class="anchored" data-anchor-id="rstudio">RStudio</h3>
<p>There are some helpful tips in the <a href="https://r-pkgs.org/Workflow101.html#benefits-of-rstudio-projects">RStudio</a> section, including 2 key shortcuts to remember:</p>
<ul>
<li>control-. to “Go to file/function”</li>
<li>alt-shift-k for the keyboard shortcut quick reference</li>
<li>not a shortcut, but use <a href="https://usethis.r-lib.org/reference/proj_sitrep.html"><code>proj_sitrep()</code></a> to query active projects and working directory</li>
</ul>
</section>
<section id="writing-better-code" class="level3">
<h3 class="anchored" data-anchor-id="writing-better-code">Writing Better Code</h3>
<p>Chapter 6, <a href="https://r-pkgs.org/package-within.html">The Package Within</a>, highlights some sub-optimal R code and shows how to clean it up. It never occurred to me to use a <a href="https://r-pkgs.org/package-within.html#bravo-a-better-script-that-works">left join</a> to clean up data, and I’ve already started using the technique.</p>
</section>
<section id="r-and-homebrew" class="level3">
<h3 class="anchored" data-anchor-id="r-and-homebrew">R and Homebrew</h3>
<p><a href="https://r-pkgs.org/Code.html#code-style">7.4 Code Style</a> includes a footnote that references my favorite open source project, <a href="https://brew.sh">Homebrew</a>:</p>
<blockquote class="blockquote">
<p>The <a href="https://mikemcquaid.com/2018/06/05/robot-pedantry-human-empathy/">Robot Pedantry, Human Empathy</a> blog post by Mike McQuaid does an excellent job summarizing the benefit of automating tasks like code re-styling.</p>
</blockquote>
<p>I’ve contributed to homebrew, but I’ve only recently realized how advanced a project it truly is - “advanced” DevOps concepts like trunk-based development and pedantic continuous integration checks just make sense to me, thanks to my experiences contributing. And, I’ve been the recipient of a “You Rock!” from Mike, which felt great, and still does now, even after learning it was partially automated.</p>
</section>
<section id="package-conventions" class="level3">
<h3 class="anchored" data-anchor-id="package-conventions">Package Conventions</h3>
<p>From <a href="https://r-pkgs.org/Code.html#sec-code-r-landscape">7.6 Respect the R landscape</a>:</p>
<p>Avoid using any of the following:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>()</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">require</span>()</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">source</span>()</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">options</span>()</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>()</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setwd</span>()</span>
<span id="cb5-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setenv</span>()</span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.setlocale</span>()</span>
<span id="cb5-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>()</span></code></pre></div>
<p>Instead, manage dependencies through <code>roxygen2</code> and the <code>DESCRIPTION</code> file. Use <a href="https://withr.r-lib.org/index.html"><code>withr</code></a> when you need to modify state.</p>
</section>
</section>
</section>
<section id="r-demos" class="level1">
<h1>R Demos</h1>
<p>Interesting demonstrations of R code.</p>
<section id="wikipedia" class="level2">
<h2 class="anchored" data-anchor-id="wikipedia">Wikipedia</h2>
<p>A fun demo taken from the Wikipedia article on <a href="https://en.wikipedia.org/wiki/R_(programming_language)">R</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://jabenninghoff.github.io/rtraining/analysis/rendered/mandelbrot.gif" class="img-fluid figure-img"></p>
<figcaption>Mandelbrot set</figcaption>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">local</span>({</span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># install.packages("caTools")  # install external package</span></span>
<span id="cb6-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library(caTools)             # external package providing write.gif function</span></span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># note: the code in the text of the Wikipedia article doesn't match the code</span></span>
<span id="cb6-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       used to generate the image in the article,</span></span>
<span id="cb6-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://commons.wikimedia.org/wiki/File:Mandelbrot_Creation_Animation.gif</span></span>
<span id="cb6-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#       the colors here have been changed to match the image.</span></span>
<span id="cb6-8">  jet.colors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">colorRampPalette</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#00007F"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#007FFF"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7FFF7F"</span>,</span>
<span id="cb6-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yellow"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#FF7F00"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#7F0000"</span></span>
<span id="cb6-11">  ))</span>
<span id="cb6-12">  dx <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define width</span></span>
<span id="cb6-13">  dy <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1400</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define height</span></span>
<span id="cb6-14">  C <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complex</span>(</span>
<span id="cb6-15">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">real =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> dx), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">each =</span> dy),</span>
<span id="cb6-16">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">imag =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rep</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> dy), dx)</span>
<span id="cb6-17">  )</span>
<span id="cb6-18">  C <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(C, dy, dx) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape as square matrix of complex numbers</span></span>
<span id="cb6-19">  Z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize Z to zero</span></span>
<span id="cb6-20">  X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">array</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dy, dx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize output 3D array</span></span>
<span id="cb6-21">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) { <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loop with 20 iterations</span></span>
<span id="cb6-22">    Z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> Z<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> C <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the central difference equation</span></span>
<span id="cb6-23">    X[, , k] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(Z)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># capture results</span></span>
<span id="cb6-24">  }</span>
<span id="cb6-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">write.gif</span>(X, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rendered/mandelbrot.gif"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> jet.colors, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">delay =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-26">})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning in complex(real = rep(seq(-2.2, 1, length.out = dx), each = dy), :
partial argument match of 'imag' to 'imaginary'</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <guid>https://jabenninghoff.github.io/rtraining/analysis/r-training-log.html</guid>
  <pubDate>Wed, 02 Dec 2020 06:00:00 GMT</pubDate>
</item>
</channel>
</rss>
