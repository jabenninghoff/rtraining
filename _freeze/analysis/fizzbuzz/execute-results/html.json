{
  "hash": "433ccf552215e2ab850f58141b74b512",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"FizzBuzz\"\nauthor: \"John Benninghoff\"\ndate: '2025-10-01'\ndate-modified: '2025-10-02'\ncategories: notes\norder: 107\noutput:\n  html_notebook:\n    theme:\n      version: 5\n      preset: bootstrap\n    css: assets/extra.css\n    pandoc_args: --shift-heading-level-by=1\n    toc: yes\n    toc_float:\n      collapsed: no\n      smooth_scroll: no\n---\n\nMy implementation of [FizzBuzz](https://rosettacode.org/wiki/FizzBuzz) in R, using a vector function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n# FizzBuzz\n\nAn R implementation of [Fizz Buzz](https://en.wikipedia.org/wiki/Fizz_buzz), using the instructions\nfrom [Rosetta Code](https://rosettacode.org/wiki/FizzBuzz).\n\n## First Implementation\n\nMy implementation, written first.\n\nThe function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizz_buzz <- function(x) {\n  fb_single <- function(n) {\n    if (n %% 3 == 0 && n %% 5 == 0) {\n      \"FizzBuzz\"\n    } else if (n %% 5 == 0) {\n      \"Buzz\"\n    } else if (n %% 3 == 0) {\n      \"Fizz\"\n    } else {\n      # use as.character() so all return values match character(1)\n      as.character(n)\n    }\n  }\n  vapply(x, fb_single, character(1))\n}\n```\n:::\n\n\nThe task:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizz_buzz(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n [13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n [19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n [25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n [31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n [37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"    \n [43] \"43\"       \"44\"       \"FizzBuzz\" \"46\"       \"47\"       \"Fizz\"    \n [49] \"49\"       \"Buzz\"     \"Fizz\"     \"52\"       \"53\"       \"Fizz\"    \n [55] \"Buzz\"     \"56\"       \"Fizz\"     \"58\"       \"59\"       \"FizzBuzz\"\n [61] \"61\"       \"62\"       \"Fizz\"     \"64\"       \"Buzz\"     \"Fizz\"    \n [67] \"67\"       \"68\"       \"Fizz\"     \"Buzz\"     \"71\"       \"Fizz\"    \n [73] \"73\"       \"74\"       \"FizzBuzz\" \"76\"       \"77\"       \"Fizz\"    \n [79] \"79\"       \"Buzz\"     \"Fizz\"     \"82\"       \"83\"       \"Fizz\"    \n [85] \"Buzz\"     \"86\"       \"Fizz\"     \"88\"       \"89\"       \"FizzBuzz\"\n [91] \"91\"       \"92\"       \"Fizz\"     \"94\"       \"Buzz\"     \"Fizz\"    \n [97] \"97\"       \"98\"       \"Fizz\"     \"Buzz\"    \n```\n\n\n:::\n:::\n\n\nTo solve this, I first wrote the task, then wrote the function. I took advantage of the fact that R\nwill print the return output of a function by default.\n\nFor the function, I wanted to use functional programming and avoid a `for()` loop, and only use base\nR, so I implemented a function for a single case and used `vapply()` to apply the function across\nthe vector sequence `1:100`. In my original version, I used `unlist(lapply())` because I couldn't\nget `vapply()` to work. The help for `dplyr::case_when()` includes a FizzBuzz example with\n`as.character()` so that the return type is always the same; I adapted this to my initial base R\nsolution.\n\n## dplyr\n\nUsing `dplyr::case_when()` allows much simpler code: (R doesn't have a built-in 'case' statement)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizz_buzz_d <- function(x) {\n  dplyr::case_when(\n    # x %% 15 == 0 is equivalent to x %% 5 == 0 && x %% 3 == 0\n    x %% 15 == 0 ~ \"FizzBuzz\",\n    x %% 5 == 0 ~ \"Buzz\",\n    x %% 3 == 0 ~ \"Fizz\",\n    .default = as.character(x)\n  )\n}\n\nfizz_buzz_d(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n [13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n [19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n [25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n [31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n [37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"    \n [43] \"43\"       \"44\"       \"FizzBuzz\" \"46\"       \"47\"       \"Fizz\"    \n [49] \"49\"       \"Buzz\"     \"Fizz\"     \"52\"       \"53\"       \"Fizz\"    \n [55] \"Buzz\"     \"56\"       \"Fizz\"     \"58\"       \"59\"       \"FizzBuzz\"\n [61] \"61\"       \"62\"       \"Fizz\"     \"64\"       \"Buzz\"     \"Fizz\"    \n [67] \"67\"       \"68\"       \"Fizz\"     \"Buzz\"     \"71\"       \"Fizz\"    \n [73] \"73\"       \"74\"       \"FizzBuzz\" \"76\"       \"77\"       \"Fizz\"    \n [79] \"79\"       \"Buzz\"     \"Fizz\"     \"82\"       \"83\"       \"Fizz\"    \n [85] \"Buzz\"     \"86\"       \"Fizz\"     \"88\"       \"89\"       \"FizzBuzz\"\n [91] \"91\"       \"92\"       \"Fizz\"     \"94\"       \"Buzz\"     \"Fizz\"    \n [97] \"97\"       \"98\"       \"Fizz\"     \"Buzz\"    \n```\n\n\n:::\n:::\n\n\n## for loop\n\nThe simplest way to solve this is with a for loop:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (n in 1:100) {\n  if (n %% 3 == 0 && n %% 5 == 0) {\n    print(\"FizzBuzz\")\n  } else if (n %% 5 == 0) {\n    print(\"Buzz\")\n  } else if (n %% 3 == 0) {\n    print(\"Fizz\")\n  } else {\n    print(n)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n\n\n:::\n:::\n\n\nThe downside to this approach is that it prints each result individually, instead of returning a\nvector.\n\n## Rosetta Code\n\nNote: Rosetta Code offers several different\n[solutions for R](https://rosettacode.org/wiki/FizzBuzz#R). The first solution is cleverer yet still\nunderstandable use of base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfizz_buzz_r <- function(x) {\n  xx <- x\n  xx[x %% 3 == 0] <- \"Fizz\"\n  xx[x %% 5 == 0] <- \"Buzz\"\n  xx[x %% 15 == 0] <- \"FizzBuzz\"\n  xx\n}\n\nfizz_buzz_r(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"1\"        \"2\"        \"Fizz\"     \"4\"        \"Buzz\"     \"Fizz\"    \n  [7] \"7\"        \"8\"        \"Fizz\"     \"Buzz\"     \"11\"       \"Fizz\"    \n [13] \"13\"       \"14\"       \"FizzBuzz\" \"16\"       \"17\"       \"Fizz\"    \n [19] \"19\"       \"Buzz\"     \"Fizz\"     \"22\"       \"23\"       \"Fizz\"    \n [25] \"Buzz\"     \"26\"       \"Fizz\"     \"28\"       \"29\"       \"FizzBuzz\"\n [31] \"31\"       \"32\"       \"Fizz\"     \"34\"       \"Buzz\"     \"Fizz\"    \n [37] \"37\"       \"38\"       \"Fizz\"     \"Buzz\"     \"41\"       \"Fizz\"    \n [43] \"43\"       \"44\"       \"FizzBuzz\" \"46\"       \"47\"       \"Fizz\"    \n [49] \"49\"       \"Buzz\"     \"Fizz\"     \"52\"       \"53\"       \"Fizz\"    \n [55] \"Buzz\"     \"56\"       \"Fizz\"     \"58\"       \"59\"       \"FizzBuzz\"\n [61] \"61\"       \"62\"       \"Fizz\"     \"64\"       \"Buzz\"     \"Fizz\"    \n [67] \"67\"       \"68\"       \"Fizz\"     \"Buzz\"     \"71\"       \"Fizz\"    \n [73] \"73\"       \"74\"       \"FizzBuzz\" \"76\"       \"77\"       \"Fizz\"    \n [79] \"79\"       \"Buzz\"     \"Fizz\"     \"82\"       \"83\"       \"Fizz\"    \n [85] \"Buzz\"     \"86\"       \"Fizz\"     \"88\"       \"89\"       \"FizzBuzz\"\n [91] \"91\"       \"92\"       \"Fizz\"     \"94\"       \"Buzz\"     \"Fizz\"    \n [97] \"97\"       \"98\"       \"Fizz\"     \"Buzz\"    \n```\n\n\n:::\n:::\n\n\nOf all the solutions, I think using `dplyr::case_when()` is the most readable. If I needed a base R\nsolution in the future, I'd pick the Rosetta version.\n",
    "supporting": [
      "fizzbuzz_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}