{
  "hash": "97feb3e57a532d503076dd10b6afc37a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hockey Cards Analysis\"\nauthor: \"John Benninghoff\"\ndate: '2024-04-17'\ndate-modified: '2024-04-17'\ncategories: notes\norder: 106\noutput:\n  html_notebook:\n    theme:\n      version: 5\n      preset: bootstrap\n    css: assets/extra.css\n    pandoc_args: --shift-heading-level-by=1\n    toc: yes\n    toc_float:\n      collapsed: no\n      smooth_scroll: no\n---\n\nA simple Monte Carlo simulation in R, replicating Julia code from a LinkedIn [post](https://www.linkedin.com/posts/etorkia_gretzky-card-simulation-using-julia-activity-7186379288563048448--FVH).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(jbplot)\n```\n:::\n\n\n# Background\n\nI came across an interesting\n[post](https://www.linkedin.com/posts/etorkia_gretzky-card-simulation-using-julia-activity-7186379288563048448--FVH)\non LinkedIn that used Monte Carlo simulation to help answer the question \"How much is a box of\nunopened Canadian hockey cards worth?\" The example code was in Julia, and I wanted to recreate it in\nR for comparison.\n\n# Code\n\nThe base R code below is functionally equivalent to the Julia code, except it omits the trial ID in\nthe result:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngretsky_cards <- function(trials) {\n  set_cards <- 396\n  carton_cards <- 672\n  cartons <- 16\n  box_cards <- carton_cards * cartons\n\n  replicate(trials, {\n    carton <- sample(1:set_cards, box_cards, replace = TRUE)\n    sum(carton == 99)\n  })\n}\n\ngretskys <- gretsky_cards(10000)\n```\n:::\n\n\nAlso, instead of using a loop, I used `replicate()`, which I think is easier to use and understand.\n\n# Answer - Base R\n\nReplicating the answer in base R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(gretskys)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   24.00   27.00   27.13   31.00   47.00 \n```\n\n\n:::\n\n```{.r .cell-code}\nhist(gretskys)\n```\n\n::: {.cell-output-display}\n![](hockey-cards_files/figure-html/summary-1.png){width=816}\n:::\n:::\n\n\n# Answer - ggplot2\n\nUse ggplot2 to create a prettier histogram:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(as.data.frame(gretskys), aes(gretskys)) +\n  geom_hist_bw(binwidth = 1) +\n  labs(title = \"Gretsky cards per case\", x = NULL, y = NULL) +\n  labs(caption = \"Number of occurrences over 10,000 simulations\") +\n  theme_quo()\n```\n\n::: {.cell-output-display}\n![](hockey-cards_files/figure-html/histogram-1.png){width=816}\n:::\n:::\n\n\n# Performance\n\nHow does the performance compare to Julia?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::mark(gretsky_cards(10000))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 6\n  expression                min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>           <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 gretsky_cards(10000)    1.85s    1.85s     0.542     1.2GB     21.1\n```\n\n\n:::\n:::\n\n\nIn this case, it certainly appears to be slower than the Julia test result which was 1.63 seconds.\n",
    "supporting": [
      "hockey-cards_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}