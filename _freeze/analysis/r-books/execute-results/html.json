{
  "hash": "58aff8a8f6bb37b27416e7c1f3056edf",
  "result": {
    "markdown": "---\ntitle: \"R Books\"\nauthor: \"John Benninghoff\"\ndate: '2023-11-17'\nfile-modified: '2023-12-29'\ncategories: reading\norder: 1\noutput:\n  html_notebook:\n    theme:\n      version: 5\n      preset: bootstrap\n    css: assets/extra.css\n    toc: yes\n    toc_float:\n      collapsed: no\n      smooth_scroll: no\n---\n\n\nAn actively maintained and curated list of R Books and other recommended resources from my reading list.\n\n## Libraries\n\nLibraries used in this notebook.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(cranlogs)\nlibrary(dplyr)\n```\n:::\n\n\n## Getting Started\n\nBooks and resources I recommend for learning R.\n\n### R for Data Science\n\n[R for Data Science (2e)](https://r4ds.hadley.nz) - Second Edition of\n[Hadley Wickham's](https://hadley.nz/) introductory book on R and exploratory data analysis. The\nbook contains example code and exercises in most chapters. I used the\n[first edition](https://r4ds.had.co.nz/) as my primary source when I was first learning R, and\nstill recommend the book for beginners who want to learn R. The book teaches the basics of using\ntidyverse R^[For a detailed explanation of \"tidyverse R\", see [R Dialects]] for exploratory data\nanalysis and visualization. A companion book provides suggested\n[solutions](https://mine-cetinkaya-rundel.github.io/r4ds-solutions/) to the exercises.\n\nSample visualization from the first chapter:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# visualization from https://r4ds.hadley.nz/data-visualize#first-steps\nggplot(\n  data = penguins,\n  mapping = aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", y = \"Body mass (g)\",\n    color = \"Species\", shape = \"Species\"\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](r-books_files/figure-html/r4ds-1.png){width=816}\n:::\n:::\n\n\n### Resources\n\nIn addition to R for Data Science, I recommend the following resources for new R users:\n\n- [The R Graph Gallery](https://r-graph-gallery.com/) - library of charts made with R and ggplot2\n- Packages for writing better code:\n  - [renv](https://rstudio.github.io/renv/) - for package version management by project\n  - [styler](https://styler.r-lib.org/) - for consistent formatting of R code\n  - [lintr](https://lintr.r-lib.org) - for avoiding common mistakes\n- Style guides for writing better code:\n  - [tidyverse style guide](https://style.tidyverse.org/) - implemented by styler\n  - [Google's R Style Guide](https://google.github.io/styleguide/Rguide.html) - a fork of the\n    tidyverse guide\n\n[rdev](https://jabenninghoff.github.io/rdev/index.html), my personalized collection of R development\ntools, includes all three of these packages and more, along with my own\n[style guide](https://jabenninghoff.github.io/rdev/articles/style-guide.html) and R environment\nsetup [instructions](https://jabenninghoff.github.io/rdev/articles/rdev.html).\n\n## Additional Reading\n\nBooks I read to improve my knowledge of R.\n\n- [R Packages (2e)](https://r-pkgs.org/) - the second edition of Hadley Wickham's book on writing R\n  packages, which I used to build [rdev](https://github.com/jabenninghoff/rdev)\n- [Advanced R](https://adv-r.hadley.nz/) - the second edition of Hadley's book on R programming,\n  which explains the R language (the [first edition](http://adv-r.had.co.nz) uses more base R than\n  the second edition)\n- [Advanced R Solutions](https://advanced-r-solutions.rbind.io) - solutions to exercises from\n  *Advanced R*\n- [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org) - the third edition\n  of Hadley's book on his implementation of Leland Wilkinson's *Grammar of Graphics*\n- [Solutions to ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book-solutions-3ed.netlify.app) -\n  solutions to exercises from *ggplot2*\n\nMy own notes and solutions to the Advanced R and ggplot2 exercises are available on this site.\n\n### raps-with-r\n\n[Building reproducible analytical pipelines with R](https://raps-with-r.dev) - the stated goal of\nthe book is to improve the reproducibility of data analysis. I don't recommend this book. Section 1\nis a reasonably good introduction to git and GitHub, but introduces trunk-based development without\ncovering linear commit history. Section 2 provides some good advice, but much that I disagree with,\nincluding inline use of `knitr::knit_child` to automate creation of sections (which break the\nnotebook workflow) and `fusen` to create packages from `.Rmd` files, which I found to create extra\nwork with no clear benefits over using and/or extending the standard package layout like\n[vertical](https://www.crumplab.com/vertical/index.html) or my own\n[layout](https://jabenninghoff.github.io/rdev/articles/analysis-package-layout.html) from\n[rdev](https://jabenninghoff.github.io/rdev/index.html). (Interestingly, the author of vertical is\n[also](https://www.crumplab.com/blog/post_886_10_14_22_quartoProjects/)\n[switching](https://www.crumplab.com/blog/663_quarto_projects/) to [Quarto](https://quarto.org) for\nreproducible research and analysis) I also found the code examples to be inconsistent and a bit\nclunky.\n\nChapter 12 gives recommendations on testing: unit testing with some basic examples,\n[assertive programming](https://en.wikipedia.org/wiki/Assertion_(software_development)),\n[Test-Driven Development (TDD)](https://en.wikipedia.org/wiki/Test-driven_development), and test\ncoverage. It suggests three packages for R assertions:\n[`assertthat`](https://github.com/hadley/assertthat),\n[`chk`](https://poissonconsulting.github.io/chk/), and\n[`checkmate`](https://mllg.github.io/checkmate/). Both `chk` and `checkmate` are designed to check\nfunction arguments; of the two, `checkmate` appears to be more robust and built to address the\ndownside of R being a dynamically typed language.\n\nFor data validation, I currently use `stopifnot()`, although I may switch to either `assertr` or\n`validate`, which are both popular packages. I validate function arguments using manual checks, but\n`checkmate` looks appealing as a way to write more succinct code. Total downloads for the `assertr`,\n`validate`, `chk`, and `checkmate` packages for the last month are listed below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncran_downloads(\n  packages = c(\"assertr\", \"validate\", \"chk\", \"checkmate\"),\n  when = \"last-month\"\n) |>\n  group_by(package) |>\n  summarize(downloads = sum(count), as_of = max(date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 3\n  package   downloads as_of     \n  <chr>         <dbl> <date>    \n1 assertr        1609 2023-12-30\n2 checkmate    244133 2023-12-30\n3 chk           11199 2023-12-30\n4 validate       1426 2023-12-30\n```\n:::\n:::\n\n\n2023-12-29 Update: I've started using `checkmate` to check function arguments and have found\nthat `validate` is better overall at data validation.\n\nChapter 13 introduces [targets](https://docs.ropensci.org/targets/), \"a Make-like pipeline tool for\nstatistics and data science in R.\" Conceptually, targets is very similar to an R Notebook, but like\nMake, will skip components that are up to date, and can run targets in parallel to speed up builds.\ntargets can also render R Markdown documents using the `tarchetypes` package. I found the example\ntarget pipeline in the book convoluted and didn't attempt to follow it. The targets\n[manual](https://books.ropensci.org/targets/) explains that it implements\n[two kinds](https://books.ropensci.org/targets/literate-programming.html#scope) of literate\nprogramming:\n\n> 1. A literate programming source document (or Quarto project) that renders inside an individual\n>    target. Here, you define a special kind of target that runs a lightweight R Markdown report\n>    which depends on upstream targets.\n> 1. Target Markdown, an overarching system in which one or more Quarto or R Markdown files write\n>    the _targets.R file and encapsulate the pipeline.\n\nOf these two types, the second is a better fit with my preferred workflow: including multiple\nself-contained notebooks in a single repository. From the\n[appendix](https://books.ropensci.org/targets/markdown.html), the design of Target Markdown supports\nboth interactive development using notebooks and running a pipeline non-interactively when rendering\nthe final document. For my work, targets doesn't offer significant advantages over using R\nMarkdown and Quarto - the only slowdown I typically encounter is when building a site with many\nnotebooks, which the Quarto [freeze](https://quarto.org/docs/projects/code-execution.html#freeze)\noption handles by only re-rendering documents when the source file changes. (I'm not performing the\nlarge, complex computations that targets is designed for)\n\nChapter 14 covers Docker, and asserts that it is necessary for reproducibility. While using Docker\nensures a stable operating system environment, I think the book overstates the case for\nreproducibility, citing a single example where the operating system changed the results of an\nanalysis because the scripts relied on OS file ordering. Much like use of targets, Docker would be\nmost useful for projects with complex development environments shared across teams, but much of the\nbenefits can be achieved using other approaches, like using [OS-independent](https://fs.r-lib.org)\ncode. The chapter also encourages using a \"frozen\" development environment that is updated on a\nfixed schedule to minimize the impact of frequent updates. This is exactly the opposite of the\nmodern DevOps approach - the issues created by small, frequent updates are smaller and easier to\naddress than the more complex problems created by large upgrades. I *always* start development by\nupdating packages to the latest production release - while this sometimes introduces issues, they\nare typically easy to fix, and prioritizing maintenance first improves quality and security.\n\nAn alternate approach to using Docker is to leverage\n[GitHub Actions](https://github.com/features/actions), which provides on-demand virtual machines\nthat can be used to consistently test, build, and deploy code. The Tidyverse community provides a\n[library](https://github.com/r-lib/actions) of GitHub Actions for R, which I've customized for\n[rdev](https://jabenninghoff.github.io/rdev/reference/use_rdev_package.html). In fact, chapter 15\ncovers use of GitHub Actions using r-lib and presents them as a potential alternative for Docker.\n\nOverall, I do follow the book's core recommendations for reproducibility:\n\n- Use version control extensively\n- Use trunk-based development\n- Adopt functional programming and [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself)\n- Use R Markdown which embeds analysis code and code output directly into the written report\n- Use [renv](https://rstudio.github.io/renv/) to manage dependencies\n- Package all R code and publish using GitHub Pages\n- Write unit tests using [testthat](https://testthat.r-lib.org)\n- Use assertions to validate function arguments and imported data\n- Check test coverage using [`covr`](https://covr.r-lib.org)\n- Use automated builds (but using Quarto instead of targets)\n\nI would consider use of targets and Docker for larger, more complex, or long-lived projects, but I\nfound that `fusen` offered no clear benefits and wouldn't recommend its use. I think the biggest\nlesson I took from the book was to follow DRY a bit more strictly than I currently do, and use more\nfunctions, tests, and assertions in my analysis code.\n\nThe book does reference some interesting reading I've added to my list:\n\n- John M. Chambers. \"Object-Oriented Programming, Functional Programming and R.\"\n  Statist. Sci. 29 (2) 167 - 180, May 2014. <https://doi.org/10.1214/13-STS452>\n- [Trunk-Based Development And Branch By Abstraction](https://trunkbaseddevelopment.com/)\n\nWhile reading the book, I discovered some interesting additional resources:\n\n- [Vertical](https://www.crumplab.com/vertical/), a \"an R-based structured workflow for creating\n  and sharing research assets in the form of an extended R package\", which I plan to review and\n  compare to [rdev](https://jabenninghoff.github.io/rdev/)\n- [Four ways to write assertion checks in R](https://blog.djnavarro.net/posts/2023-08-08_being-assertive/) -\n  an article on four methods for writing assertions in R:\n    - Use `stopifnot()` from base R\n    - Use the [`assertthat`](https://github.com/hadley/assertthat) package (last updated March 2019)\n    - Use the [`assertive`](https://bitbucket.org/richierocks/assertive/src/master/) package\n      (last updated July 2020)\n    - Use the [`assertr`](https://docs.ropensci.org/assertr/) package for data assertions, which\n      works especially well for assertion checks against data frames used in data analysis\n- I also revisited the [`validate`](https://github.com/data-cleaning/validate) package, a data\n  validation rules engine, which includes the Data Validation Cookbook (in [Future Reading])\n\n## Future Reading\n\nR books on my reading list.\n\n- [The R Manuals](https://rstudio.github.io/r-manuals/) - a re-styled version of the original R\n  manuals, published using Quarto (starting with *Writing R Extensions*)\n- [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/) - written by the author\n  of [knitr](https://yihui.org/knitr/)\n- [R Markdown Cookbook](https://bookdown.org/yihui/rmarkdown-cookbook/) - the follow-up to *The\n  Definitive Guide*\n- [The Data Validation Cookbook](https://data-cleaning.github.io/validate/) - a book on the R\n  [validate](https://CRAN.R-project.org/package=validate) package\n- [Discovering Statistics Using R](https://us.sagepub.com/en-us/nam/discovering-statistics-using-r/book236067) - recommended to me\n  as an introduction to statistics using R\n\n## R Dialects\n\nAn explanatory note on the R dialects of base R and tidyverse R.\n\nThe [R programming language](https://en.wikipedia.org/wiki/R_(programming_language)) is over 30\nyears old and has a large number of [packages](https://en.wikipedia.org/wiki/R_package) (R\nlibraries) that extend R. Unlike\n[python](https://en.wikipedia.org/wiki/Python_(programming_language)) (a general purpose language),\nR was designed specifically for analysis, visualization, and statistical modeling, which is why I\n[chose R](https://www.information-safety.org/2020/09/11/working-with-r/) for data analysis: it has\nbuilt-in support for data structures like data frames (implemented in python using\n[pandas](https://en.wikipedia.org/wiki/Pandas_(software))), vectors, packages for just about any\nstatistical tool you'd need, and of course, [ggplot2](https://en.wikipedia.org/wiki/Ggplot2). In\nfairness, python is more popular, more robust, and a better tool for some tasks, like data\nacquisition and machine learning (which were not priorities for my use).\n\nLike many human languages, R has developed two distinct dialects: base R and tidyverse R. Base R\nconsists of the [packages](https://cran.r-project.org/doc/FAQ/R-FAQ.html#Add_002don-packages-in-R)\nincluded in the R distribution\n*(base, compiler, datasets, graphics, grDevices, grid, methods, parallel, splines, stats, stats4, tcltk, tools, utils)*, and the\n[Tidyverse](https://en.wikipedia.org/wiki/Tidyverse) is a collection of packages that implement a\n[domain-specific language](https://en.wikipedia.org/wiki/Domain-specific_language) for data\nanalysis, originally created by [Hadley Wickham](https://en.wikipedia.org/wiki/Hadley_Wickham).\n\nIn my experience, tidyverse R is better for data analysis, where base R is better for writing\npackages - tidyverse functions are closer to natural language, but have many more dependencies.\n[Comparing](https://atrebas.github.io/post/2019-03-03-datatable-dplyr/) two popular tools for data\nmanipulation, [dplyr](https://dplyr.tidyverse.org) (tidyverse R) and\n[data.table](https://rdatatable.gitlab.io/data.table/) (base R) shows these differences.\n\nThis code snippet is from a short analysis of survey responses using dplyr:\n\n```r\nsurvey_results <- survey_import |>\n  mutate(across(Q1:Q7, ~ case_when(\n    .x == \"strongly disagree\" ~ 1,\n    .x == \"disagree\" ~ 2,\n    .x == \"neither agree nor disagree\" ~ 3,\n    .x == \"agree\" ~ 4,\n    .x == \"strongly agree\" ~ 5\n  ))) |>\n  mutate(Q8 = as.numeric(Q8 == \"Yes\")) |>\n  arrange(end_date)\n```\n\nThe code is reasonably easy to understand, even if you're not familiar with R.\n\nThe same code written in data.table isn't as clear:\n\n```r\nlikert_5 <- c(\n  \"strongly disagree\", \"disagree\", \"neither agree nor disagree\",\n  \"agree\", \"strongly agree\"\n)\nq_likert <- paste0(\"Q\", 1:7)\nq_yesno <- \"Q8\"\n\nsurvey_results <- copy(survey_import)\nsurvey_results <- survey_results[\n  , (q_likert) := lapply(.SD, \\(x) as.numeric(factor(x, levels = likert_5))),\n  .SDcols = q_likert\n][\n  , (q_yesno) := lapply(.SD, \\(x) as.numeric(x == \"Yes\")),\n  .SDcols = q_yesno\n][\n  order(end_date)\n]\n```\n\nWhile it may be harder to read, data.table has some clear advantages: it is quite\n[fast](https://h2oai.github.io/db-benchmark/), especially with very large datasets, and has no\n[dependencies](https://github.com/Rdatatable/data.table/blob/master/DESCRIPTION) other than base R,\nwhere dplyr has many.\n\nThese tradeoffs are why I tend to use tidyverse R for analysis and base R for functions (most\ntidyverse expressions have functional equivalents in base R). Code used in data analysis should be\nclear and easy to read, which tidyverse R excels at. Packaged functions provide documentation and\nthe source code isn't typically read, but many dependencies can be problematic; `R CMD check` will\nraise a NOTE if there are too many imports.\n",
    "supporting": [
      "r-books_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}