{
  "hash": "6df3938ff7add9c4e27e8f4d19ac92f5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ggplot2 (Scales)\"\nauthor: \"John Benninghoff\"\ndate: '2022-12-03'\ndate-modified: '2023-11-11'\ncategories: [exercises, ggplot2]\norder: 303\noutput:\n  html_notebook:\n    theme:\n      version: 5\n      preset: bootstrap\n    css: assets/extra.css\n    pandoc_args: --shift-heading-level-by=1\n    toc: yes\n    toc_float:\n      collapsed: yes\n      smooth_scroll: no\n---\n\n\nWorkbook for completing quizzes and exercises from the \"Scales\" chapters of [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/index.html), third edition, with comparisons to solutions from [Solutions to ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book-solutions-3ed.netlify.app).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(jbplot)\n\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.align = \"center\"\n)\n```\n:::\n\n\n# Introduction\n\nThis workbook includes answers and solutions to the quizzes and exercises from [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/index.html) and [Solutions to ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book-solutions-3ed.netlify.app), organized by chapter. It includes excerpts from both books, copied here.\n\n**WARNING, SPOILERS!** If you haven't read the ggplot2 book and intend to complete the quizzes and exercises, don't read this notebook. It contains my (potentially wrong) answers to both.\n\n# 10 Position scales and axes\n\nPosition scales are used to control the locations of visual entities in a plot, and how those locations are mapped to data values. Every plot has two position scales, corresponding to the x and y aesthetics. In most cases this is clear in the plot specification, because the user explicitly specifies the variables mapped to x and y explicitly. However, this is not always the case. Consider this plot specification:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ)) +\n  geom_histogram()\n```\n:::\n\n\nIn this example the y aesthetic is not specified by the user. Rather, the aesthetic is mapped to a computed variable: `geom_histogram()` computes a `count` variable that gets mapped to the y aesthetic. The default behaviour of `geom_histogram()` is equivalent to the following:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(x = displ, y = after_stat(count))) +\n  geom_histogram()\n```\n:::\n\n\nBecause position scales are used in every plot, it is useful to understand how they work and how they can be modified.\n\n## Notes\n\nThe goal of `label_date_short()` is to automatically construct short labels that are sufficient to uniquely identify the dates: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(economics, aes(date, psavert)) +\n  geom_line(na.rm = TRUE) +\n  labs(x = NULL, y = NULL) +\n  scale_x_date(limits = as.Date(c(\"2004-01-01\", \"2005-01-01\")), labels = scales::label_date_short())\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nLet's create a plot with rotated labels!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(manufacturer, hwy)) +\n  geom_boxplot() +\n  guides(x = guide_axis(angle = 90))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=816}\n:::\n:::\n\n\n# 11 Colour scales and legends\n\nA comparison of different color scales:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nerupt <- ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +\n  geom_raster() +\n  scale_x_continuous(NULL, expand = c(0, 0)) +\n  scale_y_continuous(NULL, expand = c(0, 0)) +\n  theme(legend.position = \"none\")\n\nerupt\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_viridis_c()\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-5-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_viridis_c(option = \"magma\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-5-3.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Missing values\n\nAll continuous colour scales have an `na.value` parameter that controls what colour is used for missing values (including values outside the range of the scale limits). By default it is set to grey, which will stand out when you use a colourful scale. If you use a black and white scale, you might want to set it to something else to make it more obvious. You can set `na.value = NA` to make missing values invisible, or choose a specific colour if you prefer:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1, y = 1:5, z = c(1, 3, 2, NA, 5))\nbase <- ggplot(df, aes(x, y)) +\n  geom_tile(aes(fill = z), linewidth = 5) +\n  labs(x = NULL, y = NULL) +\n  scale_x_continuous(labels = NULL)\nbase\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase + scale_fill_gradient(na.value = NA)\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-6-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase + scale_fill_gradient(na.value = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-6-3.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Limits, breaks, and labels\n\nScale limits for discrete colour scales can be set using the `limits` argument to the scale argument, or by using the `lims()` helper function. This can be important when the same variable is represented in different plots, and you want to ensure that the colours are consistent across plots. To demonstrate this I'll extend the example from Section 10.1.1. Colour represents the fuel type, which can be **r**egular, **e**thanol, **d**iesel, **p**remium or **c**ompressed natural gas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_99 <- mpg %>% filter(year == 1999)\nmpg_08 <- mpg %>% filter(year == 2008)\nbase_99 <- ggplot(mpg_99, aes(displ, hwy, colour = fl)) +\n  geom_point()\nbase_08 <- ggplot(mpg_08, aes(displ, hwy, colour = fl)) +\n  geom_point()\nbase_99\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase_08\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nEach plot makes sense on its own, but visual comparison between the two is difficult. The axis limits are different, and because only regular, premium and diesel fuels are represented in the 1998 data the colours are mapped inconsistently. To ensure a consistent mapping for the colour aesthetic, we can use `lims()` to manually set the limits. As discussed in Section 10.1.1 it takes name-value pairs as input, where the name specifies the aesthetic and the value specifies the limits:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_99 + lims(colour = c(\"c\", \"d\", \"e\", \"p\", \"r\"))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase_08 + lims(colour = c(\"c\", \"d\", \"e\", \"p\", \"r\"))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-8-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nThe nice thing about `lims()` is that we can set the limits for multiple aesthetics at once. To ensure that x, y, and colour all use consistent limits we can do this:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_99 +\n  lims(\n    x = c(1, 7),\n    y = c(10, 45),\n    colour = c(\"c\", \"d\", \"e\", \"p\", \"r\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase_08 +\n  lims(\n    x = c(1, 7),\n    y = c(10, 45),\n    colour = c(\"c\", \"d\", \"e\", \"p\", \"r\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-9-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nThere are two potential limitations to these plots. First, while setting the scale limits does ensure that colours are mapped identically in both plots, it also means that the plot for the 1999 data displays labels for all five fuel types, despite the fact that ethanol and compressed natural gas fuels were not in use at that time. We can address this by manually setting the scale breaks, ensuring that only those fuel types that appear in the data are shown in the legend. The second limitation is that the labels are not particularly helpful, which we can address by specifying them manually. When setting multiple properties of a single scale, it can be more useful to customise using the arguments to the scale function rather than using the `lims()` helper function:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_99 +\n  scale_color_discrete(\n    limits = c(\"c\", \"d\", \"e\", \"p\", \"r\"),\n    breaks = c(\"d\", \"p\", \"r\"),\n    labels = c(\"diesel\", \"premium\", \"regular\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nHowever, there is nothing stopping you from using `lims()` to control the position aesthetic limits, while using `scale_colour_discrete()` to exercise more fine-grained control over the colour aesthetic:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_99 +\n  lims(x = c(1, 7), y = c(10, 45)) +\n  scale_color_discrete(\n    limits = c(\"c\", \"d\", \"e\", \"p\", \"r\"),\n    breaks = c(\"d\", \"p\", \"r\"),\n    labels = c(\"diesel\", \"premium\", \"regular\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase_08 +\n  lims(x = c(1, 7), y = c(10, 45)) +\n  scale_color_discrete(\n    limits = c(\"c\", \"d\", \"e\", \"p\", \"r\"),\n    labels = c(\"compressed\", \"diesel\", \"ethanol\", \"premium\", \"regular\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-11-2.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Legends\n\n*   `override.aes` is useful when you want the elements in the legend \n    display differently to the geoms in the plot. This is often required\n    when you've used transparency or size to deal with moderate overplotting\n    and also used colour in the plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(displ, hwy, colour = drv)) +\n  geom_point(size = 4, alpha = 0.2, stroke = 0)\n\nbase + guides(colour = guide_legend())\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase + guides(colour = guide_legend(override.aes = list(alpha = 1)))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-12-2.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Binned colour scales {#binned-colour}\n\nColour scales also come in binned versions. The default scale is `scale_fill_binned()` which in turn defaults to `scale_fill_steps()`. As with the binned position scales discussed in Section 10.4 these scales have an `n.breaks` argument that controls the number of discrete colour categories created by the scale. Counterintuitively---because the human visual system is very good at detecting edges---this can sometimes make a continuous colour gradient easier to perceive:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nerupt + scale_fill_binned()\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_steps()\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-13-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_steps(n.breaks = 8)\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-13-3.png){fig-align='center' width=816}\n:::\n:::\n\n\nThe viridis palettes can be used in the same way, by calling the palette generating functions directly when specifying the `colours` argument to `scale_fill_stepsn()`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nerupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::viridis(9))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::magma(9))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-14-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nerupt + scale_fill_stepsn(n.breaks = 9, colours = viridis::inferno(9))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-14-3.png){fig-align='center' width=816}\n:::\n:::\n\n\n# 12 Other aesthetics\n\nIn addition to position and colour, there are several other aesthetics that ggplot2 can use to represent data.\n\n## Size\n\nThe size aesthetic is typically used to scale points and text. The default scale for size aesthetics is `scale_size()` in which a linear increase in the variable is mapped onto a linear increase in the area (not the radius) of the geom. Scaling as a function of area is a sensible default as human perception of size is more closely mimicked by area scaling than by radius scaling. By default the smallest value in the data (more precisely in the scale limits) is mapped to a size of 1 and the largest is mapped to a size of 6. The `range` argument allows you to scale the size of the geoms:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase <- ggplot(mpg, aes(displ, hwy, size = cyl)) +\n  geom_point()\nbase\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nbase + scale_size(range = c(1, 2))\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-15-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nLet's draw a scale model of the planets!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplanets <- data.frame(\n  name = c(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"),\n  type = c(rep(\"Inner\", 4), rep(\"Outer\", 4)),\n  position = 1:8,\n  radius = c(2440, 6052, 6378, 3390, 71400, 60330, 25559, 24764),\n  stringsAsFactors = FALSE\n)\nplanets$name <- with(planets, factor(name, name))\n\nggplot(planets, aes(1, name, size = radius)) +\n  geom_point() +\n  scale_x_continuous(breaks = NULL) +\n  scale_radius(limits = c(0, NA), range = c(0, 15)) +\n  labs(x = NULL, y = NULL, size = \"Radius\", title = \"The planets of the solar system\") +\n  theme_quo(y = FALSE, x = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Manual scales\n\nLet's create a plot with manual scales:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhuron <- data.frame(year = 1875:1972, level = as.numeric(LakeHuron))\n\nggplot(huron, aes(year)) +\n  geom_line(aes(y = level + 5, colour = \"above\")) +\n  geom_line(aes(y = level - 5, colour = \"below\")) +\n  scale_colour_manual(\"Direction\",\n    values = c(above = \"red\", below = \"blue\")\n  ) +\n  labs(x = NULL, y = NULL)\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=816}\n:::\n:::\n\n\n## Identity scales\n\nLet's plot all the R colors!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(luv_colours, aes(u, v)) +\n  geom_point(aes(colour = col), size = 3) +\n  scale_color_identity() +\n  coord_equal() +\n  labs(x = NULL, y = NULL)\n```\n\n::: {.cell-output-display}\n![](ggplot2-3_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=816}\n:::\n:::\n",
    "supporting": [
      "ggplot2-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}