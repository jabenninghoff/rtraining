{
  "hash": "2b0b49d6a03d829fa66e08c5b103d027",
  "result": {
    "markdown": "---\ntitle: \"ggplot2 (Getting started)\"\nauthor: \"John Benninghoff\"\ndate: '2022-11-20'\nfile-modified: '2023-11-11'\ncategories: [exercises, ggplot2]\norder: 301\noutput:\n  html_notebook:\n    theme:\n      version: 5\n      preset: bootstrap\n    css: assets/extra.css\n    toc: yes\n    toc_float:\n      collapsed: yes\n      smooth_scroll: no\n---\n\n\nWorkbook for completing quizzes and exercises from the \"Getting started\" chapters of [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/index.html), third edition, with comparisons to solutions from [Solutions to ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book-solutions-3ed.netlify.app).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(modelr)\nlibrary(jbplot)\n\nknitr::opts_chunk$set(\n  comment = \"#>\",\n  fig.align = \"center\"\n)\n```\n:::\n\n\n# Introduction\n\nThis workbook includes answers and solutions to the quizzes and exercises from [ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book.org/index.html) and [Solutions to ggplot2: Elegant Graphics for Data Analysis](https://ggplot2-book-solutions-3ed.netlify.app), organized by chapter. It includes excerpts from both books, copied here.\n\n**WARNING, SPOILERS!** If you haven't read the ggplot2 book and intend to complete the quizzes and exercises, don't read this notebook. It contains my (potentially wrong) answers to both.\n\n# 2 First steps\n\nThe goal of this chapter is to teach you how to produce useful graphics with ggplot2 as quickly as possible. You’ll learn the basics of ggplot() along with some useful “recipes” to make the most important plots. ggplot() allows you to make complex plots with just a few lines of code because it’s based on a rich underlying theory, the grammar of graphics. Here we’ll skip the theory and focus on the practice, and in later chapters you’ll learn how to use the full expressive power of the grammar.\n\n## 2.2.1 Exercises\n\n1.  List five functions that you could use to get more information about the\n    `mpg` dataset.\n\nAnswer:\n\nFive common base R functions I use to interrogate dataframes are:\n\n1. `summary()`\n1. `hist()`\n1. `plot()`\n1. `lm()`\n1. `View()`\n\nGG Solutions:\n\n-   `help(mpg)`: Documentation of dataset\n-   `dim(mpg)`: Dimensions of dataset\n-   `summary(mpg)`: Summary measures of dataset\n-   `str(mpg)`: Display of the internal structure of dataset\n-   `glimpse(mpg)`: `dplyr` version of `str(mpg)`\n\n---\n\n2.  How can you find out what other datasets are included with ggplot2?\n\nAnswer: use `data(package = \"ggplot2\")`, which returns the following:\n\n```\nData sets in package ‘ggplot2’:\n\ndiamonds                      Prices of over 50,000 round cut diamonds\neconomics                     US economic time series\neconomics_long                US economic time series\nfaithfuld                     2d density estimate of Old Faithful data\nluv_colours                   'colors()' in Luv space\nmidwest                       Midwest demographics\nmpg                           Fuel economy data from 1999 to 2008 for 38 popular models of\n                              cars\nmsleep                        An updated and expanded version of the mammals sleep dataset\npresidential                  Terms of 12 presidents from Eisenhower to Trump\nseals                         Vector field of seal movements\ntxhousing                     Housing sales in TX\n```\n\nGG Solutions:\n\n`data(package = \"ggplot2\")` loads the available data sets in ggplot2. Alternatively,if you have internet access, go to https://ggplot2.tidyverse.org/reference/index.html#section-data\n\n---\n    \n3.  Apart from the US, most countries use fuel consumption (fuel consumed\n    over fixed distance) rather than fuel economy (distance travelled with\n    fixed amount of fuel). How could you convert `cty` and `hwy` into the\n    European standard of l/100km? \n\nAnswer: to convert miles/gallon to liters/100km, we use the formula:\n\n$\\frac{1}{miles/gallon} \\times \\frac{3.78541}{1.609344 \\div 100} = l/100km$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_l100km <- function(x) {\n  (1 / x) * 3.78541 / (1.609344 / 100)\n}\n\nmpg |>\n  mutate(cty = mpg_l100km(cty), hwy = mpg_l100km(hwy))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 234 × 11\n#>    manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n#>    <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <dbl> <dbl> <chr> <chr>\n#>  1 audi         a4           1.8  1999     4 auto… f      13.1  8.11 p     comp…\n#>  2 audi         a4           1.8  1999     4 manu… f      11.2  8.11 p     comp…\n#>  3 audi         a4           2    2008     4 manu… f      11.8  7.59 p     comp…\n#>  4 audi         a4           2    2008     4 auto… f      11.2  7.84 p     comp…\n#>  5 audi         a4           2.8  1999     6 auto… f      14.7  9.05 p     comp…\n#>  6 audi         a4           2.8  1999     6 manu… f      13.1  9.05 p     comp…\n#>  7 audi         a4           3.1  2008     6 auto… f      13.1  8.71 p     comp…\n#>  8 audi         a4 quattro   1.8  1999     4 manu… 4      13.1  9.05 p     comp…\n#>  9 audi         a4 quattro   1.8  1999     4 auto… 4      14.7  9.41 p     comp…\n#> 10 audi         a4 quattro   2    2008     4 manu… 4      11.8  8.40 p     comp…\n#> # ℹ 224 more rows\n```\n:::\n:::\n\n\nGG Solutions:\n\n- According to [asknumbers](https://www.asknumbers.com/mpg-to-L100km.aspx), you divide 235.214583 by the mpg values in `cty` and `hwy` to convert them into the European standard of l/100km. \n\n- Function to convert into European standard (Rademaker, 2016):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpgTol100km <- function(milespergallon) {\n  GalloLiter <- 3.785411784\n  MileKilometer <- 1.609344\n\n  l100km <- (100 * GalloLiter) / (milespergallon * MileKilometer)\n  l100km\n}\n```\n:::\n\n\n---\n    \n4.  Which manufacturer has the most models in this dataset? Which model has \n    the most variations? Does your answer change if you remove the redundant\n    specification of drive train (e.g. \"pathfinder 4wd\", \"a4 quattro\") from the \n    model name?\n\nAnswer: we can generate a dataframe with manufacturers, models, and variations using:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary <- mpg |>\n  count(manufacturer, model) |>\n  rename(variations = n)\n\nmpg_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 38 × 3\n#>    manufacturer model              variations\n#>    <chr>        <chr>                   <int>\n#>  1 audi         a4                          7\n#>  2 audi         a4 quattro                  8\n#>  3 audi         a6 quattro                  3\n#>  4 chevrolet    c1500 suburban 2wd          5\n#>  5 chevrolet    corvette                    5\n#>  6 chevrolet    k1500 tahoe 4wd             4\n#>  7 chevrolet    malibu                      5\n#>  8 dodge        caravan 2wd                11\n#>  9 dodge        dakota pickup 4wd           9\n#> 10 dodge        durango 4wd                 7\n#> # ℹ 28 more rows\n```\n:::\n:::\n\n\nThe model with the most variations is the Dodge Caravan 2wd.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary |>\n  arrange(variations) |>\n  tail(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 3\n#>   manufacturer model       variations\n#>   <chr>        <chr>            <int>\n#> 1 dodge        caravan 2wd         11\n```\n:::\n:::\n\nThe manufacturer with the most models is Toyota.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary |>\n  count(manufacturer) |>\n  arrange(n) |>\n  tail(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 2\n#>   manufacturer     n\n#>   <chr>        <int>\n#> 1 toyota           6\n```\n:::\n:::\n\n\nIf we first remove the redundant drive train from the summary, we get:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary2 <- mpg |>\n  mutate(model = gsub(\" (quattro)|(2wd)|(4wd)|(awd)$\", \"\", model)) |>\n  count(manufacturer, model) |>\n  rename(variations = n)\n\nmpg_summary2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 37 × 3\n#>    manufacturer model              variations\n#>    <chr>        <chr>                   <int>\n#>  1 audi         \"a4\"                       15\n#>  2 audi         \"a6\"                        3\n#>  3 chevrolet    \"c1500 suburban \"           5\n#>  4 chevrolet    \"corvette\"                  5\n#>  5 chevrolet    \"k1500 tahoe \"              4\n#>  6 chevrolet    \"malibu\"                    5\n#>  7 dodge        \"caravan \"                 11\n#>  8 dodge        \"dakota pickup \"            9\n#>  9 dodge        \"durango \"                  7\n#> 10 dodge        \"ram 1500 pickup \"         10\n#> # ℹ 27 more rows\n```\n:::\n:::\n\n\nThe model with the most variations has changed to the Audi A4.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary2 |>\n  arrange(variations) |>\n  tail(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 3\n#>   manufacturer model variations\n#>   <chr>        <chr>      <int>\n#> 1 audi         a4            15\n```\n:::\n:::\n\n\nThe manufacturer with the most models is still Toyota.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_summary2 |>\n  count(manufacturer) |>\n  arrange(n) |>\n  tail(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> # A tibble: 1 × 2\n#>   manufacturer     n\n#>   <chr>        <int>\n#> 1 toyota           6\n```\n:::\n:::\n\n\nGG Solutions:\n\nNot included here because I believe the answer to question 4 in [2.2 Exercises](https://ggplot2-book-solutions-3ed.netlify.app/first-steps.html#exercises-1) is incorrect, as it counts variants by manufacturer, not models by manufacturer.\n\n---\n\n## 2.3.1 Exercises\n\n1.  How would you describe the relationship between `cty` and `hwy`?\n    Do you have any concerns about drawing conclusions from that plot?\n\nAnswer: we can explore the relationship using a scatterplot: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nThere is a strong correlation between `cty` and `hwy`, which is expected since these are both measures of fuel efficiency of the same car.\n\nGG Solutions:\n\n- The plot shows a strongly linear relationship, which tells me that `cty` and `hwy` are highly correlated variables. The only concern I have is that the points seem to be overlapping.\n- There is not much insight to be gained except that cars which are fuel efficient on a highway are also fuel efficient in cities. This relationship is probably a function of speed (Rademaker, 2016) \n\n---\n\n2.  What does `ggplot(mpg, aes(model, manufacturer)) + geom_point()` show?\n    Is it useful? How could you modify the data to make it more informative?\n\nAnswer: this plot shows each model as a point for each manufacturer, which is not particularly useful, although it does allow for a quick count of models by manufacturer. A bar chart showing count of models by manufacturer would be more useful.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(model, manufacturer)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- The plot shows the manufacturer of each model. Its not very readable since there are too many models and this clutters up the x-axis with too many ticks! I would just plot 20 or so models so that the graph is more readable. See below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg %>%\n  head(25) %>%\n  ggplot(aes(model, manufacturer)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=816}\n:::\n:::\n\n\n- A possible alternative would be to look total number of observations for each manufacturer-model combination using geom_bar(). (Rademaker, 2016)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- mpg %>%\n  transmute(\"man_mod\" = paste(manufacturer, model, sep = \" \")) # nolint: keyword_quote_linter.\nggplot(df, aes(man_mod)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nNote: I prefer my solution for this exercise.\n\n---\n\n3.  Describe the data, aesthetic mappings and layers used for each of the \n    following plots. You'll need to guess a little because you haven't seen\n    all the datasets and functions yet, but use your common sense! See if you \n    can predict what the plot will look like before running the code.\n    \n    1. `ggplot(mpg, aes(cty, hwy)) + geom_point()`\n    1. `ggplot(diamonds, aes(carat, price)) + geom_point()`\n    1. `ggplot(economics, aes(date, unemploy)) + geom_line()`\n    1. `ggplot(mpg, aes(cty)) + geom_histogram()`\n\nAnswer:\n\n1. `ggplot(mpg, aes(cty, hwy)) + geom_point()` - scatterplot of city mpg against highway mpg\n1. `ggplot(diamonds, aes(carat, price)) + geom_point()` - scatterplot of diamond weight in carats\n   against price\n1. `ggplot(economics, aes(date, unemploy)) + geom_line()` - a line plot showing the unemployment\n   rate over time\n1. `ggplot(mpg, aes(cty)) + geom_histogram()` - a histogram of city mpg\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat, price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-13-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(economics, aes(date, unemploy)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-13-3.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(cty)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-13-4.png){fig-align='center' width=816}\n:::\n:::\n\n\nIn general, my guesses are correct (given my existing experience with ggplot), except for the economics plot, which appears to show the number of unemployed people instead of an employment rate.\n\nGG Solutions: (Rademaker, 2016)\n\n1. `ggplot(mpg, aes(cty, hwy)) + geom_point()`\n-   *Data*: `mpg`\n-   *Aesthetic*: highway miles per gallon is mapped to y position and city miles per gallon is mapped to x position.\n-   *Layer*: points\n\n2. `ggplot(diamonds, aes(carat, price)) + geom_point()`\n-   *Data*: `diamonds`\n-   *Aesthetic*: price in US dollars is mapped to y position, weight of the diamond is mapped to x position.\n-   *Layer*: points\n\n3.  `ggplot(economics, aes(date, unemploy)) + geom_line()`\n-   *Data*: `economics`\n-   *Aesthetic*: median duration of unemployment, in weeks, is mapped to y position and month of data collection is mapped to x position.\n-   *Layer*: line\n\n---\n\n## 2.4.1 Exercises\n\n1.  Experiment with the colour, shape and size aesthetics. What happens when \n    you map them to continuous values? What about categorical values? What \n    happens when you use more than one aesthetic in a plot?\n\nAnswer: observations based on the plots below:\n\n- Using a continuous variable with shape generates an error\n- Using a categorical variable with shape for more than 6 values generates a warning\n- Using a continuous variable with size works well\n- Using a categorical variable with size generates a warning\n- Using a continuous variable with color creates a gradient\n- Using a categorical variable with color creates a discrete mapping\n- Multiple aesthetics can overload the plot\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# continuous\nggplot(mpg, aes(displ, hwy, color = cyl)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\n# categorical\nggplot(mpg, aes(displ, hwy, color = drv)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-14-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\n# multiple\nmpg |>\n  mutate(year = as.factor(year)) |>\n  ggplot(aes(displ, hwy, color = drv, size = cyl, shape = year)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-14-3.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions offers a similar and less complete answer.\n\n---\n\n2.  What happens if you map a continuous variable to shape? Why? What happens\n    if you map `trans` to shape? Why?\n\nAnswer: As noted above, using a continuous variable with shape generates an error, because plots must have discrete shapes. Using a categorical variable with shape for more than 6 values (like `trans`) generates a warning, since (as the error notes) many different shapes can be hard to distinguish on a plot.\n\nGG Solutions presents a similar answer.\n\n---\n\n3.  How is drive train related to fuel economy? How is drive train related to\n    engine size and class?\n\nAnswer: The plots below show that:\n\n- Front wheel drive is correlated with higher fuel economy\n- Front wheel drive is correlated with smaller displacement, rear wheel drive is correlated with\n  larger displacement, and four wheel drive is not correlated with displacement\n- Some classes only have a single drive train:\n  - Two seaters only have rear wheel drive\n  - Minivans only have front wheel drive\n  - Pickups only have four wheel drive\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(hwy, drv)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, drv)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-15-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(class, drv)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-15-3.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions presents a similar answer using bar charts, and compares engine size and class together in a single plot.\n\nNote: GG Solutions does not explore the relationship between drive train and class.\n\n---\n\n## 2.5.1 Exercises\n\n1.  What happens if you try to facet by a continuous variable like \n    `hwy`? What about `cyl`?  What's the key difference?\n\nAnswer: faceting on a continuous variable creates a facet for each unique value in the data frame, which holds true for both `hwy` and `cyl`. The key difference is that `cyl` has fewer unique values, making the plot more readable and useful.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, cty)) +\n  geom_point() +\n  facet_wrap(vars(hwy))\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, cty)) +\n  geom_point() +\n  facet_wrap(vars(cyl))\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-16-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- The key difference is `hwy` is a continuous variable that has 27 unique values, so you get 27 different subsets. However, `cly` is a categorical variable and has 4 unique values, so `cyl` only has 4 different subsets. It is less cluttered when you try to facet.\n- (Rademaker, 2016) Faceting by a continuous variable works but becomes hard to read and interpret when the variable that we facet by has too many levels. \n\n---\n\n2.  Use faceting to explore the 3-way relationship between fuel economy,\n    engine size, and number of cylinders. How does faceting by number of\n    cylinders change your assessment of the relationship between\n    engine size and fuel economy?\n\nAnswer: engines with fewer cylinders have a stronger relationship between displacement and fuel economy (where larger engines have poorer fuel economy), strongest with 4 cylinders, unclear with 5 (due to limited data), weaker with 6, and no apparent relationship with 8.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x) +\n  facet_wrap(vars(cyl))\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- When I initially plot engine size and fuel economy, I see an overall decreasing linear relationship. Upon faceting, I see that the decreasing relationship is mostly seen in the 4 cylinder subset. In the other cylinder subsets, we see a flat relationship - as engine displacement increases, fuel economy remains constant.\n\n---\n\n3.  Read the documentation for `facet_wrap()`. What arguments can you use\n    to control how many rows and columns appear in the output?\n\nAnswer: use `nrow` and `ncol`.\n\nGG Solutions:\n\n- I can use the arguments `nrow, ncol` to control how many rows and columns appear in the output.\n\n---\n\n4.  What does the `scales` argument to `facet_wrap()` do? When might you use \n    it?\n\nAnswer: the `scales` argument determines whether scales are fixed (the default) or free on one or both dimensions. Using `scales = \"free\"` is helpful when comparing relationships when scale is less important, as shown in this reworked example of exercise 2, which focuses on the smoothed plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(displ, hwy)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x) +\n  facet_wrap(vars(cyl), scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- It allows users to decide whether scales should be fixed. I would use it whenever different subsets of the data are on vastly different scales. \n- (Rademaker, 2016) If we want to compare across facets, `scales = \"fixed\"` is more appropriate. If our focus is on individual patterns within each facet, setting `scales = \"free\"` might be more appropriate.\n\n---\n\n## 2.6.6 Exercises\n\n1.  What's the problem with the plot created by \n    `ggplot(mpg, aes(cty, hwy)) + geom_point()`? Which of the geoms \n    described above is most effective at remedying the problem?\n\nAnswer: as noted in GG Solutions, the problem is overplotting, which `geom_jitter` fixes:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(cty, hwy)) +\n  geom_point() +\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- The problem is overplotting. \n\nSolution 1. Use `geom_jitter` to add random noise to the data and avoid overplotting.\n\nSolution 2. (Rademaker, 2016) Set opacity with `alpha`\n\n---\n\n2.  One challenge with `ggplot(mpg, aes(class, hwy)) + geom_boxplot()`\n    is that the ordering of `class` is alphabetical, which is not terribly \n    useful. How could you change the factor levels to be more informative? \n    \n    Rather than reordering the factor by hand, you can do it automatically\n    based on the data:\n    `ggplot(mpg, aes(reorder(class, hwy), hwy)) + geom_boxplot()`.\n    What does `reorder()` do? Read the documentation.\n\nAnswer: as noted in the exercise, ordering of `class` by `hwy` is more informative. `reorder()` reorders levels based on the second, numeric value, by default using the mean.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mpg, aes(class, hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(mpg, aes(reorder(class, hwy), hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-20-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions takes a similar approach but instead uses `mutate(class = factor(class), class = fct_reorder(class, hwy))`.\n\n---\n\n3.  Explore the distribution of the carat variable in the `diamonds`\n    dataset. What `binwidth` reveals the most interesting patterns?\n\nAnswer: using trial and error, `binwidth = 0.01` reveals that carat weight is skewed towards round numbers (1, 1.25, 1.5, 2, etc.). Using the smaller `binwidth = 0.005` doesn't improve the pattern, and makes it harder to see.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.1)\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.01)\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-21-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nggplot(diamonds, aes(carat)) +\n  geom_histogram(binwidth = 0.005)\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-21-3.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions:\n\n- This is a subjective answer, but `binwidth` of 0.2 or 0.3 reveals that the distribution of carat is heavily skewed to the right. This means that most diamonds carats are between 0 and 1.\n\n---\n\n4.  Explore the distribution of the price variable in the `diamonds`\n    data. How does the distribution vary by cut?\n\nAnswer: a boxplot of price by cut shows that better cuts aren't necessarily more expensive.\n\nHowever, as noted in my [R Training Log](r-training-log.html):\n\n> [7.6 Patterns and models](https://r4ds.had.co.nz/exploratory-data-analysis.html#patterns-and-models) covers models and residuals, here showing how to reveal the expected relationship between cut and price:\n\nWe can remove the relationship between carats and price, and redo the boxplot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(cut, price)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\n# remove carat weight as a confounding variable\nmod <- lm(log(price) ~ log(carat), data = diamonds)\n\ndiamonds2 <- diamonds |>\n  add_residuals(mod) |>\n  mutate(resid = exp(resid))\n\nggplot(data = diamonds2) +\n  geom_boxplot(mapping = aes(x = cut, y = resid))\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-22-2.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions uses both a boxplot and a frequency polygon to compare cuts, and concludes:\n\n- (Rademaker, 2016) Fair quality diamonds are more expensive then others. Possible reason is they are bigger.\n\n---\n\n5.  You now know (at least) three ways to compare the distributions of \n    subgroups: `geom_violin()`, `geom_freqpoly()` and the colour aesthetic,\n    or `geom_histogram()` and faceting. What are the strengths and weaknesses \n    of each approach? What other approaches could you try?\n\nAnswer: Violin plots convey the most information but require an understanding of probability density. Frequency polygons allow for direct comparison on the same plot - in contrast, faceted histograms provide a better visualization of each variable, but make comparison more difficult. Other approaches include comparing boxplots, multiple density plots, or side-by-side histograms - a bar plot showing multiple variables for each bin.\n\nGG Solutions:\n\n- According to the book, `geom_violin()` shows a compact representation of the \"density\" of the distribution, highlighting the areas where more points are found. Its weakness is that violin plots rely on the calculation of a density estimate, which is hard to interpret.\n- According to the book, `geom_freqploy()` bins the data, then counts the number of observations in each bin using lines. One possible weakness is that you have to select the width of the bins yourself by experimentation.\n- According to the book, `geom_histogram()` and faceting makes it easier to see the distribution of each group, but makes comparisons between groups a little harder.\n\n---\n\n6.  Read the documentation for `geom_bar()`. What does the `weight` \n    aesthetic do? \n\nAnswer: for `geom_bar()`, the `weight` aesthetic changes the height of the bar from the number of cases in each group to the sum of the weights.\n\nGG Solutions:\n\n- The `weight` aesthetic converts the number of cases to a weight and makes the height of the bar proportional to the sum of the weights. See below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ng <- ggplot(mpg, aes(class))\n# Number of cars in each class:\ng + geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\n# Total engine displacement of each class\ng + geom_bar(aes(weight = displ))\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-23-2.png){fig-align='center' width=816}\n:::\n:::\n\n\n---\n\n7.  Using the techniques already discussed in this chapter, come up with\n    three ways to visualise a 2d categorical distribution. Try them out \n    by visualising the distribution of `model` and `manufacturer`, `trans` and \n    `class`, and `cyl` and `trans`.\n\nAnswer: three ways to visualize categorical distributions:\n\n- Bar charts\n- A scatterplot using alpha\n- A scatterplot using size\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg[c(\"manufacturer\", \"model\")] |>\n  unique() |>\n  ggplot(aes(manufacturer)) +\n  geom_bar(color = \"black\", fill = \"white\", width = 0.8) +\n  coord_flip() +\n  scale_x_discrete(limits = rev) +\n  labs(x = \"\", y = \"models\") +\n  theme_quo()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nmpg |>\n  ggplot(aes(trans, class)) +\n  geom_point(alpha = 0.1) +\n  scale_y_discrete(limits = rev) +\n  labs(x = \"\", y = \"\") +\n  theme_quo()\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-24-2.png){fig-align='center' width=816}\n:::\n\n```{.r .cell-code}\nmpg |>\n  count(trans, cyl) |>\n  ggplot(aes(cyl, trans, size = n)) +\n  geom_point() +\n  scale_y_discrete(limits = rev) +\n  labs(x = \"cylinders\", y = \"\", size = \"count\") +\n  theme_quo(minor.x = FALSE)\n```\n\n::: {.cell-output-display}\n![](ggplot2-1_files/figure-html/unnamed-chunk-24-3.png){fig-align='center' width=816}\n:::\n:::\n\n\nGG Solutions does not provide an answer.\n\n---\n",
    "supporting": [
      "ggplot2-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}